
optimize_training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08009b20  08009b20  0000ab20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe8  08009fe8  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe8  08009fe8  0000afe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ff0  08009ff0  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ff0  08009ff0  0000aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ff4  08009ff4  0000aff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009ff8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001d4  0800a1cc  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800a1cc  0000b5c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e623  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002075  00000000  00000000  00019827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0001b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f6  00000000  00000000  0001c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027411  00000000  00000000  0001cf7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109fb  00000000  00000000  0004438f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecef7  00000000  00000000  00054d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141c81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a74  00000000  00000000  00141cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00146738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b04 	.word	0x08009b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009b04 	.word	0x08009b04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <serialPrint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serialPrint(char *msg){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000ff0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000ff4:	6018      	str	r0, [r3, #0]
	char buffer[1024];
	snprintf(buffer, sizeof(buffer), "%s\r\n", msg);
 8000ff6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000ffa:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000ffe:	f107 0008 	add.w	r0, r7, #8
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <serialPrint+0x5c>)
 8001006:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800100a:	f005 f90f 	bl	800622c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 1000);
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f92c 	bl	8000270 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	f107 0108 	add.w	r1, r7, #8
 8001020:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <serialPrint+0x60>)
 8001026:	f003 fc77 	bl	8004918 <HAL_UART_Transmit>
	memset(text,0,sizeof(text));
 800102a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102e:	2100      	movs	r1, #0
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <serialPrint+0x64>)
 8001032:	f005 f992 	bl	800635a <memset>
}
 8001036:	bf00      	nop
 8001038:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	08009b20 	.word	0x08009b20
 8001044:	200002cc 	.word	0x200002cc
 8001048:	20000354 	.word	0x20000354

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001052:	f000 ffc3 	bl	8001fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f837 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 f927 	bl	80012ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800105e:	f000 f8f5 	bl	800124c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001062:	f000 f8c3 	bl	80011ec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001066:	f000 f881 	bl	800116c <MX_I2C1_Init>
//  serialPrint(text);
//
//  float baro = get_barometric();
//  sprintf(text, "Barometric : %.2f", baro);
//  serialPrint(text);
  BMP280_Init();
 800106a:	f000 fc21 	bl	80018b0 <BMP280_Init>
//	  float temperature = BMP280_CompensateTemperature(raw_tmp);
//	  sprintf(text,"Temp : %.2f", temperature);
//	  serialPrint(text);
//	  HAL_Delay(1000);

	  float temp = BMP280_GetTemperature();
 800106e:	f000 ff99 	bl	8001fa4 <BMP280_GetTemperature>
 8001072:	ed87 0a01 	vstr	s0, [r7, #4]
	  sprintf(text, "Temperature(C) : %.2f", temp);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fa66 	bl	8000548 <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	490e      	ldr	r1, [pc, #56]	@ (80010bc <main+0x70>)
 8001082:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <main+0x74>)
 8001084:	f005 f906 	bl	8006294 <siprintf>
	  serialPrint(text);
 8001088:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <main+0x74>)
 800108a:	f7ff ffab 	bl	8000fe4 <serialPrint>
	  float press = BMP280_GetPressure_hPa();
 800108e:	f000 ff67 	bl	8001f60 <BMP280_GetPressure_hPa>
 8001092:	ed87 0a00 	vstr	s0, [r7]
	  sprintf(text,"Pressure(hPa) : %.2f", press);
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f7ff fa56 	bl	8000548 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <main+0x78>)
 80010a2:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <main+0x74>)
 80010a4:	f005 f8f6 	bl	8006294 <siprintf>
	  serialPrint(text);
 80010a8:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <main+0x74>)
 80010aa:	f7ff ff9b 	bl	8000fe4 <serialPrint>

	  HAL_Delay(1000);
 80010ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b2:	f001 f80f 	bl	80020d4 <HAL_Delay>
  {
 80010b6:	bf00      	nop
 80010b8:	e7d9      	b.n	800106e <main+0x22>
 80010ba:	bf00      	nop
 80010bc:	08009b28 	.word	0x08009b28
 80010c0:	20000354 	.word	0x20000354
 80010c4:	08009b40 	.word	0x08009b40

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b096      	sub	sp, #88	@ 0x58
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	2244      	movs	r2, #68	@ 0x44
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 f93f 	bl	800635a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010ee:	f002 f8b3 	bl	8003258 <HAL_PWREx_ControlVoltageScaling>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010f8:	f000 f93e 	bl	8001378 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001104:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001106:	2310      	movs	r3, #16
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001116:	230a      	movs	r3, #10
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800111a:	2307      	movs	r3, #7
 800111c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800111e:	2302      	movs	r3, #2
 8001120:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4618      	mov	r0, r3
 800112c:	f002 f8ea 	bl	8003304 <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001136:	f000 f91f 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113e:	2303      	movs	r3, #3
 8001140:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	2104      	movs	r1, #4
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fcb2 	bl	8003abc <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800115e:	f000 f90b 	bl	8001378 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	3758      	adds	r7, #88	@ 0x58
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_I2C1_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <MX_I2C1_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_I2C1_Init+0x74>)
 8001178:	4a1b      	ldr	r2, [pc, #108]	@ (80011e8 <MX_I2C1_Init+0x7c>)
 800117a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_I2C1_Init+0x74>)
 8001184:	2201      	movs	r2, #1
 8001186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_I2C1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a6:	480e      	ldr	r0, [pc, #56]	@ (80011e0 <MX_I2C1_Init+0x74>)
 80011a8:	f001 fa60 	bl	800266c <HAL_I2C_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011b2:	f000 f8e1 	bl	8001378 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <MX_I2C1_Init+0x74>)
 80011ba:	f001 ffa7 	bl	800310c <HAL_I2CEx_ConfigAnalogFilter>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011c4:	f000 f8d8 	bl	8001378 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_I2C1_Init+0x74>)
 80011cc:	f001 ffe9 	bl	80031a2 <HAL_I2CEx_ConfigDigitalFilter>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 f8cf 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200001f0 	.word	0x200001f0
 80011e4:	40005400 	.word	0x40005400
 80011e8:	10d19ce4 	.word	0x10d19ce4

080011ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 80011f2:	4a15      	ldr	r2, [pc, #84]	@ (8001248 <MX_USART1_UART_Init+0x5c>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f6:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_USART1_UART_Init+0x58>)
 8001230:	f003 fb24 	bl	800487c <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800123a:	f000 f89d 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000244 	.word	0x20000244
 8001248:	40013800 	.word	0x40013800

0800124c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 8001252:	4a15      	ldr	r2, [pc, #84]	@ (80012a8 <MX_USART2_UART_Init+0x5c>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_USART2_UART_Init+0x58>)
 8001290:	f003 faf4 	bl	800487c <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800129a:	f000 f86d 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002cc 	.word	0x200002cc
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <MX_GPIO_Init+0xc4>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001370 <MX_GPIO_Init+0xc4>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <MX_GPIO_Init+0xc4>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <MX_GPIO_Init+0xc4>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a24      	ldr	r2, [pc, #144]	@ (8001370 <MX_GPIO_Init+0xc4>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <MX_GPIO_Init+0xc4>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001370 <MX_GPIO_Init+0xc4>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001370 <MX_GPIO_Init+0xc4>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <MX_GPIO_Init+0xc4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <MX_GPIO_Init+0xc4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a18      	ldr	r2, [pc, #96]	@ (8001370 <MX_GPIO_Init+0xc4>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_GPIO_Init+0xc4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2120      	movs	r1, #32
 8001326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132a:	f001 f987 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001334:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480b      	ldr	r0, [pc, #44]	@ (8001374 <MX_GPIO_Init+0xc8>)
 8001346:	f000 ffcf 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800134a:	2320      	movs	r3, #32
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f000 ffc0 	bl	80022e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	48000800 	.word	0x48000800

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_MspInit+0x44>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <HAL_MspInit+0x44>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6613      	str	r3, [r2, #96]	@ 0x60
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_MspInit+0x44>)
 8001398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_MspInit+0x44>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_MspInit+0x44>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_MspInit+0x44>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0ac      	sub	sp, #176	@ 0xb0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2288      	movs	r2, #136	@ 0x88
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 ffb4 	bl	800635a <memset>
  if(hi2c->Instance==I2C1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a21      	ldr	r2, [pc, #132]	@ (800147c <HAL_I2C_MspInit+0xb0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d13a      	bne.n	8001472 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013fc:	2340      	movs	r3, #64	@ 0x40
 80013fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fd7b 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001414:	f7ff ffb0 	bl	8001378 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_I2C_MspInit+0xb4>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141c:	4a18      	ldr	r2, [pc, #96]	@ (8001480 <HAL_I2C_MspInit+0xb4>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_I2C_MspInit+0xb4>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001430:	23c0      	movs	r3, #192	@ 0xc0
 8001432:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001448:	2304      	movs	r3, #4
 800144a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001452:	4619      	mov	r1, r3
 8001454:	480b      	ldr	r0, [pc, #44]	@ (8001484 <HAL_I2C_MspInit+0xb8>)
 8001456:	f000 ff47 	bl	80022e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_I2C_MspInit+0xb4>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	4a08      	ldr	r2, [pc, #32]	@ (8001480 <HAL_I2C_MspInit+0xb4>)
 8001460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001464:	6593      	str	r3, [r2, #88]	@ 0x58
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_I2C_MspInit+0xb4>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001472:	bf00      	nop
 8001474:	37b0      	adds	r7, #176	@ 0xb0
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40005400 	.word	0x40005400
 8001480:	40021000 	.word	0x40021000
 8001484:	48000400 	.word	0x48000400

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0ae      	sub	sp, #184	@ 0xb8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2288      	movs	r2, #136	@ 0x88
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 ff56 	bl	800635a <memset>
  if(huart->Instance==USART1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a43      	ldr	r2, [pc, #268]	@ (80015c0 <HAL_UART_MspInit+0x138>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d13d      	bne.n	8001534 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014bc:	2300      	movs	r3, #0
 80014be:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 fd1d 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d0:	f7ff ff52 	bl	8001378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d4:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d8:	4a3a      	ldr	r2, [pc, #232]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 80014da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014de:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e0:	4b38      	ldr	r3, [pc, #224]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b35      	ldr	r3, [pc, #212]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f0:	4a34      	ldr	r2, [pc, #208]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f8:	4b32      	ldr	r3, [pc, #200]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001504:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001508:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800151e:	2307      	movs	r3, #7
 8001520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152e:	f000 fedb 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001532:	e040      	b.n	80015b6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a23      	ldr	r2, [pc, #140]	@ (80015c8 <HAL_UART_MspInit+0x140>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d13b      	bne.n	80015b6 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800153e:	2302      	movs	r3, #2
 8001540:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001542:	2300      	movs	r3, #0
 8001544:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fcda 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001556:	f7ff ff0f 	bl	8001378 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	6593      	str	r3, [r2, #88]	@ 0x58
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a13      	ldr	r2, [pc, #76]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_UART_MspInit+0x13c>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158a:	230c      	movs	r3, #12
 800158c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a2:	2307      	movs	r3, #7
 80015a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015ac:	4619      	mov	r1, r3
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b2:	f000 fe99 	bl	80022e8 <HAL_GPIO_Init>
}
 80015b6:	bf00      	nop
 80015b8:	37b8      	adds	r7, #184	@ 0xb8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40004400 	.word	0x40004400

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 fd37 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}

0800162a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_kill>:

int _kill(int pid, int sig)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001644:	f004 fedc 	bl	8006400 <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	2216      	movs	r2, #22
 800164c:	601a      	str	r2, [r3, #0]
  return -1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_exit>:

void _exit (int status)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001662:	f04f 31ff 	mov.w	r1, #4294967295
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffe7 	bl	800163a <_kill>
  while (1) {}    /* Make sure we hang here */
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <_exit+0x12>

08001670 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e00a      	b.n	8001698 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001682:	f3af 8000 	nop.w
 8001686:	4601      	mov	r1, r0
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	b2ca      	uxtb	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf0      	blt.n	8001682 <_read+0x12>
  }

  return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e009      	b.n	80016d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf1      	blt.n	80016bc <_write+0x12>
  }
  return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_close>:

int _close(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800170a:	605a      	str	r2, [r3, #4]
  return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_isatty>:

int _isatty(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f004 fe40 	bl	8006400 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20018000 	.word	0x20018000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	20000454 	.word	0x20000454
 80017b4:	200005c8 	.word	0x200005c8

080017b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001814 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e0:	f7ff ffea 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480c      	ldr	r0, [pc, #48]	@ (8001818 <LoopForever+0x6>)
  ldr r1, =_edata
 80017e6:	490d      	ldr	r1, [pc, #52]	@ (800181c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <LoopForever+0xe>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001828 <LoopForever+0x16>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180a:	f004 fdff 	bl	800640c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180e:	f7ff fc1d 	bl	800104c <main>

08001812 <LoopForever>:

LoopForever:
    b LoopForever
 8001812:	e7fe      	b.n	8001812 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001814:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001820:	08009ff8 	.word	0x08009ff8
  ldr r2, =_sbss
 8001824:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001828:	200005c4 	.word	0x200005c4

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>
	...

08001830 <BMP280_WriteRegister>:
uint16_t dig_P1;
int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
BMP280_S32_t t_fine;

// Function to write to a BMP280 register
HAL_StatusTypeDef BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af02      	add	r7, sp, #8
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {reg, value};
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	733b      	strb	r3, [r7, #12]
 8001844:	79bb      	ldrb	r3, [r7, #6]
 8001846:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001848:	f107 020c 	add.w	r2, r7, #12
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2302      	movs	r3, #2
 8001854:	21ec      	movs	r1, #236	@ 0xec
 8001856:	4804      	ldr	r0, [pc, #16]	@ (8001868 <BMP280_WriteRegister+0x38>)
 8001858:	f000 ffa4 	bl	80027a4 <HAL_I2C_Master_Transmit>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200001f0 	.word	0x200001f0

0800186c <BMP280_ReadRegister>:

// Function to read from a BMP280 register
HAL_StatusTypeDef BMP280_ReadRegister(uint8_t reg, uint8_t *data, uint16_t len) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af02      	add	r7, sp, #8
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	4613      	mov	r3, r2
 800187a:	80bb      	strh	r3, [r7, #4]
    // Send the register address to read from
    HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 800187c:	1dfa      	adds	r2, r7, #7
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	21ec      	movs	r1, #236	@ 0xec
 8001888:	4808      	ldr	r0, [pc, #32]	@ (80018ac <BMP280_ReadRegister+0x40>)
 800188a:	f000 ff8b 	bl	80027a4 <HAL_I2C_Master_Transmit>
    // Read the register data
    return HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDRESS, data, len, HAL_MAX_DELAY);
 800188e:	88bb      	ldrh	r3, [r7, #4]
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	9200      	str	r2, [sp, #0]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	21ec      	movs	r1, #236	@ 0xec
 800189a:	4804      	ldr	r0, [pc, #16]	@ (80018ac <BMP280_ReadRegister+0x40>)
 800189c:	f001 f89a 	bl	80029d4 <HAL_I2C_Master_Receive>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200001f0 	.word	0x200001f0

080018b0 <BMP280_Init>:

// Function to initialize the BMP280 sensor
void BMP280_Init(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    // Example: Set to normal mode with oversampling settings
    BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, 0x27);  // Temp x1, Press x1, Normal mode
 80018b4:	2127      	movs	r1, #39	@ 0x27
 80018b6:	20f4      	movs	r0, #244	@ 0xf4
 80018b8:	f7ff ffba 	bl	8001830 <BMP280_WriteRegister>
    BMP280_WriteRegister(BMP280_REG_CONFIG, 0xA0);  // Config settings (standby, filter)
 80018bc:	21a0      	movs	r1, #160	@ 0xa0
 80018be:	20f5      	movs	r0, #245	@ 0xf5
 80018c0:	f7ff ffb6 	bl	8001830 <BMP280_WriteRegister>
    serialPrint("BMP280 Initialization");
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <BMP280_Init+0x20>)
 80018c6:	f7ff fb8d 	bl	8000fe4 <serialPrint>
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	08009b58 	.word	0x08009b58

080018d4 <BMP280_GetRawTemperature>:

int32_t BMP280_GetRawTemperature(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
    uint8_t temp_data[3];  // Array to store the three temperature registers

    // Read the three temperature registers (MSB, LSB, XLSB)
    BMP280_ReadRegister(BMP280_REG_TEMP_MSB, temp_data, 3);
 80018da:	463b      	mov	r3, r7
 80018dc:	2203      	movs	r2, #3
 80018de:	4619      	mov	r1, r3
 80018e0:	20fa      	movs	r0, #250	@ 0xfa
 80018e2:	f7ff ffc3 	bl	800186c <BMP280_ReadRegister>

    // Combine the three parts into a 20-bit value
    int32_t raw_temp = (int32_t)((((uint32_t)temp_data[0]) << 12) |
 80018e6:	783b      	ldrb	r3, [r7, #0]
 80018e8:	031a      	lsls	r2, r3, #12
                                 (((uint32_t)temp_data[1]) << 4)  |
 80018ea:	787b      	ldrb	r3, [r7, #1]
 80018ec:	011b      	lsls	r3, r3, #4
    int32_t raw_temp = (int32_t)((((uint32_t)temp_data[0]) << 12) |
 80018ee:	4313      	orrs	r3, r2
                                 (((uint32_t)temp_data[2]) >> 4));
 80018f0:	78ba      	ldrb	r2, [r7, #2]
 80018f2:	0912      	lsrs	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
                                 (((uint32_t)temp_data[1]) << 4)  |
 80018f6:	4313      	orrs	r3, r2
    int32_t raw_temp = (int32_t)((((uint32_t)temp_data[0]) << 12) |
 80018f8:	607b      	str	r3, [r7, #4]

    return raw_temp;  // Return the raw 20-bit temperature value
 80018fa:	687b      	ldr	r3, [r7, #4]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <BMP280_GetRawPressure>:

int32_t BMP280_GetRawPressure(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
    uint8_t press_data[3];  // Array to store the three pressure registers

    // Read the three pressure registers (MSB, LSB, XLSB)
    BMP280_ReadRegister(BMP280_REG_PRESS_MSB, press_data, 3);
 800190a:	463b      	mov	r3, r7
 800190c:	2203      	movs	r2, #3
 800190e:	4619      	mov	r1, r3
 8001910:	20f7      	movs	r0, #247	@ 0xf7
 8001912:	f7ff ffab 	bl	800186c <BMP280_ReadRegister>

    // Combine the three parts into a 20-bit value
    int32_t raw_press = (int32_t)((((uint32_t)press_data[0]) << 12) |
 8001916:	783b      	ldrb	r3, [r7, #0]
 8001918:	031a      	lsls	r2, r3, #12
                                  (((uint32_t)press_data[1]) << 4)  |
 800191a:	787b      	ldrb	r3, [r7, #1]
 800191c:	011b      	lsls	r3, r3, #4
    int32_t raw_press = (int32_t)((((uint32_t)press_data[0]) << 12) |
 800191e:	4313      	orrs	r3, r2
                                  (((uint32_t)press_data[2]) >> 4));
 8001920:	78ba      	ldrb	r2, [r7, #2]
 8001922:	0912      	lsrs	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
                                  (((uint32_t)press_data[1]) << 4)  |
 8001926:	4313      	orrs	r3, r2
    int32_t raw_press = (int32_t)((((uint32_t)press_data[0]) << 12) |
 8001928:	607b      	str	r3, [r7, #4]

    return raw_press;  // Return the raw 20-bit pressure value
 800192a:	687b      	ldr	r3, [r7, #4]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
    uint8_t calib_data[24];

    // Read 24 bytes of calibration data from the BMP280
    BMP280_ReadRegister(BMP280_CALIB00_REG, calib_data, 24);
 800193a:	463b      	mov	r3, r7
 800193c:	2218      	movs	r2, #24
 800193e:	4619      	mov	r1, r3
 8001940:	2088      	movs	r0, #136	@ 0x88
 8001942:	f7ff ff93 	bl	800186c <BMP280_ReadRegister>

    // Parse the calibration data into the appropriate variables
    dig_T1 = (calib_data[1] << 8) | calib_data[0];
 8001946:	787b      	ldrb	r3, [r7, #1]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21a      	sxth	r2, r3
 800194c:	783b      	ldrb	r3, [r7, #0]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <BMP280_ReadCalibrationData+0xf8>)
 8001958:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calib_data[3] << 8) | calib_data[2];
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21a      	sxth	r2, r3
 8001960:	78bb      	ldrb	r3, [r7, #2]
 8001962:	b21b      	sxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b21a      	sxth	r2, r3
 8001968:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <BMP280_ReadCalibrationData+0xfc>)
 800196a:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calib_data[5] << 8) | calib_data[4];
 800196c:	797b      	ldrb	r3, [r7, #5]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	793b      	ldrb	r3, [r7, #4]
 8001974:	b21b      	sxth	r3, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	b21a      	sxth	r2, r3
 800197a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <BMP280_ReadCalibrationData+0x100>)
 800197c:	801a      	strh	r2, [r3, #0]
    dig_P1 = (calib_data[7] << 8) | calib_data[6];
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b21a      	sxth	r2, r3
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	b21b      	sxth	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b21b      	sxth	r3, r3
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a38 <BMP280_ReadCalibrationData+0x104>)
 8001990:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calib_data[9] << 8) | calib_data[8];
 8001992:	7a7b      	ldrb	r3, [r7, #9]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	7a3b      	ldrb	r3, [r7, #8]
 800199a:	b21b      	sxth	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b21a      	sxth	r2, r3
 80019a0:	4b26      	ldr	r3, [pc, #152]	@ (8001a3c <BMP280_ReadCalibrationData+0x108>)
 80019a2:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calib_data[11] << 8) | calib_data[10];
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	7abb      	ldrb	r3, [r7, #10]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <BMP280_ReadCalibrationData+0x10c>)
 80019b4:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calib_data[13] << 8) | calib_data[12];
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	7b3b      	ldrb	r3, [r7, #12]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <BMP280_ReadCalibrationData+0x110>)
 80019c6:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calib_data[15] << 8) | calib_data[14];
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	b21a      	sxth	r2, r3
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <BMP280_ReadCalibrationData+0x114>)
 80019d8:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calib_data[17] << 8) | calib_data[16];
 80019da:	7c7b      	ldrb	r3, [r7, #17]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b21a      	sxth	r2, r3
 80019e0:	7c3b      	ldrb	r3, [r7, #16]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <BMP280_ReadCalibrationData+0x118>)
 80019ea:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calib_data[19] << 8) | calib_data[18];
 80019ec:	7cfb      	ldrb	r3, [r7, #19]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	7cbb      	ldrb	r3, [r7, #18]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <BMP280_ReadCalibrationData+0x11c>)
 80019fc:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calib_data[21] << 8) | calib_data[20];
 80019fe:	7d7b      	ldrb	r3, [r7, #21]
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	7d3b      	ldrb	r3, [r7, #20]
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <BMP280_ReadCalibrationData+0x120>)
 8001a0e:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calib_data[23] << 8) | calib_data[22];
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	7dbb      	ldrb	r3, [r7, #22]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <BMP280_ReadCalibrationData+0x124>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000458 	.word	0x20000458
 8001a30:	2000045a 	.word	0x2000045a
 8001a34:	2000045c 	.word	0x2000045c
 8001a38:	2000045e 	.word	0x2000045e
 8001a3c:	20000460 	.word	0x20000460
 8001a40:	20000462 	.word	0x20000462
 8001a44:	20000464 	.word	0x20000464
 8001a48:	20000466 	.word	0x20000466
 8001a4c:	20000468 	.word	0x20000468
 8001a50:	2000046a 	.word	0x2000046a
 8001a54:	2000046c 	.word	0x2000046c
 8001a58:	2000046e 	.word	0x2000046e
 8001a5c:	00000000 	.word	0x00000000

08001a60 <bmp280_compensate_T_int32>:

// Compensation function for temperature

// Compensation function for temperature
double bmp280_compensate_T_int32(BMP280_S32_t adc_T) {
 8001a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a64:	b088      	sub	sp, #32
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
    double var1, var2, T;

    var1 = (((double)adc_T)/16382.0 - ((double)dig_T1)/1024.0) * ((double)dig_T2);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fd5a 	bl	8000524 <__aeabi_i2d>
 8001a70:	a360      	add	r3, pc, #384	@ (adr r3, 8001bf4 <bmp280_compensate_T_int32+0x194>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fee9 	bl	800084c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4614      	mov	r4, r2
 8001a80:	461d      	mov	r5, r3
 8001a82:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <bmp280_compensate_T_int32+0x178>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd3c 	bl	8000504 <__aeabi_ui2d>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <bmp280_compensate_T_int32+0x17c>)
 8001a92:	f7fe fedb 	bl	800084c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fbf3 	bl	8000288 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8001be0 <bmp280_compensate_T_int32+0x180>)
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd37 	bl	8000524 <__aeabi_i2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4620      	mov	r0, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	f7fe fd9b 	bl	80005f8 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) * (((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)) * ((double)dig_T3);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fd2a 	bl	8000524 <__aeabi_i2d>
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001ad8:	f7fe feb8 	bl	800084c <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4614      	mov	r4, r2
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd8 <bmp280_compensate_T_int32+0x178>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd0b 	bl	8000504 <__aeabi_ui2d>
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <bmp280_compensate_T_int32+0x184>)
 8001af4:	f7fe feaa 	bl	800084c <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4620      	mov	r0, r4
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7fe fbc2 	bl	8000288 <__aeabi_dsub>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4614      	mov	r4, r2
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7fe fd09 	bl	8000524 <__aeabi_i2d>
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001b1a:	f7fe fe97 	bl	800084c <__aeabi_ddiv>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4690      	mov	r8, r2
 8001b24:	4699      	mov	r9, r3
 8001b26:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd8 <bmp280_compensate_T_int32+0x178>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fcea 	bl	8000504 <__aeabi_ui2d>
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <bmp280_compensate_T_int32+0x184>)
 8001b36:	f7fe fe89 	bl	800084c <__aeabi_ddiv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4640      	mov	r0, r8
 8001b40:	4649      	mov	r1, r9
 8001b42:	f7fe fba1 	bl	8000288 <__aeabi_dsub>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f7fe fd53 	bl	80005f8 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	461d      	mov	r5, r3
 8001b5a:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <bmp280_compensate_T_int32+0x188>)
 8001b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcdf 	bl	8000524 <__aeabi_i2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f7fe fd43 	bl	80005f8 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    t_fine = (BMP280_S32_t)(var1 + var2);
 8001b7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b82:	f7fe fb83 	bl	800028c <__adddf3>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe ffe3 	bl	8000b58 <__aeabi_d2iz>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a15      	ldr	r2, [pc, #84]	@ (8001bec <bmp280_compensate_T_int32+0x18c>)
 8001b96:	6013      	str	r3, [r2, #0]
    T = (var1 + var2) / 5120.0;
 8001b98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ba0:	f7fe fb74 	bl	800028c <__adddf3>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <bmp280_compensate_T_int32+0x190>)
 8001bb2:	f7fe fe4b 	bl	800084c <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return T;
 8001bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bca:	eef0 0a67 	vmov.f32	s1, s15
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000458 	.word	0x20000458
 8001bdc:	40900000 	.word	0x40900000
 8001be0:	2000045a 	.word	0x2000045a
 8001be4:	40c00000 	.word	0x40c00000
 8001be8:	2000045c 	.word	0x2000045c
 8001bec:	20000470 	.word	0x20000470
 8001bf0:	40b40000 	.word	0x40b40000
 8001bf4:	00000000 	.word	0x00000000
 8001bf8:	40cfff00 	.word	0x40cfff00
 8001bfc:	00000000 	.word	0x00000000

08001c00 <bmp280_compensate_P_int32>:

// Compensation function for pressure
double bmp280_compensate_P_int32(BMP280_S32_t adc_P) {
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
   double var1, var2, p;

   var1 = ((double)t_fine/2.0) - 64000.0;
 8001c08:	4bc1      	ldr	r3, [pc, #772]	@ (8001f10 <bmp280_compensate_P_int32+0x310>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc89 	bl	8000524 <__aeabi_i2d>
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c1a:	f7fe fe17 	bl	800084c <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4bba      	ldr	r3, [pc, #744]	@ (8001f14 <bmp280_compensate_P_int32+0x314>)
 8001c2c:	f7fe fb2c 	bl	8000288 <__aeabi_dsub>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2306 	strd	r2, r3, [r7, #24]
   var2 = var1 * var1 * ((double)dig_P6) / 32768.0;
 8001c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c40:	f7fe fcda 	bl	80005f8 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	4bb2      	ldr	r3, [pc, #712]	@ (8001f18 <bmp280_compensate_P_int32+0x318>)
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc66 	bl	8000524 <__aeabi_i2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7fe fcca 	bl	80005f8 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4baa      	ldr	r3, [pc, #680]	@ (8001f1c <bmp280_compensate_P_int32+0x31c>)
 8001c72:	f7fe fdeb 	bl	800084c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
   var2 = var2 + var1 * ((double)dig_P5) * 2.0;
 8001c7e:	4ba8      	ldr	r3, [pc, #672]	@ (8001f20 <bmp280_compensate_P_int32+0x320>)
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc4d 	bl	8000524 <__aeabi_i2d>
 8001c8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8e:	f7fe fcb3 	bl	80005f8 <__aeabi_dmul>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	f7fe faf5 	bl	800028c <__adddf3>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001caa:	f7fe faef 	bl	800028c <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
   var2 = (var2/4.0)+(((double)dig_P4) * 65536.0);
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b9a      	ldr	r3, [pc, #616]	@ (8001f24 <bmp280_compensate_P_int32+0x324>)
 8001cbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc0:	f7fe fdc4 	bl	800084c <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	4b96      	ldr	r3, [pc, #600]	@ (8001f28 <bmp280_compensate_P_int32+0x328>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc26 	bl	8000524 <__aeabi_i2d>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b93      	ldr	r3, [pc, #588]	@ (8001f2c <bmp280_compensate_P_int32+0x32c>)
 8001cde:	f7fe fc8b 	bl	80005f8 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe facf 	bl	800028c <__adddf3>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
   var1 = (((double)dig_P3) * var1 * var1 / 524288.0 + ((double)dig_P2) * var1) / 524288.0;
 8001cf6:	4b8e      	ldr	r3, [pc, #568]	@ (8001f30 <bmp280_compensate_P_int32+0x330>)
 8001cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc11 	bl	8000524 <__aeabi_i2d>
 8001d02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d06:	f7fe fc77 	bl	80005f8 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d16:	f7fe fc6f 	bl	80005f8 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	4b83      	ldr	r3, [pc, #524]	@ (8001f34 <bmp280_compensate_P_int32+0x334>)
 8001d28:	f7fe fd90 	bl	800084c <__aeabi_ddiv>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	4b80      	ldr	r3, [pc, #512]	@ (8001f38 <bmp280_compensate_P_int32+0x338>)
 8001d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fbf2 	bl	8000524 <__aeabi_i2d>
 8001d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d44:	f7fe fc58 	bl	80005f8 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fa9c 	bl	800028c <__adddf3>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b74      	ldr	r3, [pc, #464]	@ (8001f34 <bmp280_compensate_P_int32+0x334>)
 8001d62:	f7fe fd73 	bl	800084c <__aeabi_ddiv>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
   var1 = (1.0 + var1 / 32768.0) * ((double)dig_P1);
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b6a      	ldr	r3, [pc, #424]	@ (8001f1c <bmp280_compensate_P_int32+0x31c>)
 8001d74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d78:	f7fe fd68 	bl	800084c <__aeabi_ddiv>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b6c      	ldr	r3, [pc, #432]	@ (8001f3c <bmp280_compensate_P_int32+0x33c>)
 8001d8a:	f7fe fa7f 	bl	800028c <__adddf3>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4614      	mov	r4, r2
 8001d94:	461d      	mov	r5, r3
 8001d96:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <bmp280_compensate_P_int32+0x340>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbb2 	bl	8000504 <__aeabi_ui2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   if (var1 == 0.0){
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc0:	f7fe fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d004      	beq.n	8001dd4 <bmp280_compensate_P_int32+0x1d4>
	   return 0;
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e090      	b.n	8001ef6 <bmp280_compensate_P_int32+0x2f6>
   }

   p = 1048576.0 - (double)adc_P;
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fba5 	bl	8000524 <__aeabi_i2d>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	4958      	ldr	r1, [pc, #352]	@ (8001f44 <bmp280_compensate_P_int32+0x344>)
 8001de4:	f7fe fa50 	bl	8000288 <__aeabi_dsub>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	e9c7 2302 	strd	r2, r3, [r7, #8]
   p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b54      	ldr	r3, [pc, #336]	@ (8001f48 <bmp280_compensate_P_int32+0x348>)
 8001df6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dfa:	f7fe fd27 	bl	800084c <__aeabi_ddiv>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e06:	f7fe fa3f 	bl	8000288 <__aeabi_dsub>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	a33d      	add	r3, pc, #244	@ (adr r3, 8001f08 <bmp280_compensate_P_int32+0x308>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fbee 	bl	80005f8 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e28:	f7fe fd10 	bl	800084c <__aeabi_ddiv>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	e9c7 2302 	strd	r2, r3, [r7, #8]
   var1 = ((double)dig_P9) * p * p / 2147483648.0;
 8001e34:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <bmp280_compensate_P_int32+0x34c>)
 8001e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb72 	bl	8000524 <__aeabi_i2d>
 8001e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e44:	f7fe fbd8 	bl	80005f8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e54:	f7fe fbd0 	bl	80005f8 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <bmp280_compensate_P_int32+0x350>)
 8001e66:	f7fe fcf1 	bl	800084c <__aeabi_ddiv>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
   var2 = p * ((double)dig_P8) / 32768.0;
 8001e72:	4b38      	ldr	r3, [pc, #224]	@ (8001f54 <bmp280_compensate_P_int32+0x354>)
 8001e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb53 	bl	8000524 <__aeabi_i2d>
 8001e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e82:	f7fe fbb9 	bl	80005f8 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <bmp280_compensate_P_int32+0x31c>)
 8001e94:	f7fe fcda 	bl	800084c <__aeabi_ddiv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
   p = p + (var1 + var2 + ((double)dig_P7)) / 16.0;
 8001ea0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ea4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ea8:	f7fe f9f0 	bl	800028c <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <bmp280_compensate_P_int32+0x358>)
 8001eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb32 	bl	8000524 <__aeabi_i2d>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe f9e0 	bl	800028c <__adddf3>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <bmp280_compensate_P_int32+0x35c>)
 8001eda:	f7fe fcb7 	bl	800084c <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ee6:	f7fe f9d1 	bl	800028c <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c7 2302 	strd	r2, r3, [r7, #8]
   return p * 1.0f;
 8001ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]

}
 8001ef6:	ec43 2b17 	vmov	d7, r2, r3
 8001efa:	eeb0 0a47 	vmov.f32	s0, s14
 8001efe:	eef0 0a67 	vmov.f32	s1, s15
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdb0      	pop	{r4, r5, r7, pc}
 8001f08:	00000000 	.word	0x00000000
 8001f0c:	40b86a00 	.word	0x40b86a00
 8001f10:	20000470 	.word	0x20000470
 8001f14:	40ef4000 	.word	0x40ef4000
 8001f18:	20000468 	.word	0x20000468
 8001f1c:	40e00000 	.word	0x40e00000
 8001f20:	20000466 	.word	0x20000466
 8001f24:	40100000 	.word	0x40100000
 8001f28:	20000464 	.word	0x20000464
 8001f2c:	40f00000 	.word	0x40f00000
 8001f30:	20000462 	.word	0x20000462
 8001f34:	41200000 	.word	0x41200000
 8001f38:	20000460 	.word	0x20000460
 8001f3c:	3ff00000 	.word	0x3ff00000
 8001f40:	2000045e 	.word	0x2000045e
 8001f44:	41300000 	.word	0x41300000
 8001f48:	40b00000 	.word	0x40b00000
 8001f4c:	2000046e 	.word	0x2000046e
 8001f50:	41e00000 	.word	0x41e00000
 8001f54:	2000046c 	.word	0x2000046c
 8001f58:	2000046a 	.word	0x2000046a
 8001f5c:	40300000 	.word	0x40300000

08001f60 <BMP280_GetPressure_hPa>:

// Function to read and calculate pressure in hPa
float BMP280_GetPressure_hPa(void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
    int32_t raw_pressure;
    BMP280_ReadCalibrationData();
 8001f66:	f7ff fce5 	bl	8001934 <BMP280_ReadCalibrationData>
    // Read raw temperature and pressure data from BMP280
    raw_pressure = BMP280_GetRawPressure();  // Implement this function to read raw pressure
 8001f6a:	f7ff fccb 	bl	8001904 <BMP280_GetRawPressure>
 8001f6e:	6078      	str	r0, [r7, #4]
    // Compensate the pressure and convert to hPa
    float pressure_pa = bmp280_compensate_P_int32(raw_pressure);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fe45 	bl	8001c00 <bmp280_compensate_P_int32>
 8001f76:	ec53 2b10 	vmov	r2, r3, d0
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fe33 	bl	8000be8 <__aeabi_d2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	603b      	str	r3, [r7, #0]
    return pressure_pa / 100.0f;  // Convert Pa to hPa
 8001f86:	edd7 7a00 	vldr	s15, [r7]
 8001f8a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001fa0 <BMP280_GetPressure_hPa+0x40>
 8001f8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f92:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f96:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	42c80000 	.word	0x42c80000

08001fa4 <BMP280_GetTemperature>:

float BMP280_GetTemperature(void){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
	int32_t raw_temp;
	BMP280_ReadCalibrationData();
 8001faa:	f7ff fcc3 	bl	8001934 <BMP280_ReadCalibrationData>
	raw_temp = BMP280_GetRawTemperature();  // Implement this function to read raw temp
 8001fae:	f7ff fc91 	bl	80018d4 <BMP280_GetRawTemperature>
 8001fb2:	6078      	str	r0, [r7, #4]
	 // Compensate the temperature to get fine temperature value
	float temperature_c =  bmp280_compensate_T_int32(raw_temp);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fd53 	bl	8001a60 <bmp280_compensate_T_int32>
 8001fba:	ec53 2b10 	vmov	r2, r3, d0
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fe11 	bl	8000be8 <__aeabi_d2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	603b      	str	r3, [r7, #0]
	return temperature_c * 1.0f;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	ee07 3a90 	vmov	s15, r3
}
 8001fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <HAL_Init+0x3c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0b      	ldr	r2, [pc, #44]	@ (8002018 <HAL_Init+0x3c>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f000 f944 	bl	8002280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f000 f80f 	bl	800201c <HAL_InitTick>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	e001      	b.n	800200e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800200a:	f7ff f9bb 	bl	8001384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200e:	79fb      	ldrb	r3, [r7, #7]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002028:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <HAL_InitTick+0x6c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d023      	beq.n	8002078 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <HAL_InitTick+0x70>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <HAL_InitTick+0x6c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f941 	bl	80022ce <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10f      	bne.n	8002072 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d809      	bhi.n	800206c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f000 f919 	bl	8002296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002064:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_InitTick+0x74>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e007      	b.n	800207c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e004      	b.n	800207c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e001      	b.n	800207c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008
 800208c:	20000000 	.word	0x20000000
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000474 	.word	0x20000474

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000474 	.word	0x20000474

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff ffee 	bl	80020bc <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_Delay+0x44>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fa:	bf00      	nop
 80020fc:	f7ff ffde 	bl	80020bc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000008 	.word	0x20000008

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	@ (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	@ (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
         );
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	@ 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800224c:	d301      	bcc.n	8002252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224e:	2301      	movs	r3, #1
 8002250:	e00f      	b.n	8002272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <SysTick_Config+0x40>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225a:	210f      	movs	r1, #15
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f7ff ff8e 	bl	8002180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <SysTick_Config+0x40>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226a:	4b04      	ldr	r3, [pc, #16]	@ (800227c <SysTick_Config+0x40>)
 800226c:	2207      	movs	r2, #7
 800226e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	e000e010 	.word	0xe000e010

08002280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff47 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022a8:	f7ff ff5c 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f7ff ff8e 	bl	80021d4 <NVIC_EncodePriority>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff5d 	bl	8002180 <__NVIC_SetPriority>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffb0 	bl	800223c <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e17f      	b.n	80025f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8171 	beq.w	80025f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d005      	beq.n	8002328 <HAL_GPIO_Init+0x40>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d130      	bne.n	800238a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235e:	2201      	movs	r2, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0201 	and.w	r2, r3, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d118      	bne.n	80023c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	6939      	ldr	r1, [r7, #16]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80ac 	beq.w	80025f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	4b5f      	ldr	r3, [pc, #380]	@ (8002618 <HAL_GPIO_Init+0x330>)
 800249c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249e:	4a5e      	ldr	r2, [pc, #376]	@ (8002618 <HAL_GPIO_Init+0x330>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80024a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002618 <HAL_GPIO_Init+0x330>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024b2:	4a5a      	ldr	r2, [pc, #360]	@ (800261c <HAL_GPIO_Init+0x334>)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024dc:	d025      	beq.n	800252a <HAL_GPIO_Init+0x242>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002620 <HAL_GPIO_Init+0x338>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <HAL_GPIO_Init+0x23e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002624 <HAL_GPIO_Init+0x33c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x23a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002628 <HAL_GPIO_Init+0x340>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x236>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	@ (800262c <HAL_GPIO_Init+0x344>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x232>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4b      	ldr	r2, [pc, #300]	@ (8002630 <HAL_GPIO_Init+0x348>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x22e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4a      	ldr	r2, [pc, #296]	@ (8002634 <HAL_GPIO_Init+0x34c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x22a>
 800250e:	2306      	movs	r3, #6
 8002510:	e00c      	b.n	800252c <HAL_GPIO_Init+0x244>
 8002512:	2307      	movs	r3, #7
 8002514:	e00a      	b.n	800252c <HAL_GPIO_Init+0x244>
 8002516:	2305      	movs	r3, #5
 8002518:	e008      	b.n	800252c <HAL_GPIO_Init+0x244>
 800251a:	2304      	movs	r3, #4
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x244>
 800251e:	2303      	movs	r3, #3
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x244>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x244>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x244>
 800252a:	2300      	movs	r3, #0
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	f002 0203 	and.w	r2, r2, #3
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	4093      	lsls	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800253c:	4937      	ldr	r1, [pc, #220]	@ (800261c <HAL_GPIO_Init+0x334>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <HAL_GPIO_Init+0x350>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256e:	4a32      	ldr	r2, [pc, #200]	@ (8002638 <HAL_GPIO_Init+0x350>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002574:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <HAL_GPIO_Init+0x350>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002598:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <HAL_GPIO_Init+0x350>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <HAL_GPIO_Init+0x350>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002638 <HAL_GPIO_Init+0x350>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_GPIO_Init+0x350>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ec:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <HAL_GPIO_Init+0x350>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3301      	adds	r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	f47f ae78 	bne.w	80022f8 <HAL_GPIO_Init+0x10>
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40010000 	.word	0x40010000
 8002620:	48000400 	.word	0x48000400
 8002624:	48000800 	.word	0x48000800
 8002628:	48000c00 	.word	0x48000c00
 800262c:	48001000 	.word	0x48001000
 8002630:	48001400 	.word	0x48001400
 8002634:	48001800 	.word	0x48001800
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002658:	e002      	b.n	8002660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e08d      	b.n	800279a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fe9a 	bl	80013cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	@ 0x24
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	e006      	b.n	80026f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d108      	bne.n	800270e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	e007      	b.n	800271e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800271c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800272c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69d9      	ldr	r1, [r3, #28]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	461a      	mov	r2, r3
 80027b0:	460b      	mov	r3, r1
 80027b2:	817b      	strh	r3, [r7, #10]
 80027b4:	4613      	mov	r3, r2
 80027b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	f040 80fd 	bne.w	80029c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2C_Master_Transmit+0x30>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0f6      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x21e>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027dc:	f7ff fc6e 	bl	80020bc <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2319      	movs	r3, #25
 80027e8:	2201      	movs	r2, #1
 80027ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fa0a 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0e1      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2221      	movs	r2, #33	@ 0x21
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2210      	movs	r2, #16
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	893a      	ldrh	r2, [r7, #8]
 800281e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2bff      	cmp	r3, #255	@ 0xff
 800282e:	d906      	bls.n	800283e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	22ff      	movs	r2, #255	@ 0xff
 8002834:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002836:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	e007      	b.n	800284e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	d024      	beq.n	80028a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	8979      	ldrh	r1, [r7, #10]
 8002892:	4b4e      	ldr	r3, [pc, #312]	@ (80029cc <HAL_I2C_Master_Transmit+0x228>)
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fc05 	bl	80030a8 <I2C_TransferConfig>
 800289e:	e066      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	8979      	ldrh	r1, [r7, #10]
 80028a8:	4b48      	ldr	r3, [pc, #288]	@ (80029cc <HAL_I2C_Master_Transmit+0x228>)
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fbfa 	bl	80030a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028b4:	e05b      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f9fd 	bl	8002cba <I2C_WaitOnTXISFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07b      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d034      	beq.n	800296e <HAL_I2C_Master_Transmit+0x1ca>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d130      	bne.n	800296e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2200      	movs	r2, #0
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f976 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e04d      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	2bff      	cmp	r3, #255	@ 0xff
 800292e:	d90e      	bls.n	800294e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	22ff      	movs	r2, #255	@ 0xff
 8002934:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	b2da      	uxtb	r2, r3
 800293c:	8979      	ldrh	r1, [r7, #10]
 800293e:	2300      	movs	r3, #0
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fbae 	bl	80030a8 <I2C_TransferConfig>
 800294c:	e00f      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295c:	b2da      	uxtb	r2, r3
 800295e:	8979      	ldrh	r1, [r7, #10]
 8002960:	2300      	movs	r3, #0
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fb9d 	bl	80030a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d19e      	bne.n	80028b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	6a39      	ldr	r1, [r7, #32]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f9e3 	bl	8002d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e01a      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2220      	movs	r2, #32
 8002992:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_I2C_Master_Transmit+0x22c>)
 80029a0:	400b      	ands	r3, r1
 80029a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	80002000 	.word	0x80002000
 80029d0:	fe00e800 	.word	0xfe00e800

080029d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
 80029e4:	4613      	mov	r3, r2
 80029e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 80db 	bne.w	8002bac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_I2C_Master_Receive+0x30>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e0d4      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a0c:	f7ff fb56 	bl	80020bc <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2319      	movs	r3, #25
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8f2 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0bf      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2222      	movs	r2, #34	@ 0x22
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2bff      	cmp	r3, #255	@ 0xff
 8002a5e:	d90e      	bls.n	8002a7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	4b52      	ldr	r3, [pc, #328]	@ (8002bb8 <HAL_I2C_Master_Receive+0x1e4>)
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fb16 	bl	80030a8 <I2C_TransferConfig>
 8002a7c:	e06d      	b.n	8002b5a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	8979      	ldrh	r1, [r7, #10]
 8002a90:	4b49      	ldr	r3, [pc, #292]	@ (8002bb8 <HAL_I2C_Master_Receive+0x1e4>)
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fb05 	bl	80030a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a9e:	e05c      	b.n	8002b5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	6a39      	ldr	r1, [r7, #32]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f993 	bl	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e07c      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d034      	beq.n	8002b5a <HAL_I2C_Master_Receive+0x186>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d130      	bne.n	8002b5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2200      	movs	r2, #0
 8002b00:	2180      	movs	r1, #128	@ 0x80
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f880 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e04d      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2bff      	cmp	r3, #255	@ 0xff
 8002b1a:	d90e      	bls.n	8002b3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	22ff      	movs	r2, #255	@ 0xff
 8002b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	8979      	ldrh	r1, [r7, #10]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fab8 	bl	80030a8 <I2C_TransferConfig>
 8002b38:	e00f      	b.n	8002b5a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	8979      	ldrh	r1, [r7, #10]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 faa7 	bl	80030a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d19d      	bne.n	8002aa0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	6a39      	ldr	r1, [r7, #32]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f8ed 	bl	8002d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e01a      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <HAL_I2C_Master_Receive+0x1e8>)
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	80002400 	.word	0x80002400
 8002bbc:	fe00e800 	.word	0xfe00e800

08002bc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d103      	bne.n	8002bde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d007      	beq.n	8002bfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	619a      	str	r2, [r3, #24]
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c18:	e03b      	b.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f962 	bl	8002ee8 <I2C_IsErrorOccurred>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e041      	b.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d02d      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c36:	f7ff fa41 	bl	80020bc <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d122      	bne.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d113      	bne.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f043 0220 	orr.w	r2, r3, #32
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00f      	b.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d0b4      	beq.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cc6:	e033      	b.n	8002d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f90b 	bl	8002ee8 <I2C_IsErrorOccurred>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e031      	b.n	8002d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce2:	d025      	beq.n	8002d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce4:	f7ff f9ea 	bl	80020bc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d302      	bcc.n	8002cfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11a      	bne.n	8002d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d013      	beq.n	8002d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e007      	b.n	8002d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d1c4      	bne.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d54:	e02f      	b.n	8002db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f8c4 	bl	8002ee8 <I2C_IsErrorOccurred>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e02d      	b.n	8002dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6a:	f7ff f9a7 	bl	80020bc <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d11a      	bne.n	8002db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d013      	beq.n	8002db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e007      	b.n	8002dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d1c8      	bne.n	8002d56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002de0:	e071      	b.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f87e 	bl	8002ee8 <I2C_IsErrorOccurred>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d13b      	bne.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d138      	bne.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d105      	bne.n	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d121      	bne.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2210      	movs	r2, #16
 8002e38:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2220      	movs	r2, #32
 8002e46:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002e54:	400b      	ands	r3, r1
 8002e56:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	75fb      	strb	r3, [r7, #23]
 8002e74:	e002      	b.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002e7c:	f7ff f91e 	bl	80020bc <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d302      	bcc.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d119      	bne.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d116      	bne.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00f      	beq.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d002      	beq.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d083      	beq.n	8002de2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	fe00e800 	.word	0xfe00e800

08002ee8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	@ 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d068      	beq.n	8002fe6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2210      	movs	r2, #16
 8002f1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f1c:	e049      	b.n	8002fb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d045      	beq.n	8002fb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7ff f8c9 	bl	80020bc <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <I2C_IsErrorOccurred+0x54>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d13a      	bne.n	8002fb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f5e:	d121      	bne.n	8002fa4 <I2C_IsErrorOccurred+0xbc>
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f66:	d01d      	beq.n	8002fa4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d01a      	beq.n	8002fa4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f7e:	f7ff f89d 	bl	80020bc <HAL_GetTick>
 8002f82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f84:	e00e      	b.n	8002fa4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f86:	f7ff f899 	bl	80020bc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b19      	cmp	r3, #25
 8002f92:	d907      	bls.n	8002fa4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f043 0320 	orr.w	r3, r3, #32
 8002f9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002fa2:	e006      	b.n	8002fb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d1e9      	bne.n	8002f86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d003      	beq.n	8002fc8 <I2C_IsErrorOccurred+0xe0>
 8002fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0aa      	beq.n	8002f1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f043 0304 	orr.w	r3, r3, #4
 8002fde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003008:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800302a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800304c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01c      	beq.n	8003096 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f7ff fdaf 	bl	8002bc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b0d      	ldr	r3, [pc, #52]	@ (80030a4 <I2C_IsErrorOccurred+0x1bc>)
 800306e:	400b      	ands	r3, r1
 8003070:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003096:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800309a:	4618      	mov	r0, r3
 800309c:	3728      	adds	r7, #40	@ 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	fe00e800 	.word	0xfe00e800

080030a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	4613      	mov	r3, r2
 80030b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ba:	897b      	ldrh	r3, [r7, #10]
 80030bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030c0:	7a7b      	ldrb	r3, [r7, #9]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	0d5b      	lsrs	r3, r3, #21
 80030e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <I2C_TransferConfig+0x60>)
 80030e8:	430b      	orrs	r3, r1
 80030ea:	43db      	mvns	r3, r3
 80030ec:	ea02 0103 	and.w	r1, r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	03ff63ff 	.word	0x03ff63ff

0800310c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	d138      	bne.n	8003194 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800312c:	2302      	movs	r3, #2
 800312e:	e032      	b.n	8003196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	@ 0x24
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800315e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d139      	bne.n	800322c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e033      	b.n	800322e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2224      	movs	r2, #36	@ 0x24
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003240:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <HAL_PWREx_GetVoltageRange+0x18>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40007000 	.word	0x40007000

08003258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003266:	d130      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003268:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003274:	d038      	beq.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800327e:	4a1e      	ldr	r2, [pc, #120]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003280:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003284:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003286:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2232      	movs	r2, #50	@ 0x32
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0c9b      	lsrs	r3, r3, #18
 8003298:	3301      	adds	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329c:	e002      	b.n	80032a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a4:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b0:	d102      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f2      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b8:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c4:	d110      	bne.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e00f      	b.n	80032ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ca:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d6:	d007      	beq.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032d8:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032e0:	4a05      	ldr	r2, [pc, #20]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40007000 	.word	0x40007000
 80032fc:	20000000 	.word	0x20000000
 8003300:	431bde83 	.word	0x431bde83

08003304 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e3ca      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003316:	4b97      	ldr	r3, [pc, #604]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003320:	4b94      	ldr	r3, [pc, #592]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80e4 	beq.w	8003500 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_RCC_OscConfig+0x4a>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	f040 808b 	bne.w	800345c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 8087 	bne.w	800345c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800334e:	4b89      	ldr	r3, [pc, #548]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x62>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e3a2      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1a      	ldr	r2, [r3, #32]
 800336a:	4b82      	ldr	r3, [pc, #520]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <HAL_RCC_OscConfig+0x7c>
 8003376:	4b7f      	ldr	r3, [pc, #508]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800337e:	e005      	b.n	800338c <HAL_RCC_OscConfig+0x88>
 8003380:	4b7c      	ldr	r3, [pc, #496]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800338c:	4293      	cmp	r3, r2
 800338e:	d223      	bcs.n	80033d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fd55 	bl	8003e44 <RCC_SetFlashLatencyFromMSIRange>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e383      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a4:	4b73      	ldr	r3, [pc, #460]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a72      	ldr	r2, [pc, #456]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033aa:	f043 0308 	orr.w	r3, r3, #8
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b70      	ldr	r3, [pc, #448]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	496d      	ldr	r1, [pc, #436]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	4968      	ldr	r1, [pc, #416]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
 80033d6:	e025      	b.n	8003424 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d8:	4b66      	ldr	r3, [pc, #408]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a65      	ldr	r2, [pc, #404]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b63      	ldr	r3, [pc, #396]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4960      	ldr	r1, [pc, #384]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	495b      	ldr	r1, [pc, #364]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fd15 	bl	8003e44 <RCC_SetFlashLatencyFromMSIRange>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e343      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003424:	f000 fc4a 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b52      	ldr	r3, [pc, #328]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	4950      	ldr	r1, [pc, #320]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
 8003440:	4a4e      	ldr	r2, [pc, #312]	@ (800357c <HAL_RCC_OscConfig+0x278>)
 8003442:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003444:	4b4e      	ldr	r3, [pc, #312]	@ (8003580 <HAL_RCC_OscConfig+0x27c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe fde7 	bl	800201c <HAL_InitTick>
 800344e:	4603      	mov	r3, r0
 8003450:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d052      	beq.n	80034fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	e327      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d032      	beq.n	80034ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003464:	4b43      	ldr	r3, [pc, #268]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a42      	ldr	r2, [pc, #264]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003470:	f7fe fe24 	bl	80020bc <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003478:	f7fe fe20 	bl	80020bc <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e310      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348a:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003496:	4b37      	ldr	r3, [pc, #220]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a36      	ldr	r2, [pc, #216]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800349c:	f043 0308 	orr.w	r3, r3, #8
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b34      	ldr	r3, [pc, #208]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4931      	ldr	r1, [pc, #196]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	492c      	ldr	r1, [pc, #176]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
 80034c8:	e01a      	b.n	8003500 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a29      	ldr	r2, [pc, #164]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034d6:	f7fe fdf1 	bl	80020bc <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034de:	f7fe fded 	bl	80020bc <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e2dd      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034f0:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x1da>
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d074      	beq.n	80035f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b08      	cmp	r3, #8
 8003510:	d005      	beq.n	800351e <HAL_RCC_OscConfig+0x21a>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	d10e      	bne.n	8003536 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d10b      	bne.n	8003536 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d064      	beq.n	80035f4 <HAL_RCC_OscConfig+0x2f0>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d160      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e2ba      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x24a>
 8003540:	4b0c      	ldr	r3, [pc, #48]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0b      	ldr	r2, [pc, #44]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	e026      	b.n	800359c <HAL_RCC_OscConfig+0x298>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003556:	d115      	bne.n	8003584 <HAL_RCC_OscConfig+0x280>
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a05      	ldr	r2, [pc, #20]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800355e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a02      	ldr	r2, [pc, #8]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800356a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e014      	b.n	800359c <HAL_RCC_OscConfig+0x298>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	08009b70 	.word	0x08009b70
 800357c:	20000000 	.word	0x20000000
 8003580:	20000004 	.word	0x20000004
 8003584:	4ba0      	ldr	r3, [pc, #640]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a9f      	ldr	r2, [pc, #636]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b9d      	ldr	r3, [pc, #628]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a9c      	ldr	r2, [pc, #624]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fd8a 	bl	80020bc <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe fd86 	bl	80020bc <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e276      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035be:	4b92      	ldr	r3, [pc, #584]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x2a8>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fd76 	bl	80020bc <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe fd72 	bl	80020bc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e262      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e6:	4b88      	ldr	r3, [pc, #544]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x2d0>
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d060      	beq.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d005      	beq.n	8003614 <HAL_RCC_OscConfig+0x310>
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d119      	bne.n	8003642 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d116      	bne.n	8003642 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003614:	4b7c      	ldr	r3, [pc, #496]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_OscConfig+0x328>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e23f      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362c:	4b76      	ldr	r3, [pc, #472]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	4973      	ldr	r1, [pc, #460]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003640:	e040      	b.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d023      	beq.n	8003692 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364a:	4b6f      	ldr	r3, [pc, #444]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6e      	ldr	r2, [pc, #440]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fe fd31 	bl	80020bc <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365e:	f7fe fd2d 	bl	80020bc <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e21d      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003670:	4b65      	ldr	r3, [pc, #404]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b62      	ldr	r3, [pc, #392]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	495f      	ldr	r1, [pc, #380]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
 8003690:	e018      	b.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003692:	4b5d      	ldr	r3, [pc, #372]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a5c      	ldr	r2, [pc, #368]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800369c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fe fd0d 	bl	80020bc <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fe fd09 	bl	80020bc <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e1f9      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b8:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d03c      	beq.n	800374a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01c      	beq.n	8003712 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036de:	4a4a      	ldr	r2, [pc, #296]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fe fce8 	bl	80020bc <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fe fce4 	bl	80020bc <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1d4      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003702:	4b41      	ldr	r3, [pc, #260]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ef      	beq.n	80036f0 <HAL_RCC_OscConfig+0x3ec>
 8003710:	e01b      	b.n	800374a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003712:	4b3d      	ldr	r3, [pc, #244]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003718:	4a3b      	ldr	r2, [pc, #236]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fe fccb 	bl	80020bc <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372a:	f7fe fcc7 	bl	80020bc <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1b7      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800373c:	4b32      	ldr	r3, [pc, #200]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800373e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1ef      	bne.n	800372a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80a6 	beq.w	80038a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003758:	2300      	movs	r3, #0
 800375a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800375c:	4b2a      	ldr	r3, [pc, #168]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10d      	bne.n	8003784 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	4a26      	ldr	r2, [pc, #152]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003772:	6593      	str	r3, [r2, #88]	@ 0x58
 8003774:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003784:	4b21      	ldr	r3, [pc, #132]	@ (800380c <HAL_RCC_OscConfig+0x508>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d118      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003790:	4b1e      	ldr	r3, [pc, #120]	@ (800380c <HAL_RCC_OscConfig+0x508>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <HAL_RCC_OscConfig+0x508>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379c:	f7fe fc8e 	bl	80020bc <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a4:	f7fe fc8a 	bl	80020bc <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e17a      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <HAL_RCC_OscConfig+0x508>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d108      	bne.n	80037dc <HAL_RCC_OscConfig+0x4d8>
 80037ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037da:	e029      	b.n	8003830 <HAL_RCC_OscConfig+0x52c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d115      	bne.n	8003810 <HAL_RCC_OscConfig+0x50c>
 80037e4:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a07      	ldr	r2, [pc, #28]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	4a03      	ldr	r2, [pc, #12]	@ (8003808 <HAL_RCC_OscConfig+0x504>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003804:	e014      	b.n	8003830 <HAL_RCC_OscConfig+0x52c>
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	40007000 	.word	0x40007000
 8003810:	4b9c      	ldr	r3, [pc, #624]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003816:	4a9b      	ldr	r2, [pc, #620]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003820:	4b98      	ldr	r3, [pc, #608]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003826:	4a97      	ldr	r2, [pc, #604]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d016      	beq.n	8003866 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe fc40 	bl	80020bc <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe fc3c 	bl	80020bc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e12a      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003856:	4b8b      	ldr	r3, [pc, #556]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ed      	beq.n	8003840 <HAL_RCC_OscConfig+0x53c>
 8003864:	e015      	b.n	8003892 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fe fc29 	bl	80020bc <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe fc25 	bl	80020bc <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e113      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003884:	4b7f      	ldr	r3, [pc, #508]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ed      	bne.n	800386e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003892:	7ffb      	ldrb	r3, [r7, #31]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b7a      	ldr	r3, [pc, #488]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389c:	4a79      	ldr	r2, [pc, #484]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80fe 	beq.w	8003aaa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	f040 80d0 	bne.w	8003a58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038b8:	4b72      	ldr	r3, [pc, #456]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0203 	and.w	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d130      	bne.n	800392e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	3b01      	subs	r3, #1
 80038d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d127      	bne.n	800392e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d11f      	bne.n	800392e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038f8:	2a07      	cmp	r2, #7
 80038fa:	bf14      	ite	ne
 80038fc:	2201      	movne	r2, #1
 80038fe:	2200      	moveq	r2, #0
 8003900:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	3b01      	subs	r3, #1
 8003914:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d109      	bne.n	800392e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d06e      	beq.n	8003a0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d069      	beq.n	8003a08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003934:	4b53      	ldr	r3, [pc, #332]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003940:	4b50      	ldr	r3, [pc, #320]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0ad      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003950:	4b4c      	ldr	r3, [pc, #304]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4b      	ldr	r2, [pc, #300]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800395a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800395c:	f7fe fbae 	bl	80020bc <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003964:	f7fe fbaa 	bl	80020bc <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e09a      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003976:	4b43      	ldr	r3, [pc, #268]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003982:	4b40      	ldr	r3, [pc, #256]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	4b40      	ldr	r3, [pc, #256]	@ (8003a88 <HAL_RCC_OscConfig+0x784>)
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003992:	3a01      	subs	r2, #1
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800399c:	0212      	lsls	r2, r2, #8
 800399e:	4311      	orrs	r1, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039a4:	0852      	lsrs	r2, r2, #1
 80039a6:	3a01      	subs	r2, #1
 80039a8:	0552      	lsls	r2, r2, #21
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039b0:	0852      	lsrs	r2, r2, #1
 80039b2:	3a01      	subs	r2, #1
 80039b4:	0652      	lsls	r2, r2, #25
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039bc:	0912      	lsrs	r2, r2, #4
 80039be:	0452      	lsls	r2, r2, #17
 80039c0:	430a      	orrs	r2, r1
 80039c2:	4930      	ldr	r1, [pc, #192]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 80039ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 80039da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039e0:	f7fe fb6c 	bl	80020bc <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fe fb68 	bl	80020bc <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e058      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fa:	4b22      	ldr	r3, [pc, #136]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a06:	e050      	b.n	8003aaa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e04f      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d148      	bne.n	8003aaa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a18:	4b1a      	ldr	r3, [pc, #104]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a24:	4b17      	ldr	r3, [pc, #92]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a16      	ldr	r2, [pc, #88]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a30:	f7fe fb44 	bl	80020bc <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fe fb40 	bl	80020bc <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e030      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x734>
 8003a56:	e028      	b.n	8003aaa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d023      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a08      	ldr	r2, [pc, #32]	@ (8003a84 <HAL_RCC_OscConfig+0x780>)
 8003a64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fb27 	bl	80020bc <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a70:	e00c      	b.n	8003a8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fe fb23 	bl	80020bc <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d905      	bls.n	8003a8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e013      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
 8003a84:	40021000 	.word	0x40021000
 8003a88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8c:	4b09      	ldr	r3, [pc, #36]	@ (8003ab4 <HAL_RCC_OscConfig+0x7b0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ec      	bne.n	8003a72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_RCC_OscConfig+0x7b0>)
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	4905      	ldr	r1, [pc, #20]	@ (8003ab4 <HAL_RCC_OscConfig+0x7b0>)
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_RCC_OscConfig+0x7b4>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60cb      	str	r3, [r1, #12]
 8003aa4:	e001      	b.n	8003aaa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	feeefffc 	.word	0xfeeefffc

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0e7      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b75      	ldr	r3, [pc, #468]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d910      	bls.n	8003b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b72      	ldr	r3, [pc, #456]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0207 	bic.w	r2, r3, #7
 8003ae6:	4970      	ldr	r1, [pc, #448]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b6e      	ldr	r3, [pc, #440]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0cf      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d908      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b63      	ldr	r3, [pc, #396]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4960      	ldr	r1, [pc, #384]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d04c      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b42:	4b5a      	ldr	r3, [pc, #360]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d121      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0a6      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5a:	4b54      	ldr	r3, [pc, #336]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d115      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e09a      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b72:	4b4e      	ldr	r3, [pc, #312]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e08e      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e086      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b92:	4b46      	ldr	r3, [pc, #280]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4943      	ldr	r1, [pc, #268]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fa8a 	bl	80020bc <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fe fa86 	bl	80020bc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e06e      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 020c 	and.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1eb      	bne.n	8003bac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d208      	bcs.n	8003c02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	492b      	ldr	r1, [pc, #172]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c02:	4b29      	ldr	r3, [pc, #164]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d210      	bcs.n	8003c32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c10:	4b25      	ldr	r3, [pc, #148]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 0207 	bic.w	r2, r3, #7
 8003c18:	4923      	ldr	r1, [pc, #140]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c20:	4b21      	ldr	r3, [pc, #132]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e036      	b.n	8003ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4918      	ldr	r1, [pc, #96]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5c:	4b13      	ldr	r3, [pc, #76]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4910      	ldr	r1, [pc, #64]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c70:	f000 f824 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	490b      	ldr	r1, [pc, #44]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c90:	4b09      	ldr	r3, [pc, #36]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1fc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe f9c1 	bl	800201c <HAL_InitTick>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08009b70 	.word	0x08009b70
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	20000004 	.word	0x20000004

08003cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	@ 0x24
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cca:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d121      	bne.n	8003d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d11e      	bne.n	8003d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cf0:	4b34      	ldr	r3, [pc, #208]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cfc:	4b31      	ldr	r3, [pc, #196]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	e005      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d18:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d34:	4b25      	ldr	r3, [pc, #148]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e004      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d40:	4b23      	ldr	r3, [pc, #140]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d134      	bne.n	8003db4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0xac>
 8003d60:	e005      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d62:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d64:	617b      	str	r3, [r7, #20]
      break;
 8003d66:	e005      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d68:	4b19      	ldr	r3, [pc, #100]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d6a:	617b      	str	r3, [r7, #20]
      break;
 8003d6c:	e002      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	617b      	str	r3, [r7, #20]
      break;
 8003d72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d74:	4b13      	ldr	r3, [pc, #76]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	3301      	adds	r3, #1
 8003d80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d82:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	fb03 f202 	mul.w	r2, r3, r2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	0e5b      	lsrs	r3, r3, #25
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	3301      	adds	r3, #1
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003db4:	69bb      	ldr	r3, [r7, #24]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	@ 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	08009b88 	.word	0x08009b88
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	007a1200 	.word	0x007a1200

08003dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4904      	ldr	r1, [pc, #16]	@ (8003e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	08009b80 	.word	0x08009b80

08003e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e1c:	f7ff ffda 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003e20:	4602      	mov	r2, r0
 8003e22:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	0adb      	lsrs	r3, r3, #11
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	4904      	ldr	r1, [pc, #16]	@ (8003e40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e2e:	5ccb      	ldrb	r3, [r1, r3]
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	08009b80 	.word	0x08009b80

08003e44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e50:	4b2a      	ldr	r3, [pc, #168]	@ (8003efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e5c:	f7ff f9ee 	bl	800323c <HAL_PWREx_GetVoltageRange>
 8003e60:	6178      	str	r0, [r7, #20]
 8003e62:	e014      	b.n	8003e8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b25      	ldr	r3, [pc, #148]	@ (8003efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e68:	4a24      	ldr	r2, [pc, #144]	@ (8003efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e70:	4b22      	ldr	r3, [pc, #136]	@ (8003efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e7c:	f7ff f9de 	bl	800323c <HAL_PWREx_GetVoltageRange>
 8003e80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e82:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e86:	4a1d      	ldr	r2, [pc, #116]	@ (8003efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e94:	d10b      	bne.n	8003eae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	d919      	bls.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ea0:	d902      	bls.n	8003ea8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	e013      	b.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	e010      	b.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b80      	cmp	r3, #128	@ 0x80
 8003eb2:	d902      	bls.n	8003eba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	e00a      	b.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b80      	cmp	r3, #128	@ 0x80
 8003ebe:	d102      	bne.n	8003ec6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	e004      	b.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b70      	cmp	r3, #112	@ 0x70
 8003eca:	d101      	bne.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ecc:	2301      	movs	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 0207 	bic.w	r2, r3, #7
 8003ed8:	4909      	ldr	r1, [pc, #36]	@ (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ee0:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d001      	beq.n	8003ef2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40022000 	.word	0x40022000

08003f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f10:	2300      	movs	r3, #0
 8003f12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d041      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f28:	d02a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f2e:	d824      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f34:	d008      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f3a:	d81e      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f44:	d010      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f46:	e018      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f48:	4b86      	ldr	r3, [pc, #536]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a85      	ldr	r2, [pc, #532]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f54:	e015      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fabb 	bl	80044d8 <RCCEx_PLLSAI1_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f66:	e00c      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3320      	adds	r3, #32
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fba6 	bl	80046c0 <RCCEx_PLLSAI2_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f78:	e003      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f7e:	e000      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f88:	4b76      	ldr	r3, [pc, #472]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f96:	4973      	ldr	r1, [pc, #460]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f9e:	e001      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d041      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fb4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fb8:	d02a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fbe:	d824      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fca:	d81e      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fd6:	e018      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fd8:	4b62      	ldr	r3, [pc, #392]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a61      	ldr	r2, [pc, #388]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fe4:	e015      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fa73 	bl	80044d8 <RCCEx_PLLSAI1_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ff6:	e00c      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3320      	adds	r3, #32
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fb5e 	bl	80046c0 <RCCEx_PLLSAI2_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004008:	e003      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	74fb      	strb	r3, [r7, #19]
      break;
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004018:	4b52      	ldr	r3, [pc, #328]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004026:	494f      	ldr	r1, [pc, #316]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800402e:	e001      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a0 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004046:	4b47      	ldr	r3, [pc, #284]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004056:	2300      	movs	r3, #0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b41      	ldr	r3, [pc, #260]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	4a40      	ldr	r2, [pc, #256]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	@ 0x58
 8004068:	4b3e      	ldr	r3, [pc, #248]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004074:	2301      	movs	r3, #1
 8004076:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004078:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a3a      	ldr	r2, [pc, #232]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800407e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004082:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004084:	f7fe f81a 	bl	80020bc <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800408a:	e009      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7fe f816 	bl	80020bc <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d902      	bls.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	74fb      	strb	r3, [r7, #19]
        break;
 800409e:	e005      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a0:	4b31      	ldr	r3, [pc, #196]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ef      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d15c      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d019      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040d0:	4b24      	ldr	r3, [pc, #144]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040dc:	4b21      	ldr	r3, [pc, #132]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	4a20      	ldr	r2, [pc, #128]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040fc:	4a19      	ldr	r2, [pc, #100]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fd ffd5 	bl	80020bc <HAL_GetTick>
 8004112:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004114:	e00b      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd ffd1 	bl	80020bc <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d902      	bls.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	74fb      	strb	r3, [r7, #19]
            break;
 800412c:	e006      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ec      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10c      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004142:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004152:	4904      	ldr	r1, [pc, #16]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800415a:	e009      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004170:	7c7b      	ldrb	r3, [r7, #17]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d105      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004176:	4b9e      	ldr	r3, [pc, #632]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417a:	4a9d      	ldr	r2, [pc, #628]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004180:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800418e:	4b98      	ldr	r3, [pc, #608]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f023 0203 	bic.w	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	4994      	ldr	r1, [pc, #592]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b0:	4b8f      	ldr	r3, [pc, #572]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f023 020c 	bic.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041be:	498c      	ldr	r1, [pc, #560]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041d2:	4b87      	ldr	r3, [pc, #540]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	4983      	ldr	r1, [pc, #524]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041f4:	4b7e      	ldr	r3, [pc, #504]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	497b      	ldr	r1, [pc, #492]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004216:	4b76      	ldr	r3, [pc, #472]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004224:	4972      	ldr	r1, [pc, #456]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004238:	4b6d      	ldr	r3, [pc, #436]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004246:	496a      	ldr	r1, [pc, #424]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425a:	4b65      	ldr	r3, [pc, #404]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	4961      	ldr	r1, [pc, #388]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800427c:	4b5c      	ldr	r3, [pc, #368]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800428a:	4959      	ldr	r1, [pc, #356]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800429e:	4b54      	ldr	r3, [pc, #336]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ac:	4950      	ldr	r1, [pc, #320]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042c0:	4b4b      	ldr	r3, [pc, #300]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ce:	4948      	ldr	r1, [pc, #288]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e2:	4b43      	ldr	r3, [pc, #268]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f0:	493f      	ldr	r1, [pc, #252]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d028      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004304:	4b3a      	ldr	r3, [pc, #232]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004312:	4937      	ldr	r1, [pc, #220]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800431e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004322:	d106      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004324:	4b32      	ldr	r3, [pc, #200]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a31      	ldr	r2, [pc, #196]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800432e:	60d3      	str	r3, [r2, #12]
 8004330:	e011      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800433a:	d10c      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f8c8 	bl	80044d8 <RCCEx_PLLSAI1_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d028      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004362:	4b23      	ldr	r3, [pc, #140]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004368:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004370:	491f      	ldr	r1, [pc, #124]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004380:	d106      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004382:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800438c:	60d3      	str	r3, [r2, #12]
 800438e:	e011      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004394:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f899 	bl	80044d8 <RCCEx_PLLSAI1_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d02b      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c0:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ce:	4908      	ldr	r1, [pc, #32]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043de:	d109      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e0:	4b03      	ldr	r3, [pc, #12]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a02      	ldr	r2, [pc, #8]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ea:	60d3      	str	r3, [r2, #12]
 80043ec:	e014      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	2101      	movs	r1, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f867 	bl	80044d8 <RCCEx_PLLSAI1_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02f      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004424:	4b2b      	ldr	r3, [pc, #172]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004432:	4928      	ldr	r1, [pc, #160]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800443e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004442:	d10d      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f844 	bl	80044d8 <RCCEx_PLLSAI1_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d014      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	74bb      	strb	r3, [r7, #18]
 800445e:	e011      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004468:	d10c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3320      	adds	r3, #32
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f925 	bl	80046c0 <RCCEx_PLLSAI2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004490:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800449e:	490d      	ldr	r1, [pc, #52]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b2:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044c2:	4904      	ldr	r1, [pc, #16]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000

080044d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044e6:	4b75      	ldr	r3, [pc, #468]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044f2:	4b72      	ldr	r3, [pc, #456]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0203 	and.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d10d      	bne.n	800451e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
       ||
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800450a:	4b6c      	ldr	r3, [pc, #432]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
       ||
 800451a:	429a      	cmp	r2, r3
 800451c:	d047      	beq.n	80045ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
 8004522:	e044      	b.n	80045ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d018      	beq.n	800455e <RCCEx_PLLSAI1_Config+0x86>
 800452c:	2b03      	cmp	r3, #3
 800452e:	d825      	bhi.n	800457c <RCCEx_PLLSAI1_Config+0xa4>
 8004530:	2b01      	cmp	r3, #1
 8004532:	d002      	beq.n	800453a <RCCEx_PLLSAI1_Config+0x62>
 8004534:	2b02      	cmp	r3, #2
 8004536:	d009      	beq.n	800454c <RCCEx_PLLSAI1_Config+0x74>
 8004538:	e020      	b.n	800457c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800453a:	4b60      	ldr	r3, [pc, #384]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d11d      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800454a:	e01a      	b.n	8004582 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800454c:	4b5b      	ldr	r3, [pc, #364]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d116      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455c:	e013      	b.n	8004586 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800455e:	4b57      	ldr	r3, [pc, #348]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800456a:	4b54      	ldr	r3, [pc, #336]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800457a:	e006      	b.n	800458a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      break;
 8004580:	e004      	b.n	800458c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458a:	bf00      	nop
    }

    if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004592:	4b4a      	ldr	r3, [pc, #296]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	430b      	orrs	r3, r1
 80045a8:	4944      	ldr	r1, [pc, #272]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d17d      	bne.n	80046b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045b4:	4b41      	ldr	r3, [pc, #260]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a40      	ldr	r2, [pc, #256]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c0:	f7fd fd7c 	bl	80020bc <HAL_GetTick>
 80045c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045c6:	e009      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c8:	f7fd fd78 	bl	80020bc <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d902      	bls.n	80045dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	73fb      	strb	r3, [r7, #15]
        break;
 80045da:	e005      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045dc:	4b37      	ldr	r3, [pc, #220]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ef      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d160      	bne.n	80046b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d111      	bne.n	8004618 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f4:	4b31      	ldr	r3, [pc, #196]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6892      	ldr	r2, [r2, #8]
 8004604:	0211      	lsls	r1, r2, #8
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68d2      	ldr	r2, [r2, #12]
 800460a:	0912      	lsrs	r2, r2, #4
 800460c:	0452      	lsls	r2, r2, #17
 800460e:	430a      	orrs	r2, r1
 8004610:	492a      	ldr	r1, [pc, #168]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	4313      	orrs	r3, r2
 8004614:	610b      	str	r3, [r1, #16]
 8004616:	e027      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d112      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800461e:	4b27      	ldr	r3, [pc, #156]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004626:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6892      	ldr	r2, [r2, #8]
 800462e:	0211      	lsls	r1, r2, #8
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6912      	ldr	r2, [r2, #16]
 8004634:	0852      	lsrs	r2, r2, #1
 8004636:	3a01      	subs	r2, #1
 8004638:	0552      	lsls	r2, r2, #21
 800463a:	430a      	orrs	r2, r1
 800463c:	491f      	ldr	r1, [pc, #124]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	610b      	str	r3, [r1, #16]
 8004642:	e011      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004644:	4b1d      	ldr	r3, [pc, #116]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800464c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6892      	ldr	r2, [r2, #8]
 8004654:	0211      	lsls	r1, r2, #8
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6952      	ldr	r2, [r2, #20]
 800465a:	0852      	lsrs	r2, r2, #1
 800465c:	3a01      	subs	r2, #1
 800465e:	0652      	lsls	r2, r2, #25
 8004660:	430a      	orrs	r2, r1
 8004662:	4916      	ldr	r1, [pc, #88]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004664:	4313      	orrs	r3, r2
 8004666:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004668:	4b14      	ldr	r3, [pc, #80]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a13      	ldr	r2, [pc, #76]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800466e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004672:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fd fd22 	bl	80020bc <HAL_GetTick>
 8004678:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800467a:	e009      	b.n	8004690 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800467c:	f7fd fd1e 	bl	80020bc <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d902      	bls.n	8004690 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	73fb      	strb	r3, [r7, #15]
          break;
 800468e:	e005      	b.n	800469c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004690:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ef      	beq.n	800467c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046a2:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	4904      	ldr	r1, [pc, #16]	@ (80046bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000

080046c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d018      	beq.n	800470c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046da:	4b67      	ldr	r3, [pc, #412]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0203 	and.w	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d10d      	bne.n	8004706 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
       ||
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046f2:	4b61      	ldr	r3, [pc, #388]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
       ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d047      	beq.n	8004796 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e044      	b.n	8004796 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d018      	beq.n	8004746 <RCCEx_PLLSAI2_Config+0x86>
 8004714:	2b03      	cmp	r3, #3
 8004716:	d825      	bhi.n	8004764 <RCCEx_PLLSAI2_Config+0xa4>
 8004718:	2b01      	cmp	r3, #1
 800471a:	d002      	beq.n	8004722 <RCCEx_PLLSAI2_Config+0x62>
 800471c:	2b02      	cmp	r3, #2
 800471e:	d009      	beq.n	8004734 <RCCEx_PLLSAI2_Config+0x74>
 8004720:	e020      	b.n	8004764 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004722:	4b55      	ldr	r3, [pc, #340]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d11d      	bne.n	800476a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004732:	e01a      	b.n	800476a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004734:	4b50      	ldr	r3, [pc, #320]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473c:	2b00      	cmp	r3, #0
 800473e:	d116      	bne.n	800476e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004744:	e013      	b.n	800476e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004746:	4b4c      	ldr	r3, [pc, #304]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004752:	4b49      	ldr	r3, [pc, #292]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004762:	e006      	b.n	8004772 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      break;
 8004768:	e004      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800476a:	bf00      	nop
 800476c:	e002      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800476e:	bf00      	nop
 8004770:	e000      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004772:	bf00      	nop
    }

    if(status == HAL_OK)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10d      	bne.n	8004796 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800477a:	4b3f      	ldr	r3, [pc, #252]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6819      	ldr	r1, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	430b      	orrs	r3, r1
 8004790:	4939      	ldr	r1, [pc, #228]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d167      	bne.n	800486c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800479c:	4b36      	ldr	r3, [pc, #216]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a35      	ldr	r2, [pc, #212]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a8:	f7fd fc88 	bl	80020bc <HAL_GetTick>
 80047ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047ae:	e009      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b0:	f7fd fc84 	bl	80020bc <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d902      	bls.n	80047c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	73fb      	strb	r3, [r7, #15]
        break;
 80047c2:	e005      	b.n	80047d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ef      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d14a      	bne.n	800486c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d111      	bne.n	8004800 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047dc:	4b26      	ldr	r3, [pc, #152]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6892      	ldr	r2, [r2, #8]
 80047ec:	0211      	lsls	r1, r2, #8
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68d2      	ldr	r2, [r2, #12]
 80047f2:	0912      	lsrs	r2, r2, #4
 80047f4:	0452      	lsls	r2, r2, #17
 80047f6:	430a      	orrs	r2, r1
 80047f8:	491f      	ldr	r1, [pc, #124]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	614b      	str	r3, [r1, #20]
 80047fe:	e011      	b.n	8004824 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004800:	4b1d      	ldr	r3, [pc, #116]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004808:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6892      	ldr	r2, [r2, #8]
 8004810:	0211      	lsls	r1, r2, #8
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6912      	ldr	r2, [r2, #16]
 8004816:	0852      	lsrs	r2, r2, #1
 8004818:	3a01      	subs	r2, #1
 800481a:	0652      	lsls	r2, r2, #25
 800481c:	430a      	orrs	r2, r1
 800481e:	4916      	ldr	r1, [pc, #88]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004824:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a13      	ldr	r2, [pc, #76]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800482e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd fc44 	bl	80020bc <HAL_GetTick>
 8004834:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004836:	e009      	b.n	800484c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004838:	f7fd fc40 	bl	80020bc <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d902      	bls.n	800484c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	73fb      	strb	r3, [r7, #15]
          break;
 800484a:	e005      	b.n	8004858 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800484c:	4b0a      	ldr	r3, [pc, #40]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0ef      	beq.n	8004838 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800485e:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	4904      	ldr	r1, [pc, #16]	@ (8004878 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004868:	4313      	orrs	r3, r2
 800486a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e040      	b.n	8004910 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc fdf2 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	@ 0x24
 80048a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb6a 	bl	8004f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f8af 	bl	8004a2c <UART_SetConfig>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e01b      	b.n	8004910 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fbe9 	bl	80050e0 <UART_CheckIdleState>
 800490e:	4603      	mov	r3, r0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	@ 0x28
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800492c:	2b20      	cmp	r3, #32
 800492e:	d177      	bne.n	8004a20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_UART_Transmit+0x24>
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e070      	b.n	8004a22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2221      	movs	r2, #33	@ 0x21
 800494c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494e:	f7fd fbb5 	bl	80020bc <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	88fa      	ldrh	r2, [r7, #6]
 8004960:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496c:	d108      	bne.n	8004980 <HAL_UART_Transmit+0x68>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e003      	b.n	8004988 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004984:	2300      	movs	r3, #0
 8004986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004988:	e02f      	b.n	80049ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2200      	movs	r2, #0
 8004992:	2180      	movs	r1, #128	@ 0x80
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fc4b 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e03b      	b.n	8004a22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	881a      	ldrh	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049bc:	b292      	uxth	r2, r2
 80049be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	3302      	adds	r3, #2
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	e007      	b.n	80049d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3301      	adds	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1c9      	bne.n	800498a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2140      	movs	r1, #64	@ 0x40
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fc15 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e005      	b.n	8004a22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b08a      	sub	sp, #40	@ 0x28
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4ba4      	ldr	r3, [pc, #656]	@ (8004cec <UART_SetConfig+0x2c0>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a99      	ldr	r2, [pc, #612]	@ (8004cf0 <UART_SetConfig+0x2c4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a94:	4313      	orrs	r3, r2
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a90      	ldr	r2, [pc, #576]	@ (8004cf4 <UART_SetConfig+0x2c8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d126      	bne.n	8004b04 <UART_SetConfig+0xd8>
 8004ab6:	4b90      	ldr	r3, [pc, #576]	@ (8004cf8 <UART_SetConfig+0x2cc>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d81b      	bhi.n	8004afc <UART_SetConfig+0xd0>
 8004ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8004acc <UART_SetConfig+0xa0>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004aed 	.word	0x08004aed
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004af5 	.word	0x08004af5
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e116      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aea:	e112      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004aec:	2304      	movs	r3, #4
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af2:	e10e      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004af4:	2308      	movs	r3, #8
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afa:	e10a      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004afc:	2310      	movs	r3, #16
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b02:	e106      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a7c      	ldr	r2, [pc, #496]	@ (8004cfc <UART_SetConfig+0x2d0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d138      	bne.n	8004b80 <UART_SetConfig+0x154>
 8004b0e:	4b7a      	ldr	r3, [pc, #488]	@ (8004cf8 <UART_SetConfig+0x2cc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f003 030c 	and.w	r3, r3, #12
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d82d      	bhi.n	8004b78 <UART_SetConfig+0x14c>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <UART_SetConfig+0xf8>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004b79 	.word	0x08004b79
 8004b2c:	08004b79 	.word	0x08004b79
 8004b30:	08004b79 	.word	0x08004b79
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004b79 	.word	0x08004b79
 8004b3c:	08004b79 	.word	0x08004b79
 8004b40:	08004b79 	.word	0x08004b79
 8004b44:	08004b61 	.word	0x08004b61
 8004b48:	08004b79 	.word	0x08004b79
 8004b4c:	08004b79 	.word	0x08004b79
 8004b50:	08004b79 	.word	0x08004b79
 8004b54:	08004b71 	.word	0x08004b71
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5e:	e0d8      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004b60:	2302      	movs	r3, #2
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b66:	e0d4      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6e:	e0d0      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004b70:	2308      	movs	r3, #8
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b76:	e0cc      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7e:	e0c8      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a5e      	ldr	r2, [pc, #376]	@ (8004d00 <UART_SetConfig+0x2d4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d125      	bne.n	8004bd6 <UART_SetConfig+0x1aa>
 8004b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf8 <UART_SetConfig+0x2cc>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b94:	2b30      	cmp	r3, #48	@ 0x30
 8004b96:	d016      	beq.n	8004bc6 <UART_SetConfig+0x19a>
 8004b98:	2b30      	cmp	r3, #48	@ 0x30
 8004b9a:	d818      	bhi.n	8004bce <UART_SetConfig+0x1a2>
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d00a      	beq.n	8004bb6 <UART_SetConfig+0x18a>
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d814      	bhi.n	8004bce <UART_SetConfig+0x1a2>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <UART_SetConfig+0x182>
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d008      	beq.n	8004bbe <UART_SetConfig+0x192>
 8004bac:	e00f      	b.n	8004bce <UART_SetConfig+0x1a2>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb4:	e0ad      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bbc:	e0a9      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc4:	e0a5      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bcc:	e0a1      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004bce:	2310      	movs	r3, #16
 8004bd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd4:	e09d      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a4a      	ldr	r2, [pc, #296]	@ (8004d04 <UART_SetConfig+0x2d8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d125      	bne.n	8004c2c <UART_SetConfig+0x200>
 8004be0:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <UART_SetConfig+0x2cc>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bec:	d016      	beq.n	8004c1c <UART_SetConfig+0x1f0>
 8004bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bf0:	d818      	bhi.n	8004c24 <UART_SetConfig+0x1f8>
 8004bf2:	2b80      	cmp	r3, #128	@ 0x80
 8004bf4:	d00a      	beq.n	8004c0c <UART_SetConfig+0x1e0>
 8004bf6:	2b80      	cmp	r3, #128	@ 0x80
 8004bf8:	d814      	bhi.n	8004c24 <UART_SetConfig+0x1f8>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <UART_SetConfig+0x1d8>
 8004bfe:	2b40      	cmp	r3, #64	@ 0x40
 8004c00:	d008      	beq.n	8004c14 <UART_SetConfig+0x1e8>
 8004c02:	e00f      	b.n	8004c24 <UART_SetConfig+0x1f8>
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e082      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e07e      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c14:	2304      	movs	r3, #4
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e07a      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c22:	e076      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2a:	e072      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a35      	ldr	r2, [pc, #212]	@ (8004d08 <UART_SetConfig+0x2dc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d12a      	bne.n	8004c8c <UART_SetConfig+0x260>
 8004c36:	4b30      	ldr	r3, [pc, #192]	@ (8004cf8 <UART_SetConfig+0x2cc>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c44:	d01a      	beq.n	8004c7c <UART_SetConfig+0x250>
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4a:	d81b      	bhi.n	8004c84 <UART_SetConfig+0x258>
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c50:	d00c      	beq.n	8004c6c <UART_SetConfig+0x240>
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c56:	d815      	bhi.n	8004c84 <UART_SetConfig+0x258>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <UART_SetConfig+0x238>
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c60:	d008      	beq.n	8004c74 <UART_SetConfig+0x248>
 8004c62:	e00f      	b.n	8004c84 <UART_SetConfig+0x258>
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	e052      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c72:	e04e      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c74:	2304      	movs	r3, #4
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	e04a      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e046      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c84:	2310      	movs	r3, #16
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8a:	e042      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a17      	ldr	r2, [pc, #92]	@ (8004cf0 <UART_SetConfig+0x2c4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d13a      	bne.n	8004d0c <UART_SetConfig+0x2e0>
 8004c96:	4b18      	ldr	r3, [pc, #96]	@ (8004cf8 <UART_SetConfig+0x2cc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ca0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ca4:	d01a      	beq.n	8004cdc <UART_SetConfig+0x2b0>
 8004ca6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004caa:	d81b      	bhi.n	8004ce4 <UART_SetConfig+0x2b8>
 8004cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb0:	d00c      	beq.n	8004ccc <UART_SetConfig+0x2a0>
 8004cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb6:	d815      	bhi.n	8004ce4 <UART_SetConfig+0x2b8>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <UART_SetConfig+0x298>
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc0:	d008      	beq.n	8004cd4 <UART_SetConfig+0x2a8>
 8004cc2:	e00f      	b.n	8004ce4 <UART_SetConfig+0x2b8>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cca:	e022      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd2:	e01e      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cda:	e01a      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce2:	e016      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cea:	e012      	b.n	8004d12 <UART_SetConfig+0x2e6>
 8004cec:	efff69f3 	.word	0xefff69f3
 8004cf0:	40008000 	.word	0x40008000
 8004cf4:	40013800 	.word	0x40013800
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40004400 	.word	0x40004400
 8004d00:	40004800 	.word	0x40004800
 8004d04:	40004c00 	.word	0x40004c00
 8004d08:	40005000 	.word	0x40005000
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a9f      	ldr	r2, [pc, #636]	@ (8004f94 <UART_SetConfig+0x568>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d17a      	bne.n	8004e12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d824      	bhi.n	8004d6e <UART_SetConfig+0x342>
 8004d24:	a201      	add	r2, pc, #4	@ (adr r2, 8004d2c <UART_SetConfig+0x300>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d6f 	.word	0x08004d6f
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d6f 	.word	0x08004d6f
 8004d3c:	08004d5f 	.word	0x08004d5f
 8004d40:	08004d6f 	.word	0x08004d6f
 8004d44:	08004d6f 	.word	0x08004d6f
 8004d48:	08004d6f 	.word	0x08004d6f
 8004d4c:	08004d67 	.word	0x08004d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7ff f84c 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004d54:	61f8      	str	r0, [r7, #28]
        break;
 8004d56:	e010      	b.n	8004d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b8f      	ldr	r3, [pc, #572]	@ (8004f98 <UART_SetConfig+0x56c>)
 8004d5a:	61fb      	str	r3, [r7, #28]
        break;
 8004d5c:	e00d      	b.n	8004d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5e:	f7fe ffad 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004d62:	61f8      	str	r0, [r7, #28]
        break;
 8004d64:	e009      	b.n	8004d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d6a:	61fb      	str	r3, [r7, #28]
        break;
 8004d6c:	e005      	b.n	8004d7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80fb 	beq.w	8004f78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d305      	bcc.n	8004d9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d903      	bls.n	8004da6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004da4:	e0e8      	b.n	8004f78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2200      	movs	r2, #0
 8004daa:	461c      	mov	r4, r3
 8004dac:	4615      	mov	r5, r2
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	022b      	lsls	r3, r5, #8
 8004db8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dbc:	0222      	lsls	r2, r4, #8
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	6849      	ldr	r1, [r1, #4]
 8004dc2:	0849      	lsrs	r1, r1, #1
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	4688      	mov	r8, r1
 8004dc8:	4681      	mov	r9, r0
 8004dca:	eb12 0a08 	adds.w	sl, r2, r8
 8004dce:	eb43 0b09 	adc.w	fp, r3, r9
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de0:	4650      	mov	r0, sl
 8004de2:	4659      	mov	r1, fp
 8004de4:	f7fb ff50 	bl	8000c88 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4613      	mov	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004df6:	d308      	bcc.n	8004e0a <UART_SetConfig+0x3de>
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dfe:	d204      	bcs.n	8004e0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	e0b6      	b.n	8004f78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e10:	e0b2      	b.n	8004f78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e1a:	d15e      	bne.n	8004eda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d828      	bhi.n	8004e76 <UART_SetConfig+0x44a>
 8004e24:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <UART_SetConfig+0x400>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08004e59 	.word	0x08004e59
 8004e34:	08004e61 	.word	0x08004e61
 8004e38:	08004e77 	.word	0x08004e77
 8004e3c:	08004e67 	.word	0x08004e67
 8004e40:	08004e77 	.word	0x08004e77
 8004e44:	08004e77 	.word	0x08004e77
 8004e48:	08004e77 	.word	0x08004e77
 8004e4c:	08004e6f 	.word	0x08004e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e50:	f7fe ffcc 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004e54:	61f8      	str	r0, [r7, #28]
        break;
 8004e56:	e014      	b.n	8004e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e58:	f7fe ffde 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8004e5c:	61f8      	str	r0, [r7, #28]
        break;
 8004e5e:	e010      	b.n	8004e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e60:	4b4d      	ldr	r3, [pc, #308]	@ (8004f98 <UART_SetConfig+0x56c>)
 8004e62:	61fb      	str	r3, [r7, #28]
        break;
 8004e64:	e00d      	b.n	8004e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e66:	f7fe ff29 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004e6a:	61f8      	str	r0, [r7, #28]
        break;
 8004e6c:	e009      	b.n	8004e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e72:	61fb      	str	r3, [r7, #28]
        break;
 8004e74:	e005      	b.n	8004e82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d077      	beq.n	8004f78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	005a      	lsls	r2, r3, #1
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	441a      	add	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b0f      	cmp	r3, #15
 8004ea2:	d916      	bls.n	8004ed2 <UART_SetConfig+0x4a6>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eaa:	d212      	bcs.n	8004ed2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f023 030f 	bic.w	r3, r3, #15
 8004eb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	8afb      	ldrh	r3, [r7, #22]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	8afa      	ldrh	r2, [r7, #22]
 8004ece:	60da      	str	r2, [r3, #12]
 8004ed0:	e052      	b.n	8004f78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ed8:	e04e      	b.n	8004f78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d827      	bhi.n	8004f32 <UART_SetConfig+0x506>
 8004ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <UART_SetConfig+0x4bc>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f15 	.word	0x08004f15
 8004ef0:	08004f1d 	.word	0x08004f1d
 8004ef4:	08004f33 	.word	0x08004f33
 8004ef8:	08004f23 	.word	0x08004f23
 8004efc:	08004f33 	.word	0x08004f33
 8004f00:	08004f33 	.word	0x08004f33
 8004f04:	08004f33 	.word	0x08004f33
 8004f08:	08004f2b 	.word	0x08004f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f7fe ff6e 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004f10:	61f8      	str	r0, [r7, #28]
        break;
 8004f12:	e014      	b.n	8004f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7fe ff80 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8004f18:	61f8      	str	r0, [r7, #28]
        break;
 8004f1a:	e010      	b.n	8004f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <UART_SetConfig+0x56c>)
 8004f1e:	61fb      	str	r3, [r7, #28]
        break;
 8004f20:	e00d      	b.n	8004f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f22:	f7fe fecb 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004f26:	61f8      	str	r0, [r7, #28]
        break;
 8004f28:	e009      	b.n	8004f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f2e:	61fb      	str	r3, [r7, #28]
        break;
 8004f30:	e005      	b.n	8004f3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f3c:	bf00      	nop
    }

    if (pclk != 0U)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d019      	beq.n	8004f78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	085a      	lsrs	r2, r3, #1
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b0f      	cmp	r3, #15
 8004f5c:	d909      	bls.n	8004f72 <UART_SetConfig+0x546>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f64:	d205      	bcs.n	8004f72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e002      	b.n	8004f78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3728      	adds	r7, #40	@ 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f92:	bf00      	nop
 8004f94:	40008000 	.word	0x40008000
 8004f98:	00f42400 	.word	0x00f42400

08004f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01a      	beq.n	80050b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800509a:	d10a      	bne.n	80050b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b098      	sub	sp, #96	@ 0x60
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050f0:	f7fc ffe4 	bl	80020bc <HAL_GetTick>
 80050f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b08      	cmp	r3, #8
 8005102:	d12e      	bne.n	8005162 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005104:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800510c:	2200      	movs	r2, #0
 800510e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f88c 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d021      	beq.n	8005162 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800512c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005132:	653b      	str	r3, [r7, #80]	@ 0x50
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800513c:	647b      	str	r3, [r7, #68]	@ 0x44
 800513e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800514a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e6      	bne.n	800511e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e062      	b.n	8005228 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d149      	bne.n	8005204 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f856 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d03c      	beq.n	8005204 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	623b      	str	r3, [r7, #32]
   return(result);
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800519e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e6      	bne.n	800518a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3308      	adds	r3, #8
 80051c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051dc:	61fa      	str	r2, [r7, #28]
 80051de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	69b9      	ldr	r1, [r7, #24]
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e5      	bne.n	80051bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e011      	b.n	8005228 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3758      	adds	r7, #88	@ 0x58
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005240:	e04f      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d04b      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fc ff37 	bl	80020bc <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <UART_WaitOnFlagUntilTimeout+0x30>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e04e      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d037      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b80      	cmp	r3, #128	@ 0x80
 8005276:	d034      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b40      	cmp	r3, #64	@ 0x40
 800527c:	d031      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d110      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2208      	movs	r2, #8
 8005292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f838 	bl	800530a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2208      	movs	r2, #8
 800529e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e029      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052bc:	d111      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f81e 	bl	800530a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e00f      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d0a0      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530a:	b480      	push	{r7}
 800530c:	b095      	sub	sp, #84	@ 0x54
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005330:	643b      	str	r3, [r7, #64]	@ 0x40
 8005332:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005336:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	61fb      	str	r3, [r7, #28]
   return(result);
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3308      	adds	r3, #8
 8005362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005364:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005366:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800536a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e5      	bne.n	8005344 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537c:	2b01      	cmp	r3, #1
 800537e:	d118      	bne.n	80053b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	60bb      	str	r3, [r7, #8]
   return(result);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f023 0310 	bic.w	r3, r3, #16
 8005394:	647b      	str	r3, [r7, #68]	@ 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6979      	ldr	r1, [r7, #20]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	613b      	str	r3, [r7, #16]
   return(result);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e6      	bne.n	8005380 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053c6:	bf00      	nop
 80053c8:	3754      	adds	r7, #84	@ 0x54
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <__cvt>:
 80053d2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d6:	ec57 6b10 	vmov	r6, r7, d0
 80053da:	2f00      	cmp	r7, #0
 80053dc:	460c      	mov	r4, r1
 80053de:	4619      	mov	r1, r3
 80053e0:	463b      	mov	r3, r7
 80053e2:	bfbb      	ittet	lt
 80053e4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80053e8:	461f      	movlt	r7, r3
 80053ea:	2300      	movge	r3, #0
 80053ec:	232d      	movlt	r3, #45	@ 0x2d
 80053ee:	700b      	strb	r3, [r1, #0]
 80053f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053f2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80053f6:	4691      	mov	r9, r2
 80053f8:	f023 0820 	bic.w	r8, r3, #32
 80053fc:	bfbc      	itt	lt
 80053fe:	4632      	movlt	r2, r6
 8005400:	4616      	movlt	r6, r2
 8005402:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005406:	d005      	beq.n	8005414 <__cvt+0x42>
 8005408:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800540c:	d100      	bne.n	8005410 <__cvt+0x3e>
 800540e:	3401      	adds	r4, #1
 8005410:	2102      	movs	r1, #2
 8005412:	e000      	b.n	8005416 <__cvt+0x44>
 8005414:	2103      	movs	r1, #3
 8005416:	ab03      	add	r3, sp, #12
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	ab02      	add	r3, sp, #8
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	ec47 6b10 	vmov	d0, r6, r7
 8005422:	4653      	mov	r3, sl
 8005424:	4622      	mov	r2, r4
 8005426:	f001 f8a7 	bl	8006578 <_dtoa_r>
 800542a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800542e:	4605      	mov	r5, r0
 8005430:	d119      	bne.n	8005466 <__cvt+0x94>
 8005432:	f019 0f01 	tst.w	r9, #1
 8005436:	d00e      	beq.n	8005456 <__cvt+0x84>
 8005438:	eb00 0904 	add.w	r9, r0, r4
 800543c:	2200      	movs	r2, #0
 800543e:	2300      	movs	r3, #0
 8005440:	4630      	mov	r0, r6
 8005442:	4639      	mov	r1, r7
 8005444:	f7fb fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8005448:	b108      	cbz	r0, 800544e <__cvt+0x7c>
 800544a:	f8cd 900c 	str.w	r9, [sp, #12]
 800544e:	2230      	movs	r2, #48	@ 0x30
 8005450:	9b03      	ldr	r3, [sp, #12]
 8005452:	454b      	cmp	r3, r9
 8005454:	d31e      	bcc.n	8005494 <__cvt+0xc2>
 8005456:	9b03      	ldr	r3, [sp, #12]
 8005458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800545a:	1b5b      	subs	r3, r3, r5
 800545c:	4628      	mov	r0, r5
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	b004      	add	sp, #16
 8005462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005466:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800546a:	eb00 0904 	add.w	r9, r0, r4
 800546e:	d1e5      	bne.n	800543c <__cvt+0x6a>
 8005470:	7803      	ldrb	r3, [r0, #0]
 8005472:	2b30      	cmp	r3, #48	@ 0x30
 8005474:	d10a      	bne.n	800548c <__cvt+0xba>
 8005476:	2200      	movs	r2, #0
 8005478:	2300      	movs	r3, #0
 800547a:	4630      	mov	r0, r6
 800547c:	4639      	mov	r1, r7
 800547e:	f7fb fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005482:	b918      	cbnz	r0, 800548c <__cvt+0xba>
 8005484:	f1c4 0401 	rsb	r4, r4, #1
 8005488:	f8ca 4000 	str.w	r4, [sl]
 800548c:	f8da 3000 	ldr.w	r3, [sl]
 8005490:	4499      	add	r9, r3
 8005492:	e7d3      	b.n	800543c <__cvt+0x6a>
 8005494:	1c59      	adds	r1, r3, #1
 8005496:	9103      	str	r1, [sp, #12]
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e7d9      	b.n	8005450 <__cvt+0x7e>

0800549c <__exponent>:
 800549c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800549e:	2900      	cmp	r1, #0
 80054a0:	bfba      	itte	lt
 80054a2:	4249      	neglt	r1, r1
 80054a4:	232d      	movlt	r3, #45	@ 0x2d
 80054a6:	232b      	movge	r3, #43	@ 0x2b
 80054a8:	2909      	cmp	r1, #9
 80054aa:	7002      	strb	r2, [r0, #0]
 80054ac:	7043      	strb	r3, [r0, #1]
 80054ae:	dd29      	ble.n	8005504 <__exponent+0x68>
 80054b0:	f10d 0307 	add.w	r3, sp, #7
 80054b4:	461d      	mov	r5, r3
 80054b6:	270a      	movs	r7, #10
 80054b8:	461a      	mov	r2, r3
 80054ba:	fbb1 f6f7 	udiv	r6, r1, r7
 80054be:	fb07 1416 	mls	r4, r7, r6, r1
 80054c2:	3430      	adds	r4, #48	@ 0x30
 80054c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80054c8:	460c      	mov	r4, r1
 80054ca:	2c63      	cmp	r4, #99	@ 0x63
 80054cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80054d0:	4631      	mov	r1, r6
 80054d2:	dcf1      	bgt.n	80054b8 <__exponent+0x1c>
 80054d4:	3130      	adds	r1, #48	@ 0x30
 80054d6:	1e94      	subs	r4, r2, #2
 80054d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80054dc:	1c41      	adds	r1, r0, #1
 80054de:	4623      	mov	r3, r4
 80054e0:	42ab      	cmp	r3, r5
 80054e2:	d30a      	bcc.n	80054fa <__exponent+0x5e>
 80054e4:	f10d 0309 	add.w	r3, sp, #9
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	42ac      	cmp	r4, r5
 80054ec:	bf88      	it	hi
 80054ee:	2300      	movhi	r3, #0
 80054f0:	3302      	adds	r3, #2
 80054f2:	4403      	add	r3, r0
 80054f4:	1a18      	subs	r0, r3, r0
 80054f6:	b003      	add	sp, #12
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005502:	e7ed      	b.n	80054e0 <__exponent+0x44>
 8005504:	2330      	movs	r3, #48	@ 0x30
 8005506:	3130      	adds	r1, #48	@ 0x30
 8005508:	7083      	strb	r3, [r0, #2]
 800550a:	70c1      	strb	r1, [r0, #3]
 800550c:	1d03      	adds	r3, r0, #4
 800550e:	e7f1      	b.n	80054f4 <__exponent+0x58>

08005510 <_printf_float>:
 8005510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005514:	b08d      	sub	sp, #52	@ 0x34
 8005516:	460c      	mov	r4, r1
 8005518:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800551c:	4616      	mov	r6, r2
 800551e:	461f      	mov	r7, r3
 8005520:	4605      	mov	r5, r0
 8005522:	f000 ff23 	bl	800636c <_localeconv_r>
 8005526:	6803      	ldr	r3, [r0, #0]
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fa fea0 	bl	8000270 <strlen>
 8005530:	2300      	movs	r3, #0
 8005532:	930a      	str	r3, [sp, #40]	@ 0x28
 8005534:	f8d8 3000 	ldr.w	r3, [r8]
 8005538:	9005      	str	r0, [sp, #20]
 800553a:	3307      	adds	r3, #7
 800553c:	f023 0307 	bic.w	r3, r3, #7
 8005540:	f103 0208 	add.w	r2, r3, #8
 8005544:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005548:	f8d4 b000 	ldr.w	fp, [r4]
 800554c:	f8c8 2000 	str.w	r2, [r8]
 8005550:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005554:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	f8cd 8018 	str.w	r8, [sp, #24]
 800555e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005566:	4b9c      	ldr	r3, [pc, #624]	@ (80057d8 <_printf_float+0x2c8>)
 8005568:	f04f 32ff 	mov.w	r2, #4294967295
 800556c:	f7fb fade 	bl	8000b2c <__aeabi_dcmpun>
 8005570:	bb70      	cbnz	r0, 80055d0 <_printf_float+0xc0>
 8005572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005576:	4b98      	ldr	r3, [pc, #608]	@ (80057d8 <_printf_float+0x2c8>)
 8005578:	f04f 32ff 	mov.w	r2, #4294967295
 800557c:	f7fb fab8 	bl	8000af0 <__aeabi_dcmple>
 8005580:	bb30      	cbnz	r0, 80055d0 <_printf_float+0xc0>
 8005582:	2200      	movs	r2, #0
 8005584:	2300      	movs	r3, #0
 8005586:	4640      	mov	r0, r8
 8005588:	4649      	mov	r1, r9
 800558a:	f7fb faa7 	bl	8000adc <__aeabi_dcmplt>
 800558e:	b110      	cbz	r0, 8005596 <_printf_float+0x86>
 8005590:	232d      	movs	r3, #45	@ 0x2d
 8005592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005596:	4a91      	ldr	r2, [pc, #580]	@ (80057dc <_printf_float+0x2cc>)
 8005598:	4b91      	ldr	r3, [pc, #580]	@ (80057e0 <_printf_float+0x2d0>)
 800559a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800559e:	bf94      	ite	ls
 80055a0:	4690      	movls	r8, r2
 80055a2:	4698      	movhi	r8, r3
 80055a4:	2303      	movs	r3, #3
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	f02b 0304 	bic.w	r3, fp, #4
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	f04f 0900 	mov.w	r9, #0
 80055b2:	9700      	str	r7, [sp, #0]
 80055b4:	4633      	mov	r3, r6
 80055b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80055b8:	4621      	mov	r1, r4
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f9d2 	bl	8005964 <_printf_common>
 80055c0:	3001      	adds	r0, #1
 80055c2:	f040 808d 	bne.w	80056e0 <_printf_float+0x1d0>
 80055c6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ca:	b00d      	add	sp, #52	@ 0x34
 80055cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	4640      	mov	r0, r8
 80055d6:	4649      	mov	r1, r9
 80055d8:	f7fb faa8 	bl	8000b2c <__aeabi_dcmpun>
 80055dc:	b140      	cbz	r0, 80055f0 <_printf_float+0xe0>
 80055de:	464b      	mov	r3, r9
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bfbc      	itt	lt
 80055e4:	232d      	movlt	r3, #45	@ 0x2d
 80055e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80055ea:	4a7e      	ldr	r2, [pc, #504]	@ (80057e4 <_printf_float+0x2d4>)
 80055ec:	4b7e      	ldr	r3, [pc, #504]	@ (80057e8 <_printf_float+0x2d8>)
 80055ee:	e7d4      	b.n	800559a <_printf_float+0x8a>
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80055f6:	9206      	str	r2, [sp, #24]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	d13b      	bne.n	8005674 <_printf_float+0x164>
 80055fc:	2306      	movs	r3, #6
 80055fe:	6063      	str	r3, [r4, #4]
 8005600:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005604:	2300      	movs	r3, #0
 8005606:	6022      	str	r2, [r4, #0]
 8005608:	9303      	str	r3, [sp, #12]
 800560a:	ab0a      	add	r3, sp, #40	@ 0x28
 800560c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005610:	ab09      	add	r3, sp, #36	@ 0x24
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	6861      	ldr	r1, [r4, #4]
 8005616:	ec49 8b10 	vmov	d0, r8, r9
 800561a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800561e:	4628      	mov	r0, r5
 8005620:	f7ff fed7 	bl	80053d2 <__cvt>
 8005624:	9b06      	ldr	r3, [sp, #24]
 8005626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005628:	2b47      	cmp	r3, #71	@ 0x47
 800562a:	4680      	mov	r8, r0
 800562c:	d129      	bne.n	8005682 <_printf_float+0x172>
 800562e:	1cc8      	adds	r0, r1, #3
 8005630:	db02      	blt.n	8005638 <_printf_float+0x128>
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	4299      	cmp	r1, r3
 8005636:	dd41      	ble.n	80056bc <_printf_float+0x1ac>
 8005638:	f1aa 0a02 	sub.w	sl, sl, #2
 800563c:	fa5f fa8a 	uxtb.w	sl, sl
 8005640:	3901      	subs	r1, #1
 8005642:	4652      	mov	r2, sl
 8005644:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005648:	9109      	str	r1, [sp, #36]	@ 0x24
 800564a:	f7ff ff27 	bl	800549c <__exponent>
 800564e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005650:	1813      	adds	r3, r2, r0
 8005652:	2a01      	cmp	r2, #1
 8005654:	4681      	mov	r9, r0
 8005656:	6123      	str	r3, [r4, #16]
 8005658:	dc02      	bgt.n	8005660 <_printf_float+0x150>
 800565a:	6822      	ldr	r2, [r4, #0]
 800565c:	07d2      	lsls	r2, r2, #31
 800565e:	d501      	bpl.n	8005664 <_printf_float+0x154>
 8005660:	3301      	adds	r3, #1
 8005662:	6123      	str	r3, [r4, #16]
 8005664:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0a2      	beq.n	80055b2 <_printf_float+0xa2>
 800566c:	232d      	movs	r3, #45	@ 0x2d
 800566e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005672:	e79e      	b.n	80055b2 <_printf_float+0xa2>
 8005674:	9a06      	ldr	r2, [sp, #24]
 8005676:	2a47      	cmp	r2, #71	@ 0x47
 8005678:	d1c2      	bne.n	8005600 <_printf_float+0xf0>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1c0      	bne.n	8005600 <_printf_float+0xf0>
 800567e:	2301      	movs	r3, #1
 8005680:	e7bd      	b.n	80055fe <_printf_float+0xee>
 8005682:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005686:	d9db      	bls.n	8005640 <_printf_float+0x130>
 8005688:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800568c:	d118      	bne.n	80056c0 <_printf_float+0x1b0>
 800568e:	2900      	cmp	r1, #0
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	dd0b      	ble.n	80056ac <_printf_float+0x19c>
 8005694:	6121      	str	r1, [r4, #16]
 8005696:	b913      	cbnz	r3, 800569e <_printf_float+0x18e>
 8005698:	6822      	ldr	r2, [r4, #0]
 800569a:	07d0      	lsls	r0, r2, #31
 800569c:	d502      	bpl.n	80056a4 <_printf_float+0x194>
 800569e:	3301      	adds	r3, #1
 80056a0:	440b      	add	r3, r1
 80056a2:	6123      	str	r3, [r4, #16]
 80056a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80056a6:	f04f 0900 	mov.w	r9, #0
 80056aa:	e7db      	b.n	8005664 <_printf_float+0x154>
 80056ac:	b913      	cbnz	r3, 80056b4 <_printf_float+0x1a4>
 80056ae:	6822      	ldr	r2, [r4, #0]
 80056b0:	07d2      	lsls	r2, r2, #31
 80056b2:	d501      	bpl.n	80056b8 <_printf_float+0x1a8>
 80056b4:	3302      	adds	r3, #2
 80056b6:	e7f4      	b.n	80056a2 <_printf_float+0x192>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e7f2      	b.n	80056a2 <_printf_float+0x192>
 80056bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80056c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056c2:	4299      	cmp	r1, r3
 80056c4:	db05      	blt.n	80056d2 <_printf_float+0x1c2>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	6121      	str	r1, [r4, #16]
 80056ca:	07d8      	lsls	r0, r3, #31
 80056cc:	d5ea      	bpl.n	80056a4 <_printf_float+0x194>
 80056ce:	1c4b      	adds	r3, r1, #1
 80056d0:	e7e7      	b.n	80056a2 <_printf_float+0x192>
 80056d2:	2900      	cmp	r1, #0
 80056d4:	bfd4      	ite	le
 80056d6:	f1c1 0202 	rsble	r2, r1, #2
 80056da:	2201      	movgt	r2, #1
 80056dc:	4413      	add	r3, r2
 80056de:	e7e0      	b.n	80056a2 <_printf_float+0x192>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	055a      	lsls	r2, r3, #21
 80056e4:	d407      	bmi.n	80056f6 <_printf_float+0x1e6>
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	4642      	mov	r2, r8
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	d12b      	bne.n	800574c <_printf_float+0x23c>
 80056f4:	e767      	b.n	80055c6 <_printf_float+0xb6>
 80056f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056fa:	f240 80dd 	bls.w	80058b8 <_printf_float+0x3a8>
 80056fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005702:	2200      	movs	r2, #0
 8005704:	2300      	movs	r3, #0
 8005706:	f7fb f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800570a:	2800      	cmp	r0, #0
 800570c:	d033      	beq.n	8005776 <_printf_float+0x266>
 800570e:	4a37      	ldr	r2, [pc, #220]	@ (80057ec <_printf_float+0x2dc>)
 8005710:	2301      	movs	r3, #1
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f af54 	beq.w	80055c6 <_printf_float+0xb6>
 800571e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005722:	4543      	cmp	r3, r8
 8005724:	db02      	blt.n	800572c <_printf_float+0x21c>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	07d8      	lsls	r0, r3, #31
 800572a:	d50f      	bpl.n	800574c <_printf_float+0x23c>
 800572c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	f43f af45 	beq.w	80055c6 <_printf_float+0xb6>
 800573c:	f04f 0900 	mov.w	r9, #0
 8005740:	f108 38ff 	add.w	r8, r8, #4294967295
 8005744:	f104 0a1a 	add.w	sl, r4, #26
 8005748:	45c8      	cmp	r8, r9
 800574a:	dc09      	bgt.n	8005760 <_printf_float+0x250>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	079b      	lsls	r3, r3, #30
 8005750:	f100 8103 	bmi.w	800595a <_printf_float+0x44a>
 8005754:	68e0      	ldr	r0, [r4, #12]
 8005756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005758:	4298      	cmp	r0, r3
 800575a:	bfb8      	it	lt
 800575c:	4618      	movlt	r0, r3
 800575e:	e734      	b.n	80055ca <_printf_float+0xba>
 8005760:	2301      	movs	r3, #1
 8005762:	4652      	mov	r2, sl
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f af2b 	beq.w	80055c6 <_printf_float+0xb6>
 8005770:	f109 0901 	add.w	r9, r9, #1
 8005774:	e7e8      	b.n	8005748 <_printf_float+0x238>
 8005776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	dc39      	bgt.n	80057f0 <_printf_float+0x2e0>
 800577c:	4a1b      	ldr	r2, [pc, #108]	@ (80057ec <_printf_float+0x2dc>)
 800577e:	2301      	movs	r3, #1
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	f43f af1d 	beq.w	80055c6 <_printf_float+0xb6>
 800578c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005790:	ea59 0303 	orrs.w	r3, r9, r3
 8005794:	d102      	bne.n	800579c <_printf_float+0x28c>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	07d9      	lsls	r1, r3, #31
 800579a:	d5d7      	bpl.n	800574c <_printf_float+0x23c>
 800579c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	f43f af0d 	beq.w	80055c6 <_printf_float+0xb6>
 80057ac:	f04f 0a00 	mov.w	sl, #0
 80057b0:	f104 0b1a 	add.w	fp, r4, #26
 80057b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b6:	425b      	negs	r3, r3
 80057b8:	4553      	cmp	r3, sl
 80057ba:	dc01      	bgt.n	80057c0 <_printf_float+0x2b0>
 80057bc:	464b      	mov	r3, r9
 80057be:	e793      	b.n	80056e8 <_printf_float+0x1d8>
 80057c0:	2301      	movs	r3, #1
 80057c2:	465a      	mov	r2, fp
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b8      	blx	r7
 80057ca:	3001      	adds	r0, #1
 80057cc:	f43f aefb 	beq.w	80055c6 <_printf_float+0xb6>
 80057d0:	f10a 0a01 	add.w	sl, sl, #1
 80057d4:	e7ee      	b.n	80057b4 <_printf_float+0x2a4>
 80057d6:	bf00      	nop
 80057d8:	7fefffff 	.word	0x7fefffff
 80057dc:	08009bb8 	.word	0x08009bb8
 80057e0:	08009bbc 	.word	0x08009bbc
 80057e4:	08009bc0 	.word	0x08009bc0
 80057e8:	08009bc4 	.word	0x08009bc4
 80057ec:	08009bc8 	.word	0x08009bc8
 80057f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057f6:	4553      	cmp	r3, sl
 80057f8:	bfa8      	it	ge
 80057fa:	4653      	movge	r3, sl
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	4699      	mov	r9, r3
 8005800:	dc36      	bgt.n	8005870 <_printf_float+0x360>
 8005802:	f04f 0b00 	mov.w	fp, #0
 8005806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800580a:	f104 021a 	add.w	r2, r4, #26
 800580e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005810:	9306      	str	r3, [sp, #24]
 8005812:	eba3 0309 	sub.w	r3, r3, r9
 8005816:	455b      	cmp	r3, fp
 8005818:	dc31      	bgt.n	800587e <_printf_float+0x36e>
 800581a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581c:	459a      	cmp	sl, r3
 800581e:	dc3a      	bgt.n	8005896 <_printf_float+0x386>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	07da      	lsls	r2, r3, #31
 8005824:	d437      	bmi.n	8005896 <_printf_float+0x386>
 8005826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005828:	ebaa 0903 	sub.w	r9, sl, r3
 800582c:	9b06      	ldr	r3, [sp, #24]
 800582e:	ebaa 0303 	sub.w	r3, sl, r3
 8005832:	4599      	cmp	r9, r3
 8005834:	bfa8      	it	ge
 8005836:	4699      	movge	r9, r3
 8005838:	f1b9 0f00 	cmp.w	r9, #0
 800583c:	dc33      	bgt.n	80058a6 <_printf_float+0x396>
 800583e:	f04f 0800 	mov.w	r8, #0
 8005842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005846:	f104 0b1a 	add.w	fp, r4, #26
 800584a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800584c:	ebaa 0303 	sub.w	r3, sl, r3
 8005850:	eba3 0309 	sub.w	r3, r3, r9
 8005854:	4543      	cmp	r3, r8
 8005856:	f77f af79 	ble.w	800574c <_printf_float+0x23c>
 800585a:	2301      	movs	r3, #1
 800585c:	465a      	mov	r2, fp
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	f43f aeae 	beq.w	80055c6 <_printf_float+0xb6>
 800586a:	f108 0801 	add.w	r8, r8, #1
 800586e:	e7ec      	b.n	800584a <_printf_float+0x33a>
 8005870:	4642      	mov	r2, r8
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	d1c2      	bne.n	8005802 <_printf_float+0x2f2>
 800587c:	e6a3      	b.n	80055c6 <_printf_float+0xb6>
 800587e:	2301      	movs	r3, #1
 8005880:	4631      	mov	r1, r6
 8005882:	4628      	mov	r0, r5
 8005884:	9206      	str	r2, [sp, #24]
 8005886:	47b8      	blx	r7
 8005888:	3001      	adds	r0, #1
 800588a:	f43f ae9c 	beq.w	80055c6 <_printf_float+0xb6>
 800588e:	9a06      	ldr	r2, [sp, #24]
 8005890:	f10b 0b01 	add.w	fp, fp, #1
 8005894:	e7bb      	b.n	800580e <_printf_float+0x2fe>
 8005896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800589a:	4631      	mov	r1, r6
 800589c:	4628      	mov	r0, r5
 800589e:	47b8      	blx	r7
 80058a0:	3001      	adds	r0, #1
 80058a2:	d1c0      	bne.n	8005826 <_printf_float+0x316>
 80058a4:	e68f      	b.n	80055c6 <_printf_float+0xb6>
 80058a6:	9a06      	ldr	r2, [sp, #24]
 80058a8:	464b      	mov	r3, r9
 80058aa:	4442      	add	r2, r8
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	d1c3      	bne.n	800583e <_printf_float+0x32e>
 80058b6:	e686      	b.n	80055c6 <_printf_float+0xb6>
 80058b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058bc:	f1ba 0f01 	cmp.w	sl, #1
 80058c0:	dc01      	bgt.n	80058c6 <_printf_float+0x3b6>
 80058c2:	07db      	lsls	r3, r3, #31
 80058c4:	d536      	bpl.n	8005934 <_printf_float+0x424>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4642      	mov	r2, r8
 80058ca:	4631      	mov	r1, r6
 80058cc:	4628      	mov	r0, r5
 80058ce:	47b8      	blx	r7
 80058d0:	3001      	adds	r0, #1
 80058d2:	f43f ae78 	beq.w	80055c6 <_printf_float+0xb6>
 80058d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058da:	4631      	mov	r1, r6
 80058dc:	4628      	mov	r0, r5
 80058de:	47b8      	blx	r7
 80058e0:	3001      	adds	r0, #1
 80058e2:	f43f ae70 	beq.w	80055c6 <_printf_float+0xb6>
 80058e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058ea:	2200      	movs	r2, #0
 80058ec:	2300      	movs	r3, #0
 80058ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058f2:	f7fb f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f6:	b9c0      	cbnz	r0, 800592a <_printf_float+0x41a>
 80058f8:	4653      	mov	r3, sl
 80058fa:	f108 0201 	add.w	r2, r8, #1
 80058fe:	4631      	mov	r1, r6
 8005900:	4628      	mov	r0, r5
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	d10c      	bne.n	8005922 <_printf_float+0x412>
 8005908:	e65d      	b.n	80055c6 <_printf_float+0xb6>
 800590a:	2301      	movs	r3, #1
 800590c:	465a      	mov	r2, fp
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	f43f ae56 	beq.w	80055c6 <_printf_float+0xb6>
 800591a:	f108 0801 	add.w	r8, r8, #1
 800591e:	45d0      	cmp	r8, sl
 8005920:	dbf3      	blt.n	800590a <_printf_float+0x3fa>
 8005922:	464b      	mov	r3, r9
 8005924:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005928:	e6df      	b.n	80056ea <_printf_float+0x1da>
 800592a:	f04f 0800 	mov.w	r8, #0
 800592e:	f104 0b1a 	add.w	fp, r4, #26
 8005932:	e7f4      	b.n	800591e <_printf_float+0x40e>
 8005934:	2301      	movs	r3, #1
 8005936:	4642      	mov	r2, r8
 8005938:	e7e1      	b.n	80058fe <_printf_float+0x3ee>
 800593a:	2301      	movs	r3, #1
 800593c:	464a      	mov	r2, r9
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	f43f ae3e 	beq.w	80055c6 <_printf_float+0xb6>
 800594a:	f108 0801 	add.w	r8, r8, #1
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005952:	1a5b      	subs	r3, r3, r1
 8005954:	4543      	cmp	r3, r8
 8005956:	dcf0      	bgt.n	800593a <_printf_float+0x42a>
 8005958:	e6fc      	b.n	8005754 <_printf_float+0x244>
 800595a:	f04f 0800 	mov.w	r8, #0
 800595e:	f104 0919 	add.w	r9, r4, #25
 8005962:	e7f4      	b.n	800594e <_printf_float+0x43e>

08005964 <_printf_common>:
 8005964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	4616      	mov	r6, r2
 800596a:	4698      	mov	r8, r3
 800596c:	688a      	ldr	r2, [r1, #8]
 800596e:	690b      	ldr	r3, [r1, #16]
 8005970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005974:	4293      	cmp	r3, r2
 8005976:	bfb8      	it	lt
 8005978:	4613      	movlt	r3, r2
 800597a:	6033      	str	r3, [r6, #0]
 800597c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005980:	4607      	mov	r7, r0
 8005982:	460c      	mov	r4, r1
 8005984:	b10a      	cbz	r2, 800598a <_printf_common+0x26>
 8005986:	3301      	adds	r3, #1
 8005988:	6033      	str	r3, [r6, #0]
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	0699      	lsls	r1, r3, #26
 800598e:	bf42      	ittt	mi
 8005990:	6833      	ldrmi	r3, [r6, #0]
 8005992:	3302      	addmi	r3, #2
 8005994:	6033      	strmi	r3, [r6, #0]
 8005996:	6825      	ldr	r5, [r4, #0]
 8005998:	f015 0506 	ands.w	r5, r5, #6
 800599c:	d106      	bne.n	80059ac <_printf_common+0x48>
 800599e:	f104 0a19 	add.w	sl, r4, #25
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	6832      	ldr	r2, [r6, #0]
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	42ab      	cmp	r3, r5
 80059aa:	dc26      	bgt.n	80059fa <_printf_common+0x96>
 80059ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059b0:	6822      	ldr	r2, [r4, #0]
 80059b2:	3b00      	subs	r3, #0
 80059b4:	bf18      	it	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	0692      	lsls	r2, r2, #26
 80059ba:	d42b      	bmi.n	8005a14 <_printf_common+0xb0>
 80059bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059c0:	4641      	mov	r1, r8
 80059c2:	4638      	mov	r0, r7
 80059c4:	47c8      	blx	r9
 80059c6:	3001      	adds	r0, #1
 80059c8:	d01e      	beq.n	8005a08 <_printf_common+0xa4>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	6922      	ldr	r2, [r4, #16]
 80059ce:	f003 0306 	and.w	r3, r3, #6
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	bf02      	ittt	eq
 80059d6:	68e5      	ldreq	r5, [r4, #12]
 80059d8:	6833      	ldreq	r3, [r6, #0]
 80059da:	1aed      	subeq	r5, r5, r3
 80059dc:	68a3      	ldr	r3, [r4, #8]
 80059de:	bf0c      	ite	eq
 80059e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e4:	2500      	movne	r5, #0
 80059e6:	4293      	cmp	r3, r2
 80059e8:	bfc4      	itt	gt
 80059ea:	1a9b      	subgt	r3, r3, r2
 80059ec:	18ed      	addgt	r5, r5, r3
 80059ee:	2600      	movs	r6, #0
 80059f0:	341a      	adds	r4, #26
 80059f2:	42b5      	cmp	r5, r6
 80059f4:	d11a      	bne.n	8005a2c <_printf_common+0xc8>
 80059f6:	2000      	movs	r0, #0
 80059f8:	e008      	b.n	8005a0c <_printf_common+0xa8>
 80059fa:	2301      	movs	r3, #1
 80059fc:	4652      	mov	r2, sl
 80059fe:	4641      	mov	r1, r8
 8005a00:	4638      	mov	r0, r7
 8005a02:	47c8      	blx	r9
 8005a04:	3001      	adds	r0, #1
 8005a06:	d103      	bne.n	8005a10 <_printf_common+0xac>
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a10:	3501      	adds	r5, #1
 8005a12:	e7c6      	b.n	80059a2 <_printf_common+0x3e>
 8005a14:	18e1      	adds	r1, r4, r3
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	2030      	movs	r0, #48	@ 0x30
 8005a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a1e:	4422      	add	r2, r4
 8005a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a28:	3302      	adds	r3, #2
 8005a2a:	e7c7      	b.n	80059bc <_printf_common+0x58>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4622      	mov	r2, r4
 8005a30:	4641      	mov	r1, r8
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c8      	blx	r9
 8005a36:	3001      	adds	r0, #1
 8005a38:	d0e6      	beq.n	8005a08 <_printf_common+0xa4>
 8005a3a:	3601      	adds	r6, #1
 8005a3c:	e7d9      	b.n	80059f2 <_printf_common+0x8e>
	...

08005a40 <_printf_i>:
 8005a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	7e0f      	ldrb	r7, [r1, #24]
 8005a46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a48:	2f78      	cmp	r7, #120	@ 0x78
 8005a4a:	4691      	mov	r9, r2
 8005a4c:	4680      	mov	r8, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	469a      	mov	sl, r3
 8005a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a56:	d807      	bhi.n	8005a68 <_printf_i+0x28>
 8005a58:	2f62      	cmp	r7, #98	@ 0x62
 8005a5a:	d80a      	bhi.n	8005a72 <_printf_i+0x32>
 8005a5c:	2f00      	cmp	r7, #0
 8005a5e:	f000 80d2 	beq.w	8005c06 <_printf_i+0x1c6>
 8005a62:	2f58      	cmp	r7, #88	@ 0x58
 8005a64:	f000 80b9 	beq.w	8005bda <_printf_i+0x19a>
 8005a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a70:	e03a      	b.n	8005ae8 <_printf_i+0xa8>
 8005a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a76:	2b15      	cmp	r3, #21
 8005a78:	d8f6      	bhi.n	8005a68 <_printf_i+0x28>
 8005a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a80 <_printf_i+0x40>)
 8005a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a80:	08005ad9 	.word	0x08005ad9
 8005a84:	08005aed 	.word	0x08005aed
 8005a88:	08005a69 	.word	0x08005a69
 8005a8c:	08005a69 	.word	0x08005a69
 8005a90:	08005a69 	.word	0x08005a69
 8005a94:	08005a69 	.word	0x08005a69
 8005a98:	08005aed 	.word	0x08005aed
 8005a9c:	08005a69 	.word	0x08005a69
 8005aa0:	08005a69 	.word	0x08005a69
 8005aa4:	08005a69 	.word	0x08005a69
 8005aa8:	08005a69 	.word	0x08005a69
 8005aac:	08005bed 	.word	0x08005bed
 8005ab0:	08005b17 	.word	0x08005b17
 8005ab4:	08005ba7 	.word	0x08005ba7
 8005ab8:	08005a69 	.word	0x08005a69
 8005abc:	08005a69 	.word	0x08005a69
 8005ac0:	08005c0f 	.word	0x08005c0f
 8005ac4:	08005a69 	.word	0x08005a69
 8005ac8:	08005b17 	.word	0x08005b17
 8005acc:	08005a69 	.word	0x08005a69
 8005ad0:	08005a69 	.word	0x08005a69
 8005ad4:	08005baf 	.word	0x08005baf
 8005ad8:	6833      	ldr	r3, [r6, #0]
 8005ada:	1d1a      	adds	r2, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6032      	str	r2, [r6, #0]
 8005ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e09d      	b.n	8005c28 <_printf_i+0x1e8>
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	1d19      	adds	r1, r3, #4
 8005af2:	6031      	str	r1, [r6, #0]
 8005af4:	0606      	lsls	r6, r0, #24
 8005af6:	d501      	bpl.n	8005afc <_printf_i+0xbc>
 8005af8:	681d      	ldr	r5, [r3, #0]
 8005afa:	e003      	b.n	8005b04 <_printf_i+0xc4>
 8005afc:	0645      	lsls	r5, r0, #25
 8005afe:	d5fb      	bpl.n	8005af8 <_printf_i+0xb8>
 8005b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b04:	2d00      	cmp	r5, #0
 8005b06:	da03      	bge.n	8005b10 <_printf_i+0xd0>
 8005b08:	232d      	movs	r3, #45	@ 0x2d
 8005b0a:	426d      	negs	r5, r5
 8005b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b10:	4859      	ldr	r0, [pc, #356]	@ (8005c78 <_printf_i+0x238>)
 8005b12:	230a      	movs	r3, #10
 8005b14:	e011      	b.n	8005b3a <_printf_i+0xfa>
 8005b16:	6821      	ldr	r1, [r4, #0]
 8005b18:	6833      	ldr	r3, [r6, #0]
 8005b1a:	0608      	lsls	r0, r1, #24
 8005b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b20:	d402      	bmi.n	8005b28 <_printf_i+0xe8>
 8005b22:	0649      	lsls	r1, r1, #25
 8005b24:	bf48      	it	mi
 8005b26:	b2ad      	uxthmi	r5, r5
 8005b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b2a:	4853      	ldr	r0, [pc, #332]	@ (8005c78 <_printf_i+0x238>)
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	bf14      	ite	ne
 8005b30:	230a      	movne	r3, #10
 8005b32:	2308      	moveq	r3, #8
 8005b34:	2100      	movs	r1, #0
 8005b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b3a:	6866      	ldr	r6, [r4, #4]
 8005b3c:	60a6      	str	r6, [r4, #8]
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	bfa2      	ittt	ge
 8005b42:	6821      	ldrge	r1, [r4, #0]
 8005b44:	f021 0104 	bicge.w	r1, r1, #4
 8005b48:	6021      	strge	r1, [r4, #0]
 8005b4a:	b90d      	cbnz	r5, 8005b50 <_printf_i+0x110>
 8005b4c:	2e00      	cmp	r6, #0
 8005b4e:	d04b      	beq.n	8005be8 <_printf_i+0x1a8>
 8005b50:	4616      	mov	r6, r2
 8005b52:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b56:	fb03 5711 	mls	r7, r3, r1, r5
 8005b5a:	5dc7      	ldrb	r7, [r0, r7]
 8005b5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b60:	462f      	mov	r7, r5
 8005b62:	42bb      	cmp	r3, r7
 8005b64:	460d      	mov	r5, r1
 8005b66:	d9f4      	bls.n	8005b52 <_printf_i+0x112>
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d10b      	bne.n	8005b84 <_printf_i+0x144>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	07df      	lsls	r7, r3, #31
 8005b70:	d508      	bpl.n	8005b84 <_printf_i+0x144>
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	6861      	ldr	r1, [r4, #4]
 8005b76:	4299      	cmp	r1, r3
 8005b78:	bfde      	ittt	le
 8005b7a:	2330      	movle	r3, #48	@ 0x30
 8005b7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b84:	1b92      	subs	r2, r2, r6
 8005b86:	6122      	str	r2, [r4, #16]
 8005b88:	f8cd a000 	str.w	sl, [sp]
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	aa03      	add	r2, sp, #12
 8005b90:	4621      	mov	r1, r4
 8005b92:	4640      	mov	r0, r8
 8005b94:	f7ff fee6 	bl	8005964 <_printf_common>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d14a      	bne.n	8005c32 <_printf_i+0x1f2>
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	b004      	add	sp, #16
 8005ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	f043 0320 	orr.w	r3, r3, #32
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	4833      	ldr	r0, [pc, #204]	@ (8005c7c <_printf_i+0x23c>)
 8005bb0:	2778      	movs	r7, #120	@ 0x78
 8005bb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	6831      	ldr	r1, [r6, #0]
 8005bba:	061f      	lsls	r7, r3, #24
 8005bbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bc0:	d402      	bmi.n	8005bc8 <_printf_i+0x188>
 8005bc2:	065f      	lsls	r7, r3, #25
 8005bc4:	bf48      	it	mi
 8005bc6:	b2ad      	uxthmi	r5, r5
 8005bc8:	6031      	str	r1, [r6, #0]
 8005bca:	07d9      	lsls	r1, r3, #31
 8005bcc:	bf44      	itt	mi
 8005bce:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd2:	6023      	strmi	r3, [r4, #0]
 8005bd4:	b11d      	cbz	r5, 8005bde <_printf_i+0x19e>
 8005bd6:	2310      	movs	r3, #16
 8005bd8:	e7ac      	b.n	8005b34 <_printf_i+0xf4>
 8005bda:	4827      	ldr	r0, [pc, #156]	@ (8005c78 <_printf_i+0x238>)
 8005bdc:	e7e9      	b.n	8005bb2 <_printf_i+0x172>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	f023 0320 	bic.w	r3, r3, #32
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	e7f6      	b.n	8005bd6 <_printf_i+0x196>
 8005be8:	4616      	mov	r6, r2
 8005bea:	e7bd      	b.n	8005b68 <_printf_i+0x128>
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	6961      	ldr	r1, [r4, #20]
 8005bf2:	1d18      	adds	r0, r3, #4
 8005bf4:	6030      	str	r0, [r6, #0]
 8005bf6:	062e      	lsls	r6, r5, #24
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	d501      	bpl.n	8005c00 <_printf_i+0x1c0>
 8005bfc:	6019      	str	r1, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <_printf_i+0x1c6>
 8005c00:	0668      	lsls	r0, r5, #25
 8005c02:	d5fb      	bpl.n	8005bfc <_printf_i+0x1bc>
 8005c04:	8019      	strh	r1, [r3, #0]
 8005c06:	2300      	movs	r3, #0
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	4616      	mov	r6, r2
 8005c0c:	e7bc      	b.n	8005b88 <_printf_i+0x148>
 8005c0e:	6833      	ldr	r3, [r6, #0]
 8005c10:	1d1a      	adds	r2, r3, #4
 8005c12:	6032      	str	r2, [r6, #0]
 8005c14:	681e      	ldr	r6, [r3, #0]
 8005c16:	6862      	ldr	r2, [r4, #4]
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f7fa fad8 	bl	80001d0 <memchr>
 8005c20:	b108      	cbz	r0, 8005c26 <_printf_i+0x1e6>
 8005c22:	1b80      	subs	r0, r0, r6
 8005c24:	6060      	str	r0, [r4, #4]
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	6123      	str	r3, [r4, #16]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c30:	e7aa      	b.n	8005b88 <_printf_i+0x148>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	4632      	mov	r2, r6
 8005c36:	4649      	mov	r1, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	47d0      	blx	sl
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d0ad      	beq.n	8005b9c <_printf_i+0x15c>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	079b      	lsls	r3, r3, #30
 8005c44:	d413      	bmi.n	8005c6e <_printf_i+0x22e>
 8005c46:	68e0      	ldr	r0, [r4, #12]
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	4298      	cmp	r0, r3
 8005c4c:	bfb8      	it	lt
 8005c4e:	4618      	movlt	r0, r3
 8005c50:	e7a6      	b.n	8005ba0 <_printf_i+0x160>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4632      	mov	r2, r6
 8005c56:	4649      	mov	r1, r9
 8005c58:	4640      	mov	r0, r8
 8005c5a:	47d0      	blx	sl
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d09d      	beq.n	8005b9c <_printf_i+0x15c>
 8005c60:	3501      	adds	r5, #1
 8005c62:	68e3      	ldr	r3, [r4, #12]
 8005c64:	9903      	ldr	r1, [sp, #12]
 8005c66:	1a5b      	subs	r3, r3, r1
 8005c68:	42ab      	cmp	r3, r5
 8005c6a:	dcf2      	bgt.n	8005c52 <_printf_i+0x212>
 8005c6c:	e7eb      	b.n	8005c46 <_printf_i+0x206>
 8005c6e:	2500      	movs	r5, #0
 8005c70:	f104 0619 	add.w	r6, r4, #25
 8005c74:	e7f5      	b.n	8005c62 <_printf_i+0x222>
 8005c76:	bf00      	nop
 8005c78:	08009bca 	.word	0x08009bca
 8005c7c:	08009bdb 	.word	0x08009bdb

08005c80 <_scanf_float>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	b087      	sub	sp, #28
 8005c86:	4617      	mov	r7, r2
 8005c88:	9303      	str	r3, [sp, #12]
 8005c8a:	688b      	ldr	r3, [r1, #8]
 8005c8c:	1e5a      	subs	r2, r3, #1
 8005c8e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c92:	bf81      	itttt	hi
 8005c94:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c98:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c9c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005ca0:	608b      	strhi	r3, [r1, #8]
 8005ca2:	680b      	ldr	r3, [r1, #0]
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	f04f 0500 	mov.w	r5, #0
 8005caa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005cae:	f842 3b1c 	str.w	r3, [r2], #28
 8005cb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005cb6:	4680      	mov	r8, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	bf98      	it	ls
 8005cbc:	f04f 0b00 	movls.w	fp, #0
 8005cc0:	9201      	str	r2, [sp, #4]
 8005cc2:	4616      	mov	r6, r2
 8005cc4:	46aa      	mov	sl, r5
 8005cc6:	46a9      	mov	r9, r5
 8005cc8:	9502      	str	r5, [sp, #8]
 8005cca:	68a2      	ldr	r2, [r4, #8]
 8005ccc:	b152      	cbz	r2, 8005ce4 <_scanf_float+0x64>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b4e      	cmp	r3, #78	@ 0x4e
 8005cd4:	d864      	bhi.n	8005da0 <_scanf_float+0x120>
 8005cd6:	2b40      	cmp	r3, #64	@ 0x40
 8005cd8:	d83c      	bhi.n	8005d54 <_scanf_float+0xd4>
 8005cda:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005cde:	b2c8      	uxtb	r0, r1
 8005ce0:	280e      	cmp	r0, #14
 8005ce2:	d93a      	bls.n	8005d5a <_scanf_float+0xda>
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	d003      	beq.n	8005cf2 <_scanf_float+0x72>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cf6:	f1ba 0f01 	cmp.w	sl, #1
 8005cfa:	f200 8117 	bhi.w	8005f2c <_scanf_float+0x2ac>
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	429e      	cmp	r6, r3
 8005d02:	f200 8108 	bhi.w	8005f16 <_scanf_float+0x296>
 8005d06:	2001      	movs	r0, #1
 8005d08:	b007      	add	sp, #28
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005d12:	2a0d      	cmp	r2, #13
 8005d14:	d8e6      	bhi.n	8005ce4 <_scanf_float+0x64>
 8005d16:	a101      	add	r1, pc, #4	@ (adr r1, 8005d1c <_scanf_float+0x9c>)
 8005d18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d1c:	08005e63 	.word	0x08005e63
 8005d20:	08005ce5 	.word	0x08005ce5
 8005d24:	08005ce5 	.word	0x08005ce5
 8005d28:	08005ce5 	.word	0x08005ce5
 8005d2c:	08005ec3 	.word	0x08005ec3
 8005d30:	08005e9b 	.word	0x08005e9b
 8005d34:	08005ce5 	.word	0x08005ce5
 8005d38:	08005ce5 	.word	0x08005ce5
 8005d3c:	08005e71 	.word	0x08005e71
 8005d40:	08005ce5 	.word	0x08005ce5
 8005d44:	08005ce5 	.word	0x08005ce5
 8005d48:	08005ce5 	.word	0x08005ce5
 8005d4c:	08005ce5 	.word	0x08005ce5
 8005d50:	08005e29 	.word	0x08005e29
 8005d54:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005d58:	e7db      	b.n	8005d12 <_scanf_float+0x92>
 8005d5a:	290e      	cmp	r1, #14
 8005d5c:	d8c2      	bhi.n	8005ce4 <_scanf_float+0x64>
 8005d5e:	a001      	add	r0, pc, #4	@ (adr r0, 8005d64 <_scanf_float+0xe4>)
 8005d60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d64:	08005e19 	.word	0x08005e19
 8005d68:	08005ce5 	.word	0x08005ce5
 8005d6c:	08005e19 	.word	0x08005e19
 8005d70:	08005eaf 	.word	0x08005eaf
 8005d74:	08005ce5 	.word	0x08005ce5
 8005d78:	08005dc1 	.word	0x08005dc1
 8005d7c:	08005dff 	.word	0x08005dff
 8005d80:	08005dff 	.word	0x08005dff
 8005d84:	08005dff 	.word	0x08005dff
 8005d88:	08005dff 	.word	0x08005dff
 8005d8c:	08005dff 	.word	0x08005dff
 8005d90:	08005dff 	.word	0x08005dff
 8005d94:	08005dff 	.word	0x08005dff
 8005d98:	08005dff 	.word	0x08005dff
 8005d9c:	08005dff 	.word	0x08005dff
 8005da0:	2b6e      	cmp	r3, #110	@ 0x6e
 8005da2:	d809      	bhi.n	8005db8 <_scanf_float+0x138>
 8005da4:	2b60      	cmp	r3, #96	@ 0x60
 8005da6:	d8b2      	bhi.n	8005d0e <_scanf_float+0x8e>
 8005da8:	2b54      	cmp	r3, #84	@ 0x54
 8005daa:	d07b      	beq.n	8005ea4 <_scanf_float+0x224>
 8005dac:	2b59      	cmp	r3, #89	@ 0x59
 8005dae:	d199      	bne.n	8005ce4 <_scanf_float+0x64>
 8005db0:	2d07      	cmp	r5, #7
 8005db2:	d197      	bne.n	8005ce4 <_scanf_float+0x64>
 8005db4:	2508      	movs	r5, #8
 8005db6:	e02c      	b.n	8005e12 <_scanf_float+0x192>
 8005db8:	2b74      	cmp	r3, #116	@ 0x74
 8005dba:	d073      	beq.n	8005ea4 <_scanf_float+0x224>
 8005dbc:	2b79      	cmp	r3, #121	@ 0x79
 8005dbe:	e7f6      	b.n	8005dae <_scanf_float+0x12e>
 8005dc0:	6821      	ldr	r1, [r4, #0]
 8005dc2:	05c8      	lsls	r0, r1, #23
 8005dc4:	d51b      	bpl.n	8005dfe <_scanf_float+0x17e>
 8005dc6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005dca:	6021      	str	r1, [r4, #0]
 8005dcc:	f109 0901 	add.w	r9, r9, #1
 8005dd0:	f1bb 0f00 	cmp.w	fp, #0
 8005dd4:	d003      	beq.n	8005dde <_scanf_float+0x15e>
 8005dd6:	3201      	adds	r2, #1
 8005dd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ddc:	60a2      	str	r2, [r4, #8]
 8005dde:	68a3      	ldr	r3, [r4, #8]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	60a3      	str	r3, [r4, #8]
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	3301      	adds	r3, #1
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	f340 8087 	ble.w	8005f04 <_scanf_float+0x284>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	e765      	b.n	8005cca <_scanf_float+0x4a>
 8005dfe:	eb1a 0105 	adds.w	r1, sl, r5
 8005e02:	f47f af6f 	bne.w	8005ce4 <_scanf_float+0x64>
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	460d      	mov	r5, r1
 8005e10:	468a      	mov	sl, r1
 8005e12:	f806 3b01 	strb.w	r3, [r6], #1
 8005e16:	e7e2      	b.n	8005dde <_scanf_float+0x15e>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	0610      	lsls	r0, r2, #24
 8005e1c:	f57f af62 	bpl.w	8005ce4 <_scanf_float+0x64>
 8005e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e24:	6022      	str	r2, [r4, #0]
 8005e26:	e7f4      	b.n	8005e12 <_scanf_float+0x192>
 8005e28:	f1ba 0f00 	cmp.w	sl, #0
 8005e2c:	d10e      	bne.n	8005e4c <_scanf_float+0x1cc>
 8005e2e:	f1b9 0f00 	cmp.w	r9, #0
 8005e32:	d10e      	bne.n	8005e52 <_scanf_float+0x1d2>
 8005e34:	6822      	ldr	r2, [r4, #0]
 8005e36:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e3a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e3e:	d108      	bne.n	8005e52 <_scanf_float+0x1d2>
 8005e40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e44:	6022      	str	r2, [r4, #0]
 8005e46:	f04f 0a01 	mov.w	sl, #1
 8005e4a:	e7e2      	b.n	8005e12 <_scanf_float+0x192>
 8005e4c:	f1ba 0f02 	cmp.w	sl, #2
 8005e50:	d055      	beq.n	8005efe <_scanf_float+0x27e>
 8005e52:	2d01      	cmp	r5, #1
 8005e54:	d002      	beq.n	8005e5c <_scanf_float+0x1dc>
 8005e56:	2d04      	cmp	r5, #4
 8005e58:	f47f af44 	bne.w	8005ce4 <_scanf_float+0x64>
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	b2ed      	uxtb	r5, r5
 8005e60:	e7d7      	b.n	8005e12 <_scanf_float+0x192>
 8005e62:	f1ba 0f01 	cmp.w	sl, #1
 8005e66:	f47f af3d 	bne.w	8005ce4 <_scanf_float+0x64>
 8005e6a:	f04f 0a02 	mov.w	sl, #2
 8005e6e:	e7d0      	b.n	8005e12 <_scanf_float+0x192>
 8005e70:	b97d      	cbnz	r5, 8005e92 <_scanf_float+0x212>
 8005e72:	f1b9 0f00 	cmp.w	r9, #0
 8005e76:	f47f af38 	bne.w	8005cea <_scanf_float+0x6a>
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e84:	f040 8108 	bne.w	8006098 <_scanf_float+0x418>
 8005e88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e8c:	6022      	str	r2, [r4, #0]
 8005e8e:	2501      	movs	r5, #1
 8005e90:	e7bf      	b.n	8005e12 <_scanf_float+0x192>
 8005e92:	2d03      	cmp	r5, #3
 8005e94:	d0e2      	beq.n	8005e5c <_scanf_float+0x1dc>
 8005e96:	2d05      	cmp	r5, #5
 8005e98:	e7de      	b.n	8005e58 <_scanf_float+0x1d8>
 8005e9a:	2d02      	cmp	r5, #2
 8005e9c:	f47f af22 	bne.w	8005ce4 <_scanf_float+0x64>
 8005ea0:	2503      	movs	r5, #3
 8005ea2:	e7b6      	b.n	8005e12 <_scanf_float+0x192>
 8005ea4:	2d06      	cmp	r5, #6
 8005ea6:	f47f af1d 	bne.w	8005ce4 <_scanf_float+0x64>
 8005eaa:	2507      	movs	r5, #7
 8005eac:	e7b1      	b.n	8005e12 <_scanf_float+0x192>
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	0591      	lsls	r1, r2, #22
 8005eb2:	f57f af17 	bpl.w	8005ce4 <_scanf_float+0x64>
 8005eb6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005eba:	6022      	str	r2, [r4, #0]
 8005ebc:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ec0:	e7a7      	b.n	8005e12 <_scanf_float+0x192>
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ec8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ecc:	d006      	beq.n	8005edc <_scanf_float+0x25c>
 8005ece:	0550      	lsls	r0, r2, #21
 8005ed0:	f57f af08 	bpl.w	8005ce4 <_scanf_float+0x64>
 8005ed4:	f1b9 0f00 	cmp.w	r9, #0
 8005ed8:	f000 80de 	beq.w	8006098 <_scanf_float+0x418>
 8005edc:	0591      	lsls	r1, r2, #22
 8005ede:	bf58      	it	pl
 8005ee0:	9902      	ldrpl	r1, [sp, #8]
 8005ee2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ee6:	bf58      	it	pl
 8005ee8:	eba9 0101 	subpl.w	r1, r9, r1
 8005eec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005ef0:	bf58      	it	pl
 8005ef2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ef6:	6022      	str	r2, [r4, #0]
 8005ef8:	f04f 0900 	mov.w	r9, #0
 8005efc:	e789      	b.n	8005e12 <_scanf_float+0x192>
 8005efe:	f04f 0a03 	mov.w	sl, #3
 8005f02:	e786      	b.n	8005e12 <_scanf_float+0x192>
 8005f04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005f08:	4639      	mov	r1, r7
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	4798      	blx	r3
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f43f aedb 	beq.w	8005cca <_scanf_float+0x4a>
 8005f14:	e6e6      	b.n	8005ce4 <_scanf_float+0x64>
 8005f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f1e:	463a      	mov	r2, r7
 8005f20:	4640      	mov	r0, r8
 8005f22:	4798      	blx	r3
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	e6e8      	b.n	8005cfe <_scanf_float+0x7e>
 8005f2c:	1e6b      	subs	r3, r5, #1
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d824      	bhi.n	8005f7c <_scanf_float+0x2fc>
 8005f32:	2d02      	cmp	r5, #2
 8005f34:	d836      	bhi.n	8005fa4 <_scanf_float+0x324>
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	429e      	cmp	r6, r3
 8005f3a:	f67f aee4 	bls.w	8005d06 <_scanf_float+0x86>
 8005f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f46:	463a      	mov	r2, r7
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4798      	blx	r3
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	e7f0      	b.n	8005f36 <_scanf_float+0x2b6>
 8005f54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005f5c:	463a      	mov	r2, r7
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4798      	blx	r3
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	6123      	str	r3, [r4, #16]
 8005f68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f6c:	fa5f fa8a 	uxtb.w	sl, sl
 8005f70:	f1ba 0f02 	cmp.w	sl, #2
 8005f74:	d1ee      	bne.n	8005f54 <_scanf_float+0x2d4>
 8005f76:	3d03      	subs	r5, #3
 8005f78:	b2ed      	uxtb	r5, r5
 8005f7a:	1b76      	subs	r6, r6, r5
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	05da      	lsls	r2, r3, #23
 8005f80:	d530      	bpl.n	8005fe4 <_scanf_float+0x364>
 8005f82:	055b      	lsls	r3, r3, #21
 8005f84:	d511      	bpl.n	8005faa <_scanf_float+0x32a>
 8005f86:	9b01      	ldr	r3, [sp, #4]
 8005f88:	429e      	cmp	r6, r3
 8005f8a:	f67f aebc 	bls.w	8005d06 <_scanf_float+0x86>
 8005f8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f96:	463a      	mov	r2, r7
 8005f98:	4640      	mov	r0, r8
 8005f9a:	4798      	blx	r3
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	e7f0      	b.n	8005f86 <_scanf_float+0x306>
 8005fa4:	46aa      	mov	sl, r5
 8005fa6:	46b3      	mov	fp, r6
 8005fa8:	e7de      	b.n	8005f68 <_scanf_float+0x2e8>
 8005faa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	2965      	cmp	r1, #101	@ 0x65
 8005fb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fb6:	f106 35ff 	add.w	r5, r6, #4294967295
 8005fba:	6123      	str	r3, [r4, #16]
 8005fbc:	d00c      	beq.n	8005fd8 <_scanf_float+0x358>
 8005fbe:	2945      	cmp	r1, #69	@ 0x45
 8005fc0:	d00a      	beq.n	8005fd8 <_scanf_float+0x358>
 8005fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fc6:	463a      	mov	r2, r7
 8005fc8:	4640      	mov	r0, r8
 8005fca:	4798      	blx	r3
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	1eb5      	subs	r5, r6, #2
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fdc:	463a      	mov	r2, r7
 8005fde:	4640      	mov	r0, r8
 8005fe0:	4798      	blx	r3
 8005fe2:	462e      	mov	r6, r5
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	f012 0210 	ands.w	r2, r2, #16
 8005fea:	d001      	beq.n	8005ff0 <_scanf_float+0x370>
 8005fec:	2000      	movs	r0, #0
 8005fee:	e68b      	b.n	8005d08 <_scanf_float+0x88>
 8005ff0:	7032      	strb	r2, [r6, #0]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffc:	d11c      	bne.n	8006038 <_scanf_float+0x3b8>
 8005ffe:	9b02      	ldr	r3, [sp, #8]
 8006000:	454b      	cmp	r3, r9
 8006002:	eba3 0209 	sub.w	r2, r3, r9
 8006006:	d123      	bne.n	8006050 <_scanf_float+0x3d0>
 8006008:	9901      	ldr	r1, [sp, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	4640      	mov	r0, r8
 800600e:	f002 fc2b 	bl	8008868 <_strtod_r>
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	6821      	ldr	r1, [r4, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f011 0f02 	tst.w	r1, #2
 800601c:	ec57 6b10 	vmov	r6, r7, d0
 8006020:	f103 0204 	add.w	r2, r3, #4
 8006024:	d01f      	beq.n	8006066 <_scanf_float+0x3e6>
 8006026:	9903      	ldr	r1, [sp, #12]
 8006028:	600a      	str	r2, [r1, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	e9c3 6700 	strd	r6, r7, [r3]
 8006030:	68e3      	ldr	r3, [r4, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60e3      	str	r3, [r4, #12]
 8006036:	e7d9      	b.n	8005fec <_scanf_float+0x36c>
 8006038:	9b04      	ldr	r3, [sp, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0e4      	beq.n	8006008 <_scanf_float+0x388>
 800603e:	9905      	ldr	r1, [sp, #20]
 8006040:	230a      	movs	r3, #10
 8006042:	3101      	adds	r1, #1
 8006044:	4640      	mov	r0, r8
 8006046:	f002 fc8f 	bl	8008968 <_strtol_r>
 800604a:	9b04      	ldr	r3, [sp, #16]
 800604c:	9e05      	ldr	r6, [sp, #20]
 800604e:	1ac2      	subs	r2, r0, r3
 8006050:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006054:	429e      	cmp	r6, r3
 8006056:	bf28      	it	cs
 8006058:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800605c:	4910      	ldr	r1, [pc, #64]	@ (80060a0 <_scanf_float+0x420>)
 800605e:	4630      	mov	r0, r6
 8006060:	f000 f918 	bl	8006294 <siprintf>
 8006064:	e7d0      	b.n	8006008 <_scanf_float+0x388>
 8006066:	f011 0f04 	tst.w	r1, #4
 800606a:	9903      	ldr	r1, [sp, #12]
 800606c:	600a      	str	r2, [r1, #0]
 800606e:	d1dc      	bne.n	800602a <_scanf_float+0x3aa>
 8006070:	681d      	ldr	r5, [r3, #0]
 8006072:	4632      	mov	r2, r6
 8006074:	463b      	mov	r3, r7
 8006076:	4630      	mov	r0, r6
 8006078:	4639      	mov	r1, r7
 800607a:	f7fa fd57 	bl	8000b2c <__aeabi_dcmpun>
 800607e:	b128      	cbz	r0, 800608c <_scanf_float+0x40c>
 8006080:	4808      	ldr	r0, [pc, #32]	@ (80060a4 <_scanf_float+0x424>)
 8006082:	f000 f9eb 	bl	800645c <nanf>
 8006086:	ed85 0a00 	vstr	s0, [r5]
 800608a:	e7d1      	b.n	8006030 <_scanf_float+0x3b0>
 800608c:	4630      	mov	r0, r6
 800608e:	4639      	mov	r1, r7
 8006090:	f7fa fdaa 	bl	8000be8 <__aeabi_d2f>
 8006094:	6028      	str	r0, [r5, #0]
 8006096:	e7cb      	b.n	8006030 <_scanf_float+0x3b0>
 8006098:	f04f 0900 	mov.w	r9, #0
 800609c:	e629      	b.n	8005cf2 <_scanf_float+0x72>
 800609e:	bf00      	nop
 80060a0:	08009bec 	.word	0x08009bec
 80060a4:	08009f85 	.word	0x08009f85

080060a8 <std>:
 80060a8:	2300      	movs	r3, #0
 80060aa:	b510      	push	{r4, lr}
 80060ac:	4604      	mov	r4, r0
 80060ae:	e9c0 3300 	strd	r3, r3, [r0]
 80060b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060b6:	6083      	str	r3, [r0, #8]
 80060b8:	8181      	strh	r1, [r0, #12]
 80060ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80060bc:	81c2      	strh	r2, [r0, #14]
 80060be:	6183      	str	r3, [r0, #24]
 80060c0:	4619      	mov	r1, r3
 80060c2:	2208      	movs	r2, #8
 80060c4:	305c      	adds	r0, #92	@ 0x5c
 80060c6:	f000 f948 	bl	800635a <memset>
 80060ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006100 <std+0x58>)
 80060cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80060ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006104 <std+0x5c>)
 80060d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <std+0x60>)
 80060d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060d6:	4b0d      	ldr	r3, [pc, #52]	@ (800610c <std+0x64>)
 80060d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <std+0x68>)
 80060dc:	6224      	str	r4, [r4, #32]
 80060de:	429c      	cmp	r4, r3
 80060e0:	d006      	beq.n	80060f0 <std+0x48>
 80060e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060e6:	4294      	cmp	r4, r2
 80060e8:	d002      	beq.n	80060f0 <std+0x48>
 80060ea:	33d0      	adds	r3, #208	@ 0xd0
 80060ec:	429c      	cmp	r4, r3
 80060ee:	d105      	bne.n	80060fc <std+0x54>
 80060f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f8:	f000 b9ac 	b.w	8006454 <__retarget_lock_init_recursive>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	bf00      	nop
 8006100:	080062d5 	.word	0x080062d5
 8006104:	080062f7 	.word	0x080062f7
 8006108:	0800632f 	.word	0x0800632f
 800610c:	08006353 	.word	0x08006353
 8006110:	20000478 	.word	0x20000478

08006114 <stdio_exit_handler>:
 8006114:	4a02      	ldr	r2, [pc, #8]	@ (8006120 <stdio_exit_handler+0xc>)
 8006116:	4903      	ldr	r1, [pc, #12]	@ (8006124 <stdio_exit_handler+0x10>)
 8006118:	4803      	ldr	r0, [pc, #12]	@ (8006128 <stdio_exit_handler+0x14>)
 800611a:	f000 b869 	b.w	80061f0 <_fwalk_sglue>
 800611e:	bf00      	nop
 8006120:	2000000c 	.word	0x2000000c
 8006124:	08008d25 	.word	0x08008d25
 8006128:	2000001c 	.word	0x2000001c

0800612c <cleanup_stdio>:
 800612c:	6841      	ldr	r1, [r0, #4]
 800612e:	4b0c      	ldr	r3, [pc, #48]	@ (8006160 <cleanup_stdio+0x34>)
 8006130:	4299      	cmp	r1, r3
 8006132:	b510      	push	{r4, lr}
 8006134:	4604      	mov	r4, r0
 8006136:	d001      	beq.n	800613c <cleanup_stdio+0x10>
 8006138:	f002 fdf4 	bl	8008d24 <_fflush_r>
 800613c:	68a1      	ldr	r1, [r4, #8]
 800613e:	4b09      	ldr	r3, [pc, #36]	@ (8006164 <cleanup_stdio+0x38>)
 8006140:	4299      	cmp	r1, r3
 8006142:	d002      	beq.n	800614a <cleanup_stdio+0x1e>
 8006144:	4620      	mov	r0, r4
 8006146:	f002 fded 	bl	8008d24 <_fflush_r>
 800614a:	68e1      	ldr	r1, [r4, #12]
 800614c:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <cleanup_stdio+0x3c>)
 800614e:	4299      	cmp	r1, r3
 8006150:	d004      	beq.n	800615c <cleanup_stdio+0x30>
 8006152:	4620      	mov	r0, r4
 8006154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006158:	f002 bde4 	b.w	8008d24 <_fflush_r>
 800615c:	bd10      	pop	{r4, pc}
 800615e:	bf00      	nop
 8006160:	20000478 	.word	0x20000478
 8006164:	200004e0 	.word	0x200004e0
 8006168:	20000548 	.word	0x20000548

0800616c <global_stdio_init.part.0>:
 800616c:	b510      	push	{r4, lr}
 800616e:	4b0b      	ldr	r3, [pc, #44]	@ (800619c <global_stdio_init.part.0+0x30>)
 8006170:	4c0b      	ldr	r4, [pc, #44]	@ (80061a0 <global_stdio_init.part.0+0x34>)
 8006172:	4a0c      	ldr	r2, [pc, #48]	@ (80061a4 <global_stdio_init.part.0+0x38>)
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	4620      	mov	r0, r4
 8006178:	2200      	movs	r2, #0
 800617a:	2104      	movs	r1, #4
 800617c:	f7ff ff94 	bl	80060a8 <std>
 8006180:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006184:	2201      	movs	r2, #1
 8006186:	2109      	movs	r1, #9
 8006188:	f7ff ff8e 	bl	80060a8 <std>
 800618c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006190:	2202      	movs	r2, #2
 8006192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006196:	2112      	movs	r1, #18
 8006198:	f7ff bf86 	b.w	80060a8 <std>
 800619c:	200005b0 	.word	0x200005b0
 80061a0:	20000478 	.word	0x20000478
 80061a4:	08006115 	.word	0x08006115

080061a8 <__sfp_lock_acquire>:
 80061a8:	4801      	ldr	r0, [pc, #4]	@ (80061b0 <__sfp_lock_acquire+0x8>)
 80061aa:	f000 b954 	b.w	8006456 <__retarget_lock_acquire_recursive>
 80061ae:	bf00      	nop
 80061b0:	200005b9 	.word	0x200005b9

080061b4 <__sfp_lock_release>:
 80061b4:	4801      	ldr	r0, [pc, #4]	@ (80061bc <__sfp_lock_release+0x8>)
 80061b6:	f000 b94f 	b.w	8006458 <__retarget_lock_release_recursive>
 80061ba:	bf00      	nop
 80061bc:	200005b9 	.word	0x200005b9

080061c0 <__sinit>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	4604      	mov	r4, r0
 80061c4:	f7ff fff0 	bl	80061a8 <__sfp_lock_acquire>
 80061c8:	6a23      	ldr	r3, [r4, #32]
 80061ca:	b11b      	cbz	r3, 80061d4 <__sinit+0x14>
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d0:	f7ff bff0 	b.w	80061b4 <__sfp_lock_release>
 80061d4:	4b04      	ldr	r3, [pc, #16]	@ (80061e8 <__sinit+0x28>)
 80061d6:	6223      	str	r3, [r4, #32]
 80061d8:	4b04      	ldr	r3, [pc, #16]	@ (80061ec <__sinit+0x2c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f5      	bne.n	80061cc <__sinit+0xc>
 80061e0:	f7ff ffc4 	bl	800616c <global_stdio_init.part.0>
 80061e4:	e7f2      	b.n	80061cc <__sinit+0xc>
 80061e6:	bf00      	nop
 80061e8:	0800612d 	.word	0x0800612d
 80061ec:	200005b0 	.word	0x200005b0

080061f0 <_fwalk_sglue>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	4607      	mov	r7, r0
 80061f6:	4688      	mov	r8, r1
 80061f8:	4614      	mov	r4, r2
 80061fa:	2600      	movs	r6, #0
 80061fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006200:	f1b9 0901 	subs.w	r9, r9, #1
 8006204:	d505      	bpl.n	8006212 <_fwalk_sglue+0x22>
 8006206:	6824      	ldr	r4, [r4, #0]
 8006208:	2c00      	cmp	r4, #0
 800620a:	d1f7      	bne.n	80061fc <_fwalk_sglue+0xc>
 800620c:	4630      	mov	r0, r6
 800620e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006212:	89ab      	ldrh	r3, [r5, #12]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d907      	bls.n	8006228 <_fwalk_sglue+0x38>
 8006218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800621c:	3301      	adds	r3, #1
 800621e:	d003      	beq.n	8006228 <_fwalk_sglue+0x38>
 8006220:	4629      	mov	r1, r5
 8006222:	4638      	mov	r0, r7
 8006224:	47c0      	blx	r8
 8006226:	4306      	orrs	r6, r0
 8006228:	3568      	adds	r5, #104	@ 0x68
 800622a:	e7e9      	b.n	8006200 <_fwalk_sglue+0x10>

0800622c <sniprintf>:
 800622c:	b40c      	push	{r2, r3}
 800622e:	b530      	push	{r4, r5, lr}
 8006230:	4b17      	ldr	r3, [pc, #92]	@ (8006290 <sniprintf+0x64>)
 8006232:	1e0c      	subs	r4, r1, #0
 8006234:	681d      	ldr	r5, [r3, #0]
 8006236:	b09d      	sub	sp, #116	@ 0x74
 8006238:	da08      	bge.n	800624c <sniprintf+0x20>
 800623a:	238b      	movs	r3, #139	@ 0x8b
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	b01d      	add	sp, #116	@ 0x74
 8006244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006248:	b002      	add	sp, #8
 800624a:	4770      	bx	lr
 800624c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006250:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006254:	bf14      	ite	ne
 8006256:	f104 33ff 	addne.w	r3, r4, #4294967295
 800625a:	4623      	moveq	r3, r4
 800625c:	9304      	str	r3, [sp, #16]
 800625e:	9307      	str	r3, [sp, #28]
 8006260:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006264:	9002      	str	r0, [sp, #8]
 8006266:	9006      	str	r0, [sp, #24]
 8006268:	f8ad 3016 	strh.w	r3, [sp, #22]
 800626c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800626e:	ab21      	add	r3, sp, #132	@ 0x84
 8006270:	a902      	add	r1, sp, #8
 8006272:	4628      	mov	r0, r5
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	f002 fbd5 	bl	8008a24 <_svfiprintf_r>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	bfbc      	itt	lt
 800627e:	238b      	movlt	r3, #139	@ 0x8b
 8006280:	602b      	strlt	r3, [r5, #0]
 8006282:	2c00      	cmp	r4, #0
 8006284:	d0dd      	beq.n	8006242 <sniprintf+0x16>
 8006286:	9b02      	ldr	r3, [sp, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	e7d9      	b.n	8006242 <sniprintf+0x16>
 800628e:	bf00      	nop
 8006290:	20000018 	.word	0x20000018

08006294 <siprintf>:
 8006294:	b40e      	push	{r1, r2, r3}
 8006296:	b500      	push	{lr}
 8006298:	b09c      	sub	sp, #112	@ 0x70
 800629a:	ab1d      	add	r3, sp, #116	@ 0x74
 800629c:	9002      	str	r0, [sp, #8]
 800629e:	9006      	str	r0, [sp, #24]
 80062a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062a4:	4809      	ldr	r0, [pc, #36]	@ (80062cc <siprintf+0x38>)
 80062a6:	9107      	str	r1, [sp, #28]
 80062a8:	9104      	str	r1, [sp, #16]
 80062aa:	4909      	ldr	r1, [pc, #36]	@ (80062d0 <siprintf+0x3c>)
 80062ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b0:	9105      	str	r1, [sp, #20]
 80062b2:	6800      	ldr	r0, [r0, #0]
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	a902      	add	r1, sp, #8
 80062b8:	f002 fbb4 	bl	8008a24 <_svfiprintf_r>
 80062bc:	9b02      	ldr	r3, [sp, #8]
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	b01c      	add	sp, #112	@ 0x70
 80062c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062c8:	b003      	add	sp, #12
 80062ca:	4770      	bx	lr
 80062cc:	20000018 	.word	0x20000018
 80062d0:	ffff0208 	.word	0xffff0208

080062d4 <__sread>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	460c      	mov	r4, r1
 80062d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062dc:	f000 f86c 	bl	80063b8 <_read_r>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	bfab      	itete	ge
 80062e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062e6:	89a3      	ldrhlt	r3, [r4, #12]
 80062e8:	181b      	addge	r3, r3, r0
 80062ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062ee:	bfac      	ite	ge
 80062f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062f2:	81a3      	strhlt	r3, [r4, #12]
 80062f4:	bd10      	pop	{r4, pc}

080062f6 <__swrite>:
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	461f      	mov	r7, r3
 80062fc:	898b      	ldrh	r3, [r1, #12]
 80062fe:	05db      	lsls	r3, r3, #23
 8006300:	4605      	mov	r5, r0
 8006302:	460c      	mov	r4, r1
 8006304:	4616      	mov	r6, r2
 8006306:	d505      	bpl.n	8006314 <__swrite+0x1e>
 8006308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800630c:	2302      	movs	r3, #2
 800630e:	2200      	movs	r2, #0
 8006310:	f000 f840 	bl	8006394 <_lseek_r>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800631a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	4632      	mov	r2, r6
 8006322:	463b      	mov	r3, r7
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	f000 b857 	b.w	80063dc <_write_r>

0800632e <__sseek>:
 800632e:	b510      	push	{r4, lr}
 8006330:	460c      	mov	r4, r1
 8006332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006336:	f000 f82d 	bl	8006394 <_lseek_r>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	bf15      	itete	ne
 8006340:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006342:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006346:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800634a:	81a3      	strheq	r3, [r4, #12]
 800634c:	bf18      	it	ne
 800634e:	81a3      	strhne	r3, [r4, #12]
 8006350:	bd10      	pop	{r4, pc}

08006352 <__sclose>:
 8006352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006356:	f000 b80d 	b.w	8006374 <_close_r>

0800635a <memset>:
 800635a:	4402      	add	r2, r0
 800635c:	4603      	mov	r3, r0
 800635e:	4293      	cmp	r3, r2
 8006360:	d100      	bne.n	8006364 <memset+0xa>
 8006362:	4770      	bx	lr
 8006364:	f803 1b01 	strb.w	r1, [r3], #1
 8006368:	e7f9      	b.n	800635e <memset+0x4>
	...

0800636c <_localeconv_r>:
 800636c:	4800      	ldr	r0, [pc, #0]	@ (8006370 <_localeconv_r+0x4>)
 800636e:	4770      	bx	lr
 8006370:	20000158 	.word	0x20000158

08006374 <_close_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d06      	ldr	r5, [pc, #24]	@ (8006390 <_close_r+0x1c>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	f7fb f9af 	bl	80016e2 <_close>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_close_r+0x1a>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_close_r+0x1a>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	200005b4 	.word	0x200005b4

08006394 <_lseek_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d07      	ldr	r5, [pc, #28]	@ (80063b4 <_lseek_r+0x20>)
 8006398:	4604      	mov	r4, r0
 800639a:	4608      	mov	r0, r1
 800639c:	4611      	mov	r1, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	602a      	str	r2, [r5, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7fb f9c4 	bl	8001730 <_lseek>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_lseek_r+0x1e>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_lseek_r+0x1e>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	200005b4 	.word	0x200005b4

080063b8 <_read_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	@ (80063d8 <_read_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fb f952 	bl	8001670 <_read>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_read_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_read_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200005b4 	.word	0x200005b4

080063dc <_write_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	@ (80063fc <_write_r+0x20>)
 80063e0:	4604      	mov	r4, r0
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7fb f95d 	bl	80016aa <_write>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_write_r+0x1e>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_write_r+0x1e>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	200005b4 	.word	0x200005b4

08006400 <__errno>:
 8006400:	4b01      	ldr	r3, [pc, #4]	@ (8006408 <__errno+0x8>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000018 	.word	0x20000018

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4d0d      	ldr	r5, [pc, #52]	@ (8006444 <__libc_init_array+0x38>)
 8006410:	4c0d      	ldr	r4, [pc, #52]	@ (8006448 <__libc_init_array+0x3c>)
 8006412:	1b64      	subs	r4, r4, r5
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	2600      	movs	r6, #0
 8006418:	42a6      	cmp	r6, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	4d0b      	ldr	r5, [pc, #44]	@ (800644c <__libc_init_array+0x40>)
 800641e:	4c0c      	ldr	r4, [pc, #48]	@ (8006450 <__libc_init_array+0x44>)
 8006420:	f003 fb70 	bl	8009b04 <_init>
 8006424:	1b64      	subs	r4, r4, r5
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	2600      	movs	r6, #0
 800642a:	42a6      	cmp	r6, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	f855 3b04 	ldr.w	r3, [r5], #4
 8006434:	4798      	blx	r3
 8006436:	3601      	adds	r6, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	f855 3b04 	ldr.w	r3, [r5], #4
 800643e:	4798      	blx	r3
 8006440:	3601      	adds	r6, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	08009ff0 	.word	0x08009ff0
 8006448:	08009ff0 	.word	0x08009ff0
 800644c:	08009ff0 	.word	0x08009ff0
 8006450:	08009ff4 	.word	0x08009ff4

08006454 <__retarget_lock_init_recursive>:
 8006454:	4770      	bx	lr

08006456 <__retarget_lock_acquire_recursive>:
 8006456:	4770      	bx	lr

08006458 <__retarget_lock_release_recursive>:
 8006458:	4770      	bx	lr
	...

0800645c <nanf>:
 800645c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006464 <nanf+0x8>
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	7fc00000 	.word	0x7fc00000

08006468 <quorem>:
 8006468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	6903      	ldr	r3, [r0, #16]
 800646e:	690c      	ldr	r4, [r1, #16]
 8006470:	42a3      	cmp	r3, r4
 8006472:	4607      	mov	r7, r0
 8006474:	db7e      	blt.n	8006574 <quorem+0x10c>
 8006476:	3c01      	subs	r4, #1
 8006478:	f101 0814 	add.w	r8, r1, #20
 800647c:	00a3      	lsls	r3, r4, #2
 800647e:	f100 0514 	add.w	r5, r0, #20
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800648e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006492:	3301      	adds	r3, #1
 8006494:	429a      	cmp	r2, r3
 8006496:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800649a:	fbb2 f6f3 	udiv	r6, r2, r3
 800649e:	d32e      	bcc.n	80064fe <quorem+0x96>
 80064a0:	f04f 0a00 	mov.w	sl, #0
 80064a4:	46c4      	mov	ip, r8
 80064a6:	46ae      	mov	lr, r5
 80064a8:	46d3      	mov	fp, sl
 80064aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064ae:	b298      	uxth	r0, r3
 80064b0:	fb06 a000 	mla	r0, r6, r0, sl
 80064b4:	0c02      	lsrs	r2, r0, #16
 80064b6:	0c1b      	lsrs	r3, r3, #16
 80064b8:	fb06 2303 	mla	r3, r6, r3, r2
 80064bc:	f8de 2000 	ldr.w	r2, [lr]
 80064c0:	b280      	uxth	r0, r0
 80064c2:	b292      	uxth	r2, r2
 80064c4:	1a12      	subs	r2, r2, r0
 80064c6:	445a      	add	r2, fp
 80064c8:	f8de 0000 	ldr.w	r0, [lr]
 80064cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064da:	b292      	uxth	r2, r2
 80064dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064e0:	45e1      	cmp	r9, ip
 80064e2:	f84e 2b04 	str.w	r2, [lr], #4
 80064e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064ea:	d2de      	bcs.n	80064aa <quorem+0x42>
 80064ec:	9b00      	ldr	r3, [sp, #0]
 80064ee:	58eb      	ldr	r3, [r5, r3]
 80064f0:	b92b      	cbnz	r3, 80064fe <quorem+0x96>
 80064f2:	9b01      	ldr	r3, [sp, #4]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	429d      	cmp	r5, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	d32f      	bcc.n	800655c <quorem+0xf4>
 80064fc:	613c      	str	r4, [r7, #16]
 80064fe:	4638      	mov	r0, r7
 8006500:	f001 f9c2 	bl	8007888 <__mcmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	db25      	blt.n	8006554 <quorem+0xec>
 8006508:	4629      	mov	r1, r5
 800650a:	2000      	movs	r0, #0
 800650c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006510:	f8d1 c000 	ldr.w	ip, [r1]
 8006514:	fa1f fe82 	uxth.w	lr, r2
 8006518:	fa1f f38c 	uxth.w	r3, ip
 800651c:	eba3 030e 	sub.w	r3, r3, lr
 8006520:	4403      	add	r3, r0
 8006522:	0c12      	lsrs	r2, r2, #16
 8006524:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006528:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800652c:	b29b      	uxth	r3, r3
 800652e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006532:	45c1      	cmp	r9, r8
 8006534:	f841 3b04 	str.w	r3, [r1], #4
 8006538:	ea4f 4022 	mov.w	r0, r2, asr #16
 800653c:	d2e6      	bcs.n	800650c <quorem+0xa4>
 800653e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006546:	b922      	cbnz	r2, 8006552 <quorem+0xea>
 8006548:	3b04      	subs	r3, #4
 800654a:	429d      	cmp	r5, r3
 800654c:	461a      	mov	r2, r3
 800654e:	d30b      	bcc.n	8006568 <quorem+0x100>
 8006550:	613c      	str	r4, [r7, #16]
 8006552:	3601      	adds	r6, #1
 8006554:	4630      	mov	r0, r6
 8006556:	b003      	add	sp, #12
 8006558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	3b04      	subs	r3, #4
 8006560:	2a00      	cmp	r2, #0
 8006562:	d1cb      	bne.n	80064fc <quorem+0x94>
 8006564:	3c01      	subs	r4, #1
 8006566:	e7c6      	b.n	80064f6 <quorem+0x8e>
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	3b04      	subs	r3, #4
 800656c:	2a00      	cmp	r2, #0
 800656e:	d1ef      	bne.n	8006550 <quorem+0xe8>
 8006570:	3c01      	subs	r4, #1
 8006572:	e7ea      	b.n	800654a <quorem+0xe2>
 8006574:	2000      	movs	r0, #0
 8006576:	e7ee      	b.n	8006556 <quorem+0xee>

08006578 <_dtoa_r>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	69c7      	ldr	r7, [r0, #28]
 800657e:	b099      	sub	sp, #100	@ 0x64
 8006580:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006584:	ec55 4b10 	vmov	r4, r5, d0
 8006588:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800658a:	9109      	str	r1, [sp, #36]	@ 0x24
 800658c:	4683      	mov	fp, r0
 800658e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006590:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006592:	b97f      	cbnz	r7, 80065b4 <_dtoa_r+0x3c>
 8006594:	2010      	movs	r0, #16
 8006596:	f000 fdfd 	bl	8007194 <malloc>
 800659a:	4602      	mov	r2, r0
 800659c:	f8cb 001c 	str.w	r0, [fp, #28]
 80065a0:	b920      	cbnz	r0, 80065ac <_dtoa_r+0x34>
 80065a2:	4ba7      	ldr	r3, [pc, #668]	@ (8006840 <_dtoa_r+0x2c8>)
 80065a4:	21ef      	movs	r1, #239	@ 0xef
 80065a6:	48a7      	ldr	r0, [pc, #668]	@ (8006844 <_dtoa_r+0x2cc>)
 80065a8:	f002 fc36 	bl	8008e18 <__assert_func>
 80065ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80065b0:	6007      	str	r7, [r0, #0]
 80065b2:	60c7      	str	r7, [r0, #12]
 80065b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	b159      	cbz	r1, 80065d4 <_dtoa_r+0x5c>
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	604a      	str	r2, [r1, #4]
 80065c0:	2301      	movs	r3, #1
 80065c2:	4093      	lsls	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
 80065c6:	4658      	mov	r0, fp
 80065c8:	f000 feda 	bl	8007380 <_Bfree>
 80065cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	1e2b      	subs	r3, r5, #0
 80065d6:	bfb9      	ittee	lt
 80065d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065dc:	9303      	strlt	r3, [sp, #12]
 80065de:	2300      	movge	r3, #0
 80065e0:	6033      	strge	r3, [r6, #0]
 80065e2:	9f03      	ldr	r7, [sp, #12]
 80065e4:	4b98      	ldr	r3, [pc, #608]	@ (8006848 <_dtoa_r+0x2d0>)
 80065e6:	bfbc      	itt	lt
 80065e8:	2201      	movlt	r2, #1
 80065ea:	6032      	strlt	r2, [r6, #0]
 80065ec:	43bb      	bics	r3, r7
 80065ee:	d112      	bne.n	8006616 <_dtoa_r+0x9e>
 80065f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065fc:	4323      	orrs	r3, r4
 80065fe:	f000 854d 	beq.w	800709c <_dtoa_r+0xb24>
 8006602:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006604:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800685c <_dtoa_r+0x2e4>
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 854f 	beq.w	80070ac <_dtoa_r+0xb34>
 800660e:	f10a 0303 	add.w	r3, sl, #3
 8006612:	f000 bd49 	b.w	80070a8 <_dtoa_r+0xb30>
 8006616:	ed9d 7b02 	vldr	d7, [sp, #8]
 800661a:	2200      	movs	r2, #0
 800661c:	ec51 0b17 	vmov	r0, r1, d7
 8006620:	2300      	movs	r3, #0
 8006622:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006626:	f7fa fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800662a:	4680      	mov	r8, r0
 800662c:	b158      	cbz	r0, 8006646 <_dtoa_r+0xce>
 800662e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006630:	2301      	movs	r3, #1
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006636:	b113      	cbz	r3, 800663e <_dtoa_r+0xc6>
 8006638:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800663a:	4b84      	ldr	r3, [pc, #528]	@ (800684c <_dtoa_r+0x2d4>)
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006860 <_dtoa_r+0x2e8>
 8006642:	f000 bd33 	b.w	80070ac <_dtoa_r+0xb34>
 8006646:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800664a:	aa16      	add	r2, sp, #88	@ 0x58
 800664c:	a917      	add	r1, sp, #92	@ 0x5c
 800664e:	4658      	mov	r0, fp
 8006650:	f001 fa3a 	bl	8007ac8 <__d2b>
 8006654:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006658:	4681      	mov	r9, r0
 800665a:	2e00      	cmp	r6, #0
 800665c:	d077      	beq.n	800674e <_dtoa_r+0x1d6>
 800665e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006660:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800666c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006670:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006674:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006678:	4619      	mov	r1, r3
 800667a:	2200      	movs	r2, #0
 800667c:	4b74      	ldr	r3, [pc, #464]	@ (8006850 <_dtoa_r+0x2d8>)
 800667e:	f7f9 fe03 	bl	8000288 <__aeabi_dsub>
 8006682:	a369      	add	r3, pc, #420	@ (adr r3, 8006828 <_dtoa_r+0x2b0>)
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f7f9 ffb6 	bl	80005f8 <__aeabi_dmul>
 800668c:	a368      	add	r3, pc, #416	@ (adr r3, 8006830 <_dtoa_r+0x2b8>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7f9 fdfb 	bl	800028c <__adddf3>
 8006696:	4604      	mov	r4, r0
 8006698:	4630      	mov	r0, r6
 800669a:	460d      	mov	r5, r1
 800669c:	f7f9 ff42 	bl	8000524 <__aeabi_i2d>
 80066a0:	a365      	add	r3, pc, #404	@ (adr r3, 8006838 <_dtoa_r+0x2c0>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 ffa7 	bl	80005f8 <__aeabi_dmul>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4620      	mov	r0, r4
 80066b0:	4629      	mov	r1, r5
 80066b2:	f7f9 fdeb 	bl	800028c <__adddf3>
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	f7fa fa4d 	bl	8000b58 <__aeabi_d2iz>
 80066be:	2200      	movs	r2, #0
 80066c0:	4607      	mov	r7, r0
 80066c2:	2300      	movs	r3, #0
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7fa fa08 	bl	8000adc <__aeabi_dcmplt>
 80066cc:	b140      	cbz	r0, 80066e0 <_dtoa_r+0x168>
 80066ce:	4638      	mov	r0, r7
 80066d0:	f7f9 ff28 	bl	8000524 <__aeabi_i2d>
 80066d4:	4622      	mov	r2, r4
 80066d6:	462b      	mov	r3, r5
 80066d8:	f7fa f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80066dc:	b900      	cbnz	r0, 80066e0 <_dtoa_r+0x168>
 80066de:	3f01      	subs	r7, #1
 80066e0:	2f16      	cmp	r7, #22
 80066e2:	d851      	bhi.n	8006788 <_dtoa_r+0x210>
 80066e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006854 <_dtoa_r+0x2dc>)
 80066e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066f2:	f7fa f9f3 	bl	8000adc <__aeabi_dcmplt>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d048      	beq.n	800678c <_dtoa_r+0x214>
 80066fa:	3f01      	subs	r7, #1
 80066fc:	2300      	movs	r3, #0
 80066fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006700:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006702:	1b9b      	subs	r3, r3, r6
 8006704:	1e5a      	subs	r2, r3, #1
 8006706:	bf44      	itt	mi
 8006708:	f1c3 0801 	rsbmi	r8, r3, #1
 800670c:	2300      	movmi	r3, #0
 800670e:	9208      	str	r2, [sp, #32]
 8006710:	bf54      	ite	pl
 8006712:	f04f 0800 	movpl.w	r8, #0
 8006716:	9308      	strmi	r3, [sp, #32]
 8006718:	2f00      	cmp	r7, #0
 800671a:	db39      	blt.n	8006790 <_dtoa_r+0x218>
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006720:	443b      	add	r3, r7
 8006722:	9308      	str	r3, [sp, #32]
 8006724:	2300      	movs	r3, #0
 8006726:	930a      	str	r3, [sp, #40]	@ 0x28
 8006728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800672a:	2b09      	cmp	r3, #9
 800672c:	d864      	bhi.n	80067f8 <_dtoa_r+0x280>
 800672e:	2b05      	cmp	r3, #5
 8006730:	bfc4      	itt	gt
 8006732:	3b04      	subgt	r3, #4
 8006734:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006738:	f1a3 0302 	sub.w	r3, r3, #2
 800673c:	bfcc      	ite	gt
 800673e:	2400      	movgt	r4, #0
 8006740:	2401      	movle	r4, #1
 8006742:	2b03      	cmp	r3, #3
 8006744:	d863      	bhi.n	800680e <_dtoa_r+0x296>
 8006746:	e8df f003 	tbb	[pc, r3]
 800674a:	372a      	.short	0x372a
 800674c:	5535      	.short	0x5535
 800674e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006752:	441e      	add	r6, r3
 8006754:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006758:	2b20      	cmp	r3, #32
 800675a:	bfc1      	itttt	gt
 800675c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006760:	409f      	lslgt	r7, r3
 8006762:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006766:	fa24 f303 	lsrgt.w	r3, r4, r3
 800676a:	bfd6      	itet	le
 800676c:	f1c3 0320 	rsble	r3, r3, #32
 8006770:	ea47 0003 	orrgt.w	r0, r7, r3
 8006774:	fa04 f003 	lslle.w	r0, r4, r3
 8006778:	f7f9 fec4 	bl	8000504 <__aeabi_ui2d>
 800677c:	2201      	movs	r2, #1
 800677e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006782:	3e01      	subs	r6, #1
 8006784:	9214      	str	r2, [sp, #80]	@ 0x50
 8006786:	e777      	b.n	8006678 <_dtoa_r+0x100>
 8006788:	2301      	movs	r3, #1
 800678a:	e7b8      	b.n	80066fe <_dtoa_r+0x186>
 800678c:	9012      	str	r0, [sp, #72]	@ 0x48
 800678e:	e7b7      	b.n	8006700 <_dtoa_r+0x188>
 8006790:	427b      	negs	r3, r7
 8006792:	930a      	str	r3, [sp, #40]	@ 0x28
 8006794:	2300      	movs	r3, #0
 8006796:	eba8 0807 	sub.w	r8, r8, r7
 800679a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800679c:	e7c4      	b.n	8006728 <_dtoa_r+0x1b0>
 800679e:	2300      	movs	r3, #0
 80067a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dc35      	bgt.n	8006814 <_dtoa_r+0x29c>
 80067a8:	2301      	movs	r3, #1
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	461a      	mov	r2, r3
 80067b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80067b2:	e00b      	b.n	80067cc <_dtoa_r+0x254>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e7f3      	b.n	80067a0 <_dtoa_r+0x228>
 80067b8:	2300      	movs	r3, #0
 80067ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	9307      	str	r3, [sp, #28]
 80067c8:	bfb8      	it	lt
 80067ca:	2301      	movlt	r3, #1
 80067cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80067d0:	2100      	movs	r1, #0
 80067d2:	2204      	movs	r2, #4
 80067d4:	f102 0514 	add.w	r5, r2, #20
 80067d8:	429d      	cmp	r5, r3
 80067da:	d91f      	bls.n	800681c <_dtoa_r+0x2a4>
 80067dc:	6041      	str	r1, [r0, #4]
 80067de:	4658      	mov	r0, fp
 80067e0:	f000 fd8e 	bl	8007300 <_Balloc>
 80067e4:	4682      	mov	sl, r0
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d13c      	bne.n	8006864 <_dtoa_r+0x2ec>
 80067ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006858 <_dtoa_r+0x2e0>)
 80067ec:	4602      	mov	r2, r0
 80067ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80067f2:	e6d8      	b.n	80065a6 <_dtoa_r+0x2e>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e7e0      	b.n	80067ba <_dtoa_r+0x242>
 80067f8:	2401      	movs	r4, #1
 80067fa:	2300      	movs	r3, #0
 80067fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006800:	f04f 33ff 	mov.w	r3, #4294967295
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	9307      	str	r3, [sp, #28]
 8006808:	2200      	movs	r2, #0
 800680a:	2312      	movs	r3, #18
 800680c:	e7d0      	b.n	80067b0 <_dtoa_r+0x238>
 800680e:	2301      	movs	r3, #1
 8006810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006812:	e7f5      	b.n	8006800 <_dtoa_r+0x288>
 8006814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	9307      	str	r3, [sp, #28]
 800681a:	e7d7      	b.n	80067cc <_dtoa_r+0x254>
 800681c:	3101      	adds	r1, #1
 800681e:	0052      	lsls	r2, r2, #1
 8006820:	e7d8      	b.n	80067d4 <_dtoa_r+0x25c>
 8006822:	bf00      	nop
 8006824:	f3af 8000 	nop.w
 8006828:	636f4361 	.word	0x636f4361
 800682c:	3fd287a7 	.word	0x3fd287a7
 8006830:	8b60c8b3 	.word	0x8b60c8b3
 8006834:	3fc68a28 	.word	0x3fc68a28
 8006838:	509f79fb 	.word	0x509f79fb
 800683c:	3fd34413 	.word	0x3fd34413
 8006840:	08009bfe 	.word	0x08009bfe
 8006844:	08009c15 	.word	0x08009c15
 8006848:	7ff00000 	.word	0x7ff00000
 800684c:	08009bc9 	.word	0x08009bc9
 8006850:	3ff80000 	.word	0x3ff80000
 8006854:	08009d10 	.word	0x08009d10
 8006858:	08009c6d 	.word	0x08009c6d
 800685c:	08009bfa 	.word	0x08009bfa
 8006860:	08009bc8 	.word	0x08009bc8
 8006864:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006868:	6018      	str	r0, [r3, #0]
 800686a:	9b07      	ldr	r3, [sp, #28]
 800686c:	2b0e      	cmp	r3, #14
 800686e:	f200 80a4 	bhi.w	80069ba <_dtoa_r+0x442>
 8006872:	2c00      	cmp	r4, #0
 8006874:	f000 80a1 	beq.w	80069ba <_dtoa_r+0x442>
 8006878:	2f00      	cmp	r7, #0
 800687a:	dd33      	ble.n	80068e4 <_dtoa_r+0x36c>
 800687c:	4bad      	ldr	r3, [pc, #692]	@ (8006b34 <_dtoa_r+0x5bc>)
 800687e:	f007 020f 	and.w	r2, r7, #15
 8006882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006886:	ed93 7b00 	vldr	d7, [r3]
 800688a:	05f8      	lsls	r0, r7, #23
 800688c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006890:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006894:	d516      	bpl.n	80068c4 <_dtoa_r+0x34c>
 8006896:	4ba8      	ldr	r3, [pc, #672]	@ (8006b38 <_dtoa_r+0x5c0>)
 8006898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800689c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068a0:	f7f9 ffd4 	bl	800084c <__aeabi_ddiv>
 80068a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a8:	f004 040f 	and.w	r4, r4, #15
 80068ac:	2603      	movs	r6, #3
 80068ae:	4da2      	ldr	r5, [pc, #648]	@ (8006b38 <_dtoa_r+0x5c0>)
 80068b0:	b954      	cbnz	r4, 80068c8 <_dtoa_r+0x350>
 80068b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ba:	f7f9 ffc7 	bl	800084c <__aeabi_ddiv>
 80068be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c2:	e028      	b.n	8006916 <_dtoa_r+0x39e>
 80068c4:	2602      	movs	r6, #2
 80068c6:	e7f2      	b.n	80068ae <_dtoa_r+0x336>
 80068c8:	07e1      	lsls	r1, r4, #31
 80068ca:	d508      	bpl.n	80068de <_dtoa_r+0x366>
 80068cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068d4:	f7f9 fe90 	bl	80005f8 <__aeabi_dmul>
 80068d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068dc:	3601      	adds	r6, #1
 80068de:	1064      	asrs	r4, r4, #1
 80068e0:	3508      	adds	r5, #8
 80068e2:	e7e5      	b.n	80068b0 <_dtoa_r+0x338>
 80068e4:	f000 80d2 	beq.w	8006a8c <_dtoa_r+0x514>
 80068e8:	427c      	negs	r4, r7
 80068ea:	4b92      	ldr	r3, [pc, #584]	@ (8006b34 <_dtoa_r+0x5bc>)
 80068ec:	4d92      	ldr	r5, [pc, #584]	@ (8006b38 <_dtoa_r+0x5c0>)
 80068ee:	f004 020f 	and.w	r2, r4, #15
 80068f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068fe:	f7f9 fe7b 	bl	80005f8 <__aeabi_dmul>
 8006902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006906:	1124      	asrs	r4, r4, #4
 8006908:	2300      	movs	r3, #0
 800690a:	2602      	movs	r6, #2
 800690c:	2c00      	cmp	r4, #0
 800690e:	f040 80b2 	bne.w	8006a76 <_dtoa_r+0x4fe>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1d3      	bne.n	80068be <_dtoa_r+0x346>
 8006916:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006918:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 80b7 	beq.w	8006a90 <_dtoa_r+0x518>
 8006922:	4b86      	ldr	r3, [pc, #536]	@ (8006b3c <_dtoa_r+0x5c4>)
 8006924:	2200      	movs	r2, #0
 8006926:	4620      	mov	r0, r4
 8006928:	4629      	mov	r1, r5
 800692a:	f7fa f8d7 	bl	8000adc <__aeabi_dcmplt>
 800692e:	2800      	cmp	r0, #0
 8006930:	f000 80ae 	beq.w	8006a90 <_dtoa_r+0x518>
 8006934:	9b07      	ldr	r3, [sp, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 80aa 	beq.w	8006a90 <_dtoa_r+0x518>
 800693c:	9b00      	ldr	r3, [sp, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	dd37      	ble.n	80069b2 <_dtoa_r+0x43a>
 8006942:	1e7b      	subs	r3, r7, #1
 8006944:	9304      	str	r3, [sp, #16]
 8006946:	4620      	mov	r0, r4
 8006948:	4b7d      	ldr	r3, [pc, #500]	@ (8006b40 <_dtoa_r+0x5c8>)
 800694a:	2200      	movs	r2, #0
 800694c:	4629      	mov	r1, r5
 800694e:	f7f9 fe53 	bl	80005f8 <__aeabi_dmul>
 8006952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006956:	9c00      	ldr	r4, [sp, #0]
 8006958:	3601      	adds	r6, #1
 800695a:	4630      	mov	r0, r6
 800695c:	f7f9 fde2 	bl	8000524 <__aeabi_i2d>
 8006960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006964:	f7f9 fe48 	bl	80005f8 <__aeabi_dmul>
 8006968:	4b76      	ldr	r3, [pc, #472]	@ (8006b44 <_dtoa_r+0x5cc>)
 800696a:	2200      	movs	r2, #0
 800696c:	f7f9 fc8e 	bl	800028c <__adddf3>
 8006970:	4605      	mov	r5, r0
 8006972:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006976:	2c00      	cmp	r4, #0
 8006978:	f040 808d 	bne.w	8006a96 <_dtoa_r+0x51e>
 800697c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006980:	4b71      	ldr	r3, [pc, #452]	@ (8006b48 <_dtoa_r+0x5d0>)
 8006982:	2200      	movs	r2, #0
 8006984:	f7f9 fc80 	bl	8000288 <__aeabi_dsub>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006990:	462a      	mov	r2, r5
 8006992:	4633      	mov	r3, r6
 8006994:	f7fa f8c0 	bl	8000b18 <__aeabi_dcmpgt>
 8006998:	2800      	cmp	r0, #0
 800699a:	f040 828b 	bne.w	8006eb4 <_dtoa_r+0x93c>
 800699e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a2:	462a      	mov	r2, r5
 80069a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80069a8:	f7fa f898 	bl	8000adc <__aeabi_dcmplt>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	f040 8128 	bne.w	8006c02 <_dtoa_r+0x68a>
 80069b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80069b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80069ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f2c0 815a 	blt.w	8006c76 <_dtoa_r+0x6fe>
 80069c2:	2f0e      	cmp	r7, #14
 80069c4:	f300 8157 	bgt.w	8006c76 <_dtoa_r+0x6fe>
 80069c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006b34 <_dtoa_r+0x5bc>)
 80069ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069ce:	ed93 7b00 	vldr	d7, [r3]
 80069d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	ed8d 7b00 	vstr	d7, [sp]
 80069da:	da03      	bge.n	80069e4 <_dtoa_r+0x46c>
 80069dc:	9b07      	ldr	r3, [sp, #28]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f340 8101 	ble.w	8006be6 <_dtoa_r+0x66e>
 80069e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069e8:	4656      	mov	r6, sl
 80069ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7f9 ff2b 	bl	800084c <__aeabi_ddiv>
 80069f6:	f7fa f8af 	bl	8000b58 <__aeabi_d2iz>
 80069fa:	4680      	mov	r8, r0
 80069fc:	f7f9 fd92 	bl	8000524 <__aeabi_i2d>
 8006a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a04:	f7f9 fdf8 	bl	80005f8 <__aeabi_dmul>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	4629      	mov	r1, r5
 8006a10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006a14:	f7f9 fc38 	bl	8000288 <__aeabi_dsub>
 8006a18:	f806 4b01 	strb.w	r4, [r6], #1
 8006a1c:	9d07      	ldr	r5, [sp, #28]
 8006a1e:	eba6 040a 	sub.w	r4, r6, sl
 8006a22:	42a5      	cmp	r5, r4
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	f040 8117 	bne.w	8006c5a <_dtoa_r+0x6e2>
 8006a2c:	f7f9 fc2e 	bl	800028c <__adddf3>
 8006a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a34:	4604      	mov	r4, r0
 8006a36:	460d      	mov	r5, r1
 8006a38:	f7fa f86e 	bl	8000b18 <__aeabi_dcmpgt>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f040 80f9 	bne.w	8006c34 <_dtoa_r+0x6bc>
 8006a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a46:	4620      	mov	r0, r4
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f7fa f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a4e:	b118      	cbz	r0, 8006a58 <_dtoa_r+0x4e0>
 8006a50:	f018 0f01 	tst.w	r8, #1
 8006a54:	f040 80ee 	bne.w	8006c34 <_dtoa_r+0x6bc>
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4658      	mov	r0, fp
 8006a5c:	f000 fc90 	bl	8007380 <_Bfree>
 8006a60:	2300      	movs	r3, #0
 8006a62:	7033      	strb	r3, [r6, #0]
 8006a64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a66:	3701      	adds	r7, #1
 8006a68:	601f      	str	r7, [r3, #0]
 8006a6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 831d 	beq.w	80070ac <_dtoa_r+0xb34>
 8006a72:	601e      	str	r6, [r3, #0]
 8006a74:	e31a      	b.n	80070ac <_dtoa_r+0xb34>
 8006a76:	07e2      	lsls	r2, r4, #31
 8006a78:	d505      	bpl.n	8006a86 <_dtoa_r+0x50e>
 8006a7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a7e:	f7f9 fdbb 	bl	80005f8 <__aeabi_dmul>
 8006a82:	3601      	adds	r6, #1
 8006a84:	2301      	movs	r3, #1
 8006a86:	1064      	asrs	r4, r4, #1
 8006a88:	3508      	adds	r5, #8
 8006a8a:	e73f      	b.n	800690c <_dtoa_r+0x394>
 8006a8c:	2602      	movs	r6, #2
 8006a8e:	e742      	b.n	8006916 <_dtoa_r+0x39e>
 8006a90:	9c07      	ldr	r4, [sp, #28]
 8006a92:	9704      	str	r7, [sp, #16]
 8006a94:	e761      	b.n	800695a <_dtoa_r+0x3e2>
 8006a96:	4b27      	ldr	r3, [pc, #156]	@ (8006b34 <_dtoa_r+0x5bc>)
 8006a98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aa2:	4454      	add	r4, sl
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	d053      	beq.n	8006b50 <_dtoa_r+0x5d8>
 8006aa8:	4928      	ldr	r1, [pc, #160]	@ (8006b4c <_dtoa_r+0x5d4>)
 8006aaa:	2000      	movs	r0, #0
 8006aac:	f7f9 fece 	bl	800084c <__aeabi_ddiv>
 8006ab0:	4633      	mov	r3, r6
 8006ab2:	462a      	mov	r2, r5
 8006ab4:	f7f9 fbe8 	bl	8000288 <__aeabi_dsub>
 8006ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006abc:	4656      	mov	r6, sl
 8006abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac2:	f7fa f849 	bl	8000b58 <__aeabi_d2iz>
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	f7f9 fd2c 	bl	8000524 <__aeabi_i2d>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad4:	f7f9 fbd8 	bl	8000288 <__aeabi_dsub>
 8006ad8:	3530      	adds	r5, #48	@ 0x30
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ae2:	f806 5b01 	strb.w	r5, [r6], #1
 8006ae6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aea:	f7f9 fff7 	bl	8000adc <__aeabi_dcmplt>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d171      	bne.n	8006bd6 <_dtoa_r+0x65e>
 8006af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006af6:	4911      	ldr	r1, [pc, #68]	@ (8006b3c <_dtoa_r+0x5c4>)
 8006af8:	2000      	movs	r0, #0
 8006afa:	f7f9 fbc5 	bl	8000288 <__aeabi_dsub>
 8006afe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b02:	f7f9 ffeb 	bl	8000adc <__aeabi_dcmplt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f040 8095 	bne.w	8006c36 <_dtoa_r+0x6be>
 8006b0c:	42a6      	cmp	r6, r4
 8006b0e:	f43f af50 	beq.w	80069b2 <_dtoa_r+0x43a>
 8006b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b16:	4b0a      	ldr	r3, [pc, #40]	@ (8006b40 <_dtoa_r+0x5c8>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f7f9 fd6d 	bl	80005f8 <__aeabi_dmul>
 8006b1e:	4b08      	ldr	r3, [pc, #32]	@ (8006b40 <_dtoa_r+0x5c8>)
 8006b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b24:	2200      	movs	r2, #0
 8006b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2a:	f7f9 fd65 	bl	80005f8 <__aeabi_dmul>
 8006b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b32:	e7c4      	b.n	8006abe <_dtoa_r+0x546>
 8006b34:	08009d10 	.word	0x08009d10
 8006b38:	08009ce8 	.word	0x08009ce8
 8006b3c:	3ff00000 	.word	0x3ff00000
 8006b40:	40240000 	.word	0x40240000
 8006b44:	401c0000 	.word	0x401c0000
 8006b48:	40140000 	.word	0x40140000
 8006b4c:	3fe00000 	.word	0x3fe00000
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	f7f9 fd50 	bl	80005f8 <__aeabi_dmul>
 8006b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006b5e:	4656      	mov	r6, sl
 8006b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b64:	f7f9 fff8 	bl	8000b58 <__aeabi_d2iz>
 8006b68:	4605      	mov	r5, r0
 8006b6a:	f7f9 fcdb 	bl	8000524 <__aeabi_i2d>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b76:	f7f9 fb87 	bl	8000288 <__aeabi_dsub>
 8006b7a:	3530      	adds	r5, #48	@ 0x30
 8006b7c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	42a6      	cmp	r6, r4
 8006b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	d124      	bne.n	8006bda <_dtoa_r+0x662>
 8006b90:	4bac      	ldr	r3, [pc, #688]	@ (8006e44 <_dtoa_r+0x8cc>)
 8006b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b96:	f7f9 fb79 	bl	800028c <__adddf3>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba2:	f7f9 ffb9 	bl	8000b18 <__aeabi_dcmpgt>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d145      	bne.n	8006c36 <_dtoa_r+0x6be>
 8006baa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bae:	49a5      	ldr	r1, [pc, #660]	@ (8006e44 <_dtoa_r+0x8cc>)
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f7f9 fb69 	bl	8000288 <__aeabi_dsub>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bbe:	f7f9 ff8d 	bl	8000adc <__aeabi_dcmplt>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f43f aef5 	beq.w	80069b2 <_dtoa_r+0x43a>
 8006bc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006bca:	1e73      	subs	r3, r6, #1
 8006bcc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006bce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bd2:	2b30      	cmp	r3, #48	@ 0x30
 8006bd4:	d0f8      	beq.n	8006bc8 <_dtoa_r+0x650>
 8006bd6:	9f04      	ldr	r7, [sp, #16]
 8006bd8:	e73e      	b.n	8006a58 <_dtoa_r+0x4e0>
 8006bda:	4b9b      	ldr	r3, [pc, #620]	@ (8006e48 <_dtoa_r+0x8d0>)
 8006bdc:	f7f9 fd0c 	bl	80005f8 <__aeabi_dmul>
 8006be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006be4:	e7bc      	b.n	8006b60 <_dtoa_r+0x5e8>
 8006be6:	d10c      	bne.n	8006c02 <_dtoa_r+0x68a>
 8006be8:	4b98      	ldr	r3, [pc, #608]	@ (8006e4c <_dtoa_r+0x8d4>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bf0:	f7f9 fd02 	bl	80005f8 <__aeabi_dmul>
 8006bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bf8:	f7f9 ff84 	bl	8000b04 <__aeabi_dcmpge>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f000 8157 	beq.w	8006eb0 <_dtoa_r+0x938>
 8006c02:	2400      	movs	r4, #0
 8006c04:	4625      	mov	r5, r4
 8006c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	4656      	mov	r6, sl
 8006c0e:	2700      	movs	r7, #0
 8006c10:	4621      	mov	r1, r4
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 fbb4 	bl	8007380 <_Bfree>
 8006c18:	2d00      	cmp	r5, #0
 8006c1a:	d0dc      	beq.n	8006bd6 <_dtoa_r+0x65e>
 8006c1c:	b12f      	cbz	r7, 8006c2a <_dtoa_r+0x6b2>
 8006c1e:	42af      	cmp	r7, r5
 8006c20:	d003      	beq.n	8006c2a <_dtoa_r+0x6b2>
 8006c22:	4639      	mov	r1, r7
 8006c24:	4658      	mov	r0, fp
 8006c26:	f000 fbab 	bl	8007380 <_Bfree>
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4658      	mov	r0, fp
 8006c2e:	f000 fba7 	bl	8007380 <_Bfree>
 8006c32:	e7d0      	b.n	8006bd6 <_dtoa_r+0x65e>
 8006c34:	9704      	str	r7, [sp, #16]
 8006c36:	4633      	mov	r3, r6
 8006c38:	461e      	mov	r6, r3
 8006c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c3e:	2a39      	cmp	r2, #57	@ 0x39
 8006c40:	d107      	bne.n	8006c52 <_dtoa_r+0x6da>
 8006c42:	459a      	cmp	sl, r3
 8006c44:	d1f8      	bne.n	8006c38 <_dtoa_r+0x6c0>
 8006c46:	9a04      	ldr	r2, [sp, #16]
 8006c48:	3201      	adds	r2, #1
 8006c4a:	9204      	str	r2, [sp, #16]
 8006c4c:	2230      	movs	r2, #48	@ 0x30
 8006c4e:	f88a 2000 	strb.w	r2, [sl]
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	3201      	adds	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	e7bd      	b.n	8006bd6 <_dtoa_r+0x65e>
 8006c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e48 <_dtoa_r+0x8d0>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f7f9 fccb 	bl	80005f8 <__aeabi_dmul>
 8006c62:	2200      	movs	r2, #0
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	460d      	mov	r5, r1
 8006c6a:	f7f9 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f43f aebb 	beq.w	80069ea <_dtoa_r+0x472>
 8006c74:	e6f0      	b.n	8006a58 <_dtoa_r+0x4e0>
 8006c76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	f000 80db 	beq.w	8006e34 <_dtoa_r+0x8bc>
 8006c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c80:	2a01      	cmp	r2, #1
 8006c82:	f300 80bf 	bgt.w	8006e04 <_dtoa_r+0x88c>
 8006c86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c88:	2a00      	cmp	r2, #0
 8006c8a:	f000 80b7 	beq.w	8006dfc <_dtoa_r+0x884>
 8006c8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c94:	4646      	mov	r6, r8
 8006c96:	9a08      	ldr	r2, [sp, #32]
 8006c98:	2101      	movs	r1, #1
 8006c9a:	441a      	add	r2, r3
 8006c9c:	4658      	mov	r0, fp
 8006c9e:	4498      	add	r8, r3
 8006ca0:	9208      	str	r2, [sp, #32]
 8006ca2:	f000 fc6b 	bl	800757c <__i2b>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b15e      	cbz	r6, 8006cc2 <_dtoa_r+0x74a>
 8006caa:	9b08      	ldr	r3, [sp, #32]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd08      	ble.n	8006cc2 <_dtoa_r+0x74a>
 8006cb0:	42b3      	cmp	r3, r6
 8006cb2:	9a08      	ldr	r2, [sp, #32]
 8006cb4:	bfa8      	it	ge
 8006cb6:	4633      	movge	r3, r6
 8006cb8:	eba8 0803 	sub.w	r8, r8, r3
 8006cbc:	1af6      	subs	r6, r6, r3
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	9308      	str	r3, [sp, #32]
 8006cc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cc4:	b1f3      	cbz	r3, 8006d04 <_dtoa_r+0x78c>
 8006cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80b7 	beq.w	8006e3c <_dtoa_r+0x8c4>
 8006cce:	b18c      	cbz	r4, 8006cf4 <_dtoa_r+0x77c>
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	4658      	mov	r0, fp
 8006cd6:	f000 fd11 	bl	80076fc <__pow5mult>
 8006cda:	464a      	mov	r2, r9
 8006cdc:	4601      	mov	r1, r0
 8006cde:	4605      	mov	r5, r0
 8006ce0:	4658      	mov	r0, fp
 8006ce2:	f000 fc61 	bl	80075a8 <__multiply>
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	9004      	str	r0, [sp, #16]
 8006cea:	4658      	mov	r0, fp
 8006cec:	f000 fb48 	bl	8007380 <_Bfree>
 8006cf0:	9b04      	ldr	r3, [sp, #16]
 8006cf2:	4699      	mov	r9, r3
 8006cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cf6:	1b1a      	subs	r2, r3, r4
 8006cf8:	d004      	beq.n	8006d04 <_dtoa_r+0x78c>
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	f000 fcfd 	bl	80076fc <__pow5mult>
 8006d02:	4681      	mov	r9, r0
 8006d04:	2101      	movs	r1, #1
 8006d06:	4658      	mov	r0, fp
 8006d08:	f000 fc38 	bl	800757c <__i2b>
 8006d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d0e:	4604      	mov	r4, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 81cf 	beq.w	80070b4 <_dtoa_r+0xb3c>
 8006d16:	461a      	mov	r2, r3
 8006d18:	4601      	mov	r1, r0
 8006d1a:	4658      	mov	r0, fp
 8006d1c:	f000 fcee 	bl	80076fc <__pow5mult>
 8006d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	4604      	mov	r4, r0
 8006d26:	f300 8095 	bgt.w	8006e54 <_dtoa_r+0x8dc>
 8006d2a:	9b02      	ldr	r3, [sp, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f040 8087 	bne.w	8006e40 <_dtoa_r+0x8c8>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f040 8089 	bne.w	8006e50 <_dtoa_r+0x8d8>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d44:	0d1b      	lsrs	r3, r3, #20
 8006d46:	051b      	lsls	r3, r3, #20
 8006d48:	b12b      	cbz	r3, 8006d56 <_dtoa_r+0x7de>
 8006d4a:	9b08      	ldr	r3, [sp, #32]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	9308      	str	r3, [sp, #32]
 8006d50:	f108 0801 	add.w	r8, r8, #1
 8006d54:	2301      	movs	r3, #1
 8006d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 81b0 	beq.w	80070c0 <_dtoa_r+0xb48>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d66:	6918      	ldr	r0, [r3, #16]
 8006d68:	f000 fbbc 	bl	80074e4 <__hi0bits>
 8006d6c:	f1c0 0020 	rsb	r0, r0, #32
 8006d70:	9b08      	ldr	r3, [sp, #32]
 8006d72:	4418      	add	r0, r3
 8006d74:	f010 001f 	ands.w	r0, r0, #31
 8006d78:	d077      	beq.n	8006e6a <_dtoa_r+0x8f2>
 8006d7a:	f1c0 0320 	rsb	r3, r0, #32
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	dd6b      	ble.n	8006e5a <_dtoa_r+0x8e2>
 8006d82:	9b08      	ldr	r3, [sp, #32]
 8006d84:	f1c0 001c 	rsb	r0, r0, #28
 8006d88:	4403      	add	r3, r0
 8006d8a:	4480      	add	r8, r0
 8006d8c:	4406      	add	r6, r0
 8006d8e:	9308      	str	r3, [sp, #32]
 8006d90:	f1b8 0f00 	cmp.w	r8, #0
 8006d94:	dd05      	ble.n	8006da2 <_dtoa_r+0x82a>
 8006d96:	4649      	mov	r1, r9
 8006d98:	4642      	mov	r2, r8
 8006d9a:	4658      	mov	r0, fp
 8006d9c:	f000 fd08 	bl	80077b0 <__lshift>
 8006da0:	4681      	mov	r9, r0
 8006da2:	9b08      	ldr	r3, [sp, #32]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dd05      	ble.n	8006db4 <_dtoa_r+0x83c>
 8006da8:	4621      	mov	r1, r4
 8006daa:	461a      	mov	r2, r3
 8006dac:	4658      	mov	r0, fp
 8006dae:	f000 fcff 	bl	80077b0 <__lshift>
 8006db2:	4604      	mov	r4, r0
 8006db4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d059      	beq.n	8006e6e <_dtoa_r+0x8f6>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4648      	mov	r0, r9
 8006dbe:	f000 fd63 	bl	8007888 <__mcmp>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	da53      	bge.n	8006e6e <_dtoa_r+0x8f6>
 8006dc6:	1e7b      	subs	r3, r7, #1
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	4649      	mov	r1, r9
 8006dcc:	2300      	movs	r3, #0
 8006dce:	220a      	movs	r2, #10
 8006dd0:	4658      	mov	r0, fp
 8006dd2:	f000 faf7 	bl	80073c4 <__multadd>
 8006dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd8:	4681      	mov	r9, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 8172 	beq.w	80070c4 <_dtoa_r+0xb4c>
 8006de0:	2300      	movs	r3, #0
 8006de2:	4629      	mov	r1, r5
 8006de4:	220a      	movs	r2, #10
 8006de6:	4658      	mov	r0, fp
 8006de8:	f000 faec 	bl	80073c4 <__multadd>
 8006dec:	9b00      	ldr	r3, [sp, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	4605      	mov	r5, r0
 8006df2:	dc67      	bgt.n	8006ec4 <_dtoa_r+0x94c>
 8006df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	dc41      	bgt.n	8006e7e <_dtoa_r+0x906>
 8006dfa:	e063      	b.n	8006ec4 <_dtoa_r+0x94c>
 8006dfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e02:	e746      	b.n	8006c92 <_dtoa_r+0x71a>
 8006e04:	9b07      	ldr	r3, [sp, #28]
 8006e06:	1e5c      	subs	r4, r3, #1
 8006e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	bfbf      	itttt	lt
 8006e0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006e10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006e12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006e14:	1ae3      	sublt	r3, r4, r3
 8006e16:	bfb4      	ite	lt
 8006e18:	18d2      	addlt	r2, r2, r3
 8006e1a:	1b1c      	subge	r4, r3, r4
 8006e1c:	9b07      	ldr	r3, [sp, #28]
 8006e1e:	bfbc      	itt	lt
 8006e20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006e22:	2400      	movlt	r4, #0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bfb5      	itete	lt
 8006e28:	eba8 0603 	sublt.w	r6, r8, r3
 8006e2c:	9b07      	ldrge	r3, [sp, #28]
 8006e2e:	2300      	movlt	r3, #0
 8006e30:	4646      	movge	r6, r8
 8006e32:	e730      	b.n	8006c96 <_dtoa_r+0x71e>
 8006e34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006e38:	4646      	mov	r6, r8
 8006e3a:	e735      	b.n	8006ca8 <_dtoa_r+0x730>
 8006e3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e3e:	e75c      	b.n	8006cfa <_dtoa_r+0x782>
 8006e40:	2300      	movs	r3, #0
 8006e42:	e788      	b.n	8006d56 <_dtoa_r+0x7de>
 8006e44:	3fe00000 	.word	0x3fe00000
 8006e48:	40240000 	.word	0x40240000
 8006e4c:	40140000 	.word	0x40140000
 8006e50:	9b02      	ldr	r3, [sp, #8]
 8006e52:	e780      	b.n	8006d56 <_dtoa_r+0x7de>
 8006e54:	2300      	movs	r3, #0
 8006e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e58:	e782      	b.n	8006d60 <_dtoa_r+0x7e8>
 8006e5a:	d099      	beq.n	8006d90 <_dtoa_r+0x818>
 8006e5c:	9a08      	ldr	r2, [sp, #32]
 8006e5e:	331c      	adds	r3, #28
 8006e60:	441a      	add	r2, r3
 8006e62:	4498      	add	r8, r3
 8006e64:	441e      	add	r6, r3
 8006e66:	9208      	str	r2, [sp, #32]
 8006e68:	e792      	b.n	8006d90 <_dtoa_r+0x818>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	e7f6      	b.n	8006e5c <_dtoa_r+0x8e4>
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	9704      	str	r7, [sp, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	dc20      	bgt.n	8006eb8 <_dtoa_r+0x940>
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	dd1e      	ble.n	8006ebc <_dtoa_r+0x944>
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f aec0 	bne.w	8006c06 <_dtoa_r+0x68e>
 8006e86:	4621      	mov	r1, r4
 8006e88:	2205      	movs	r2, #5
 8006e8a:	4658      	mov	r0, fp
 8006e8c:	f000 fa9a 	bl	80073c4 <__multadd>
 8006e90:	4601      	mov	r1, r0
 8006e92:	4604      	mov	r4, r0
 8006e94:	4648      	mov	r0, r9
 8006e96:	f000 fcf7 	bl	8007888 <__mcmp>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f77f aeb3 	ble.w	8006c06 <_dtoa_r+0x68e>
 8006ea0:	4656      	mov	r6, sl
 8006ea2:	2331      	movs	r3, #49	@ 0x31
 8006ea4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	9304      	str	r3, [sp, #16]
 8006eae:	e6ae      	b.n	8006c0e <_dtoa_r+0x696>
 8006eb0:	9c07      	ldr	r4, [sp, #28]
 8006eb2:	9704      	str	r7, [sp, #16]
 8006eb4:	4625      	mov	r5, r4
 8006eb6:	e7f3      	b.n	8006ea0 <_dtoa_r+0x928>
 8006eb8:	9b07      	ldr	r3, [sp, #28]
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 8104 	beq.w	80070cc <_dtoa_r+0xb54>
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	dd05      	ble.n	8006ed4 <_dtoa_r+0x95c>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4632      	mov	r2, r6
 8006ecc:	4658      	mov	r0, fp
 8006ece:	f000 fc6f 	bl	80077b0 <__lshift>
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d05a      	beq.n	8006f90 <_dtoa_r+0xa18>
 8006eda:	6869      	ldr	r1, [r5, #4]
 8006edc:	4658      	mov	r0, fp
 8006ede:	f000 fa0f 	bl	8007300 <_Balloc>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	b928      	cbnz	r0, 8006ef2 <_dtoa_r+0x97a>
 8006ee6:	4b84      	ldr	r3, [pc, #528]	@ (80070f8 <_dtoa_r+0xb80>)
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006eee:	f7ff bb5a 	b.w	80065a6 <_dtoa_r+0x2e>
 8006ef2:	692a      	ldr	r2, [r5, #16]
 8006ef4:	3202      	adds	r2, #2
 8006ef6:	0092      	lsls	r2, r2, #2
 8006ef8:	f105 010c 	add.w	r1, r5, #12
 8006efc:	300c      	adds	r0, #12
 8006efe:	f001 ff75 	bl	8008dec <memcpy>
 8006f02:	2201      	movs	r2, #1
 8006f04:	4631      	mov	r1, r6
 8006f06:	4658      	mov	r0, fp
 8006f08:	f000 fc52 	bl	80077b0 <__lshift>
 8006f0c:	f10a 0301 	add.w	r3, sl, #1
 8006f10:	9307      	str	r3, [sp, #28]
 8006f12:	9b00      	ldr	r3, [sp, #0]
 8006f14:	4453      	add	r3, sl
 8006f16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	462f      	mov	r7, r5
 8006f20:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f22:	4605      	mov	r5, r0
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	4621      	mov	r1, r4
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	f7ff fa9b 	bl	8006468 <quorem>
 8006f32:	4639      	mov	r1, r7
 8006f34:	9002      	str	r0, [sp, #8]
 8006f36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f3a:	4648      	mov	r0, r9
 8006f3c:	f000 fca4 	bl	8007888 <__mcmp>
 8006f40:	462a      	mov	r2, r5
 8006f42:	9008      	str	r0, [sp, #32]
 8006f44:	4621      	mov	r1, r4
 8006f46:	4658      	mov	r0, fp
 8006f48:	f000 fcba 	bl	80078c0 <__mdiff>
 8006f4c:	68c2      	ldr	r2, [r0, #12]
 8006f4e:	4606      	mov	r6, r0
 8006f50:	bb02      	cbnz	r2, 8006f94 <_dtoa_r+0xa1c>
 8006f52:	4601      	mov	r1, r0
 8006f54:	4648      	mov	r0, r9
 8006f56:	f000 fc97 	bl	8007888 <__mcmp>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4658      	mov	r0, fp
 8006f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f62:	f000 fa0d 	bl	8007380 <_Bfree>
 8006f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f6a:	9e07      	ldr	r6, [sp, #28]
 8006f6c:	ea43 0102 	orr.w	r1, r3, r2
 8006f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f72:	4319      	orrs	r1, r3
 8006f74:	d110      	bne.n	8006f98 <_dtoa_r+0xa20>
 8006f76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f7a:	d029      	beq.n	8006fd0 <_dtoa_r+0xa58>
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	dd02      	ble.n	8006f88 <_dtoa_r+0xa10>
 8006f82:	9b02      	ldr	r3, [sp, #8]
 8006f84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f88:	9b00      	ldr	r3, [sp, #0]
 8006f8a:	f883 8000 	strb.w	r8, [r3]
 8006f8e:	e63f      	b.n	8006c10 <_dtoa_r+0x698>
 8006f90:	4628      	mov	r0, r5
 8006f92:	e7bb      	b.n	8006f0c <_dtoa_r+0x994>
 8006f94:	2201      	movs	r2, #1
 8006f96:	e7e1      	b.n	8006f5c <_dtoa_r+0x9e4>
 8006f98:	9b08      	ldr	r3, [sp, #32]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	db04      	blt.n	8006fa8 <_dtoa_r+0xa30>
 8006f9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	d120      	bne.n	8006fea <_dtoa_r+0xa72>
 8006fa8:	2a00      	cmp	r2, #0
 8006faa:	dded      	ble.n	8006f88 <_dtoa_r+0xa10>
 8006fac:	4649      	mov	r1, r9
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4658      	mov	r0, fp
 8006fb2:	f000 fbfd 	bl	80077b0 <__lshift>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4681      	mov	r9, r0
 8006fba:	f000 fc65 	bl	8007888 <__mcmp>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	dc03      	bgt.n	8006fca <_dtoa_r+0xa52>
 8006fc2:	d1e1      	bne.n	8006f88 <_dtoa_r+0xa10>
 8006fc4:	f018 0f01 	tst.w	r8, #1
 8006fc8:	d0de      	beq.n	8006f88 <_dtoa_r+0xa10>
 8006fca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fce:	d1d8      	bne.n	8006f82 <_dtoa_r+0xa0a>
 8006fd0:	9a00      	ldr	r2, [sp, #0]
 8006fd2:	2339      	movs	r3, #57	@ 0x39
 8006fd4:	7013      	strb	r3, [r2, #0]
 8006fd6:	4633      	mov	r3, r6
 8006fd8:	461e      	mov	r6, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fe0:	2a39      	cmp	r2, #57	@ 0x39
 8006fe2:	d052      	beq.n	800708a <_dtoa_r+0xb12>
 8006fe4:	3201      	adds	r2, #1
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	e612      	b.n	8006c10 <_dtoa_r+0x698>
 8006fea:	2a00      	cmp	r2, #0
 8006fec:	dd07      	ble.n	8006ffe <_dtoa_r+0xa86>
 8006fee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ff2:	d0ed      	beq.n	8006fd0 <_dtoa_r+0xa58>
 8006ff4:	9a00      	ldr	r2, [sp, #0]
 8006ff6:	f108 0301 	add.w	r3, r8, #1
 8006ffa:	7013      	strb	r3, [r2, #0]
 8006ffc:	e608      	b.n	8006c10 <_dtoa_r+0x698>
 8006ffe:	9b07      	ldr	r3, [sp, #28]
 8007000:	9a07      	ldr	r2, [sp, #28]
 8007002:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007008:	4293      	cmp	r3, r2
 800700a:	d028      	beq.n	800705e <_dtoa_r+0xae6>
 800700c:	4649      	mov	r1, r9
 800700e:	2300      	movs	r3, #0
 8007010:	220a      	movs	r2, #10
 8007012:	4658      	mov	r0, fp
 8007014:	f000 f9d6 	bl	80073c4 <__multadd>
 8007018:	42af      	cmp	r7, r5
 800701a:	4681      	mov	r9, r0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	f04f 020a 	mov.w	r2, #10
 8007024:	4639      	mov	r1, r7
 8007026:	4658      	mov	r0, fp
 8007028:	d107      	bne.n	800703a <_dtoa_r+0xac2>
 800702a:	f000 f9cb 	bl	80073c4 <__multadd>
 800702e:	4607      	mov	r7, r0
 8007030:	4605      	mov	r5, r0
 8007032:	9b07      	ldr	r3, [sp, #28]
 8007034:	3301      	adds	r3, #1
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	e774      	b.n	8006f24 <_dtoa_r+0x9ac>
 800703a:	f000 f9c3 	bl	80073c4 <__multadd>
 800703e:	4629      	mov	r1, r5
 8007040:	4607      	mov	r7, r0
 8007042:	2300      	movs	r3, #0
 8007044:	220a      	movs	r2, #10
 8007046:	4658      	mov	r0, fp
 8007048:	f000 f9bc 	bl	80073c4 <__multadd>
 800704c:	4605      	mov	r5, r0
 800704e:	e7f0      	b.n	8007032 <_dtoa_r+0xaba>
 8007050:	9b00      	ldr	r3, [sp, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	bfcc      	ite	gt
 8007056:	461e      	movgt	r6, r3
 8007058:	2601      	movle	r6, #1
 800705a:	4456      	add	r6, sl
 800705c:	2700      	movs	r7, #0
 800705e:	4649      	mov	r1, r9
 8007060:	2201      	movs	r2, #1
 8007062:	4658      	mov	r0, fp
 8007064:	f000 fba4 	bl	80077b0 <__lshift>
 8007068:	4621      	mov	r1, r4
 800706a:	4681      	mov	r9, r0
 800706c:	f000 fc0c 	bl	8007888 <__mcmp>
 8007070:	2800      	cmp	r0, #0
 8007072:	dcb0      	bgt.n	8006fd6 <_dtoa_r+0xa5e>
 8007074:	d102      	bne.n	800707c <_dtoa_r+0xb04>
 8007076:	f018 0f01 	tst.w	r8, #1
 800707a:	d1ac      	bne.n	8006fd6 <_dtoa_r+0xa5e>
 800707c:	4633      	mov	r3, r6
 800707e:	461e      	mov	r6, r3
 8007080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007084:	2a30      	cmp	r2, #48	@ 0x30
 8007086:	d0fa      	beq.n	800707e <_dtoa_r+0xb06>
 8007088:	e5c2      	b.n	8006c10 <_dtoa_r+0x698>
 800708a:	459a      	cmp	sl, r3
 800708c:	d1a4      	bne.n	8006fd8 <_dtoa_r+0xa60>
 800708e:	9b04      	ldr	r3, [sp, #16]
 8007090:	3301      	adds	r3, #1
 8007092:	9304      	str	r3, [sp, #16]
 8007094:	2331      	movs	r3, #49	@ 0x31
 8007096:	f88a 3000 	strb.w	r3, [sl]
 800709a:	e5b9      	b.n	8006c10 <_dtoa_r+0x698>
 800709c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800709e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80070fc <_dtoa_r+0xb84>
 80070a2:	b11b      	cbz	r3, 80070ac <_dtoa_r+0xb34>
 80070a4:	f10a 0308 	add.w	r3, sl, #8
 80070a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	4650      	mov	r0, sl
 80070ae:	b019      	add	sp, #100	@ 0x64
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	f77f ae37 	ble.w	8006d2a <_dtoa_r+0x7b2>
 80070bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070be:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c0:	2001      	movs	r0, #1
 80070c2:	e655      	b.n	8006d70 <_dtoa_r+0x7f8>
 80070c4:	9b00      	ldr	r3, [sp, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f77f aed6 	ble.w	8006e78 <_dtoa_r+0x900>
 80070cc:	4656      	mov	r6, sl
 80070ce:	4621      	mov	r1, r4
 80070d0:	4648      	mov	r0, r9
 80070d2:	f7ff f9c9 	bl	8006468 <quorem>
 80070d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80070da:	f806 8b01 	strb.w	r8, [r6], #1
 80070de:	9b00      	ldr	r3, [sp, #0]
 80070e0:	eba6 020a 	sub.w	r2, r6, sl
 80070e4:	4293      	cmp	r3, r2
 80070e6:	ddb3      	ble.n	8007050 <_dtoa_r+0xad8>
 80070e8:	4649      	mov	r1, r9
 80070ea:	2300      	movs	r3, #0
 80070ec:	220a      	movs	r2, #10
 80070ee:	4658      	mov	r0, fp
 80070f0:	f000 f968 	bl	80073c4 <__multadd>
 80070f4:	4681      	mov	r9, r0
 80070f6:	e7ea      	b.n	80070ce <_dtoa_r+0xb56>
 80070f8:	08009c6d 	.word	0x08009c6d
 80070fc:	08009bf1 	.word	0x08009bf1

08007100 <_free_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4605      	mov	r5, r0
 8007104:	2900      	cmp	r1, #0
 8007106:	d041      	beq.n	800718c <_free_r+0x8c>
 8007108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800710c:	1f0c      	subs	r4, r1, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	bfb8      	it	lt
 8007112:	18e4      	addlt	r4, r4, r3
 8007114:	f000 f8e8 	bl	80072e8 <__malloc_lock>
 8007118:	4a1d      	ldr	r2, [pc, #116]	@ (8007190 <_free_r+0x90>)
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	b933      	cbnz	r3, 800712c <_free_r+0x2c>
 800711e:	6063      	str	r3, [r4, #4]
 8007120:	6014      	str	r4, [r2, #0]
 8007122:	4628      	mov	r0, r5
 8007124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007128:	f000 b8e4 	b.w	80072f4 <__malloc_unlock>
 800712c:	42a3      	cmp	r3, r4
 800712e:	d908      	bls.n	8007142 <_free_r+0x42>
 8007130:	6820      	ldr	r0, [r4, #0]
 8007132:	1821      	adds	r1, r4, r0
 8007134:	428b      	cmp	r3, r1
 8007136:	bf01      	itttt	eq
 8007138:	6819      	ldreq	r1, [r3, #0]
 800713a:	685b      	ldreq	r3, [r3, #4]
 800713c:	1809      	addeq	r1, r1, r0
 800713e:	6021      	streq	r1, [r4, #0]
 8007140:	e7ed      	b.n	800711e <_free_r+0x1e>
 8007142:	461a      	mov	r2, r3
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b10b      	cbz	r3, 800714c <_free_r+0x4c>
 8007148:	42a3      	cmp	r3, r4
 800714a:	d9fa      	bls.n	8007142 <_free_r+0x42>
 800714c:	6811      	ldr	r1, [r2, #0]
 800714e:	1850      	adds	r0, r2, r1
 8007150:	42a0      	cmp	r0, r4
 8007152:	d10b      	bne.n	800716c <_free_r+0x6c>
 8007154:	6820      	ldr	r0, [r4, #0]
 8007156:	4401      	add	r1, r0
 8007158:	1850      	adds	r0, r2, r1
 800715a:	4283      	cmp	r3, r0
 800715c:	6011      	str	r1, [r2, #0]
 800715e:	d1e0      	bne.n	8007122 <_free_r+0x22>
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	6053      	str	r3, [r2, #4]
 8007166:	4408      	add	r0, r1
 8007168:	6010      	str	r0, [r2, #0]
 800716a:	e7da      	b.n	8007122 <_free_r+0x22>
 800716c:	d902      	bls.n	8007174 <_free_r+0x74>
 800716e:	230c      	movs	r3, #12
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	e7d6      	b.n	8007122 <_free_r+0x22>
 8007174:	6820      	ldr	r0, [r4, #0]
 8007176:	1821      	adds	r1, r4, r0
 8007178:	428b      	cmp	r3, r1
 800717a:	bf04      	itt	eq
 800717c:	6819      	ldreq	r1, [r3, #0]
 800717e:	685b      	ldreq	r3, [r3, #4]
 8007180:	6063      	str	r3, [r4, #4]
 8007182:	bf04      	itt	eq
 8007184:	1809      	addeq	r1, r1, r0
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	6054      	str	r4, [r2, #4]
 800718a:	e7ca      	b.n	8007122 <_free_r+0x22>
 800718c:	bd38      	pop	{r3, r4, r5, pc}
 800718e:	bf00      	nop
 8007190:	200005c0 	.word	0x200005c0

08007194 <malloc>:
 8007194:	4b02      	ldr	r3, [pc, #8]	@ (80071a0 <malloc+0xc>)
 8007196:	4601      	mov	r1, r0
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	f000 b825 	b.w	80071e8 <_malloc_r>
 800719e:	bf00      	nop
 80071a0:	20000018 	.word	0x20000018

080071a4 <sbrk_aligned>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4e0f      	ldr	r6, [pc, #60]	@ (80071e4 <sbrk_aligned+0x40>)
 80071a8:	460c      	mov	r4, r1
 80071aa:	6831      	ldr	r1, [r6, #0]
 80071ac:	4605      	mov	r5, r0
 80071ae:	b911      	cbnz	r1, 80071b6 <sbrk_aligned+0x12>
 80071b0:	f001 fe0c 	bl	8008dcc <_sbrk_r>
 80071b4:	6030      	str	r0, [r6, #0]
 80071b6:	4621      	mov	r1, r4
 80071b8:	4628      	mov	r0, r5
 80071ba:	f001 fe07 	bl	8008dcc <_sbrk_r>
 80071be:	1c43      	adds	r3, r0, #1
 80071c0:	d103      	bne.n	80071ca <sbrk_aligned+0x26>
 80071c2:	f04f 34ff 	mov.w	r4, #4294967295
 80071c6:	4620      	mov	r0, r4
 80071c8:	bd70      	pop	{r4, r5, r6, pc}
 80071ca:	1cc4      	adds	r4, r0, #3
 80071cc:	f024 0403 	bic.w	r4, r4, #3
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d0f8      	beq.n	80071c6 <sbrk_aligned+0x22>
 80071d4:	1a21      	subs	r1, r4, r0
 80071d6:	4628      	mov	r0, r5
 80071d8:	f001 fdf8 	bl	8008dcc <_sbrk_r>
 80071dc:	3001      	adds	r0, #1
 80071de:	d1f2      	bne.n	80071c6 <sbrk_aligned+0x22>
 80071e0:	e7ef      	b.n	80071c2 <sbrk_aligned+0x1e>
 80071e2:	bf00      	nop
 80071e4:	200005bc 	.word	0x200005bc

080071e8 <_malloc_r>:
 80071e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ec:	1ccd      	adds	r5, r1, #3
 80071ee:	f025 0503 	bic.w	r5, r5, #3
 80071f2:	3508      	adds	r5, #8
 80071f4:	2d0c      	cmp	r5, #12
 80071f6:	bf38      	it	cc
 80071f8:	250c      	movcc	r5, #12
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	4606      	mov	r6, r0
 80071fe:	db01      	blt.n	8007204 <_malloc_r+0x1c>
 8007200:	42a9      	cmp	r1, r5
 8007202:	d904      	bls.n	800720e <_malloc_r+0x26>
 8007204:	230c      	movs	r3, #12
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	2000      	movs	r0, #0
 800720a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800720e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072e4 <_malloc_r+0xfc>
 8007212:	f000 f869 	bl	80072e8 <__malloc_lock>
 8007216:	f8d8 3000 	ldr.w	r3, [r8]
 800721a:	461c      	mov	r4, r3
 800721c:	bb44      	cbnz	r4, 8007270 <_malloc_r+0x88>
 800721e:	4629      	mov	r1, r5
 8007220:	4630      	mov	r0, r6
 8007222:	f7ff ffbf 	bl	80071a4 <sbrk_aligned>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	4604      	mov	r4, r0
 800722a:	d158      	bne.n	80072de <_malloc_r+0xf6>
 800722c:	f8d8 4000 	ldr.w	r4, [r8]
 8007230:	4627      	mov	r7, r4
 8007232:	2f00      	cmp	r7, #0
 8007234:	d143      	bne.n	80072be <_malloc_r+0xd6>
 8007236:	2c00      	cmp	r4, #0
 8007238:	d04b      	beq.n	80072d2 <_malloc_r+0xea>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	4639      	mov	r1, r7
 800723e:	4630      	mov	r0, r6
 8007240:	eb04 0903 	add.w	r9, r4, r3
 8007244:	f001 fdc2 	bl	8008dcc <_sbrk_r>
 8007248:	4581      	cmp	r9, r0
 800724a:	d142      	bne.n	80072d2 <_malloc_r+0xea>
 800724c:	6821      	ldr	r1, [r4, #0]
 800724e:	1a6d      	subs	r5, r5, r1
 8007250:	4629      	mov	r1, r5
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff ffa6 	bl	80071a4 <sbrk_aligned>
 8007258:	3001      	adds	r0, #1
 800725a:	d03a      	beq.n	80072d2 <_malloc_r+0xea>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	442b      	add	r3, r5
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	f8d8 3000 	ldr.w	r3, [r8]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	bb62      	cbnz	r2, 80072c4 <_malloc_r+0xdc>
 800726a:	f8c8 7000 	str.w	r7, [r8]
 800726e:	e00f      	b.n	8007290 <_malloc_r+0xa8>
 8007270:	6822      	ldr	r2, [r4, #0]
 8007272:	1b52      	subs	r2, r2, r5
 8007274:	d420      	bmi.n	80072b8 <_malloc_r+0xd0>
 8007276:	2a0b      	cmp	r2, #11
 8007278:	d917      	bls.n	80072aa <_malloc_r+0xc2>
 800727a:	1961      	adds	r1, r4, r5
 800727c:	42a3      	cmp	r3, r4
 800727e:	6025      	str	r5, [r4, #0]
 8007280:	bf18      	it	ne
 8007282:	6059      	strne	r1, [r3, #4]
 8007284:	6863      	ldr	r3, [r4, #4]
 8007286:	bf08      	it	eq
 8007288:	f8c8 1000 	streq.w	r1, [r8]
 800728c:	5162      	str	r2, [r4, r5]
 800728e:	604b      	str	r3, [r1, #4]
 8007290:	4630      	mov	r0, r6
 8007292:	f000 f82f 	bl	80072f4 <__malloc_unlock>
 8007296:	f104 000b 	add.w	r0, r4, #11
 800729a:	1d23      	adds	r3, r4, #4
 800729c:	f020 0007 	bic.w	r0, r0, #7
 80072a0:	1ac2      	subs	r2, r0, r3
 80072a2:	bf1c      	itt	ne
 80072a4:	1a1b      	subne	r3, r3, r0
 80072a6:	50a3      	strne	r3, [r4, r2]
 80072a8:	e7af      	b.n	800720a <_malloc_r+0x22>
 80072aa:	6862      	ldr	r2, [r4, #4]
 80072ac:	42a3      	cmp	r3, r4
 80072ae:	bf0c      	ite	eq
 80072b0:	f8c8 2000 	streq.w	r2, [r8]
 80072b4:	605a      	strne	r2, [r3, #4]
 80072b6:	e7eb      	b.n	8007290 <_malloc_r+0xa8>
 80072b8:	4623      	mov	r3, r4
 80072ba:	6864      	ldr	r4, [r4, #4]
 80072bc:	e7ae      	b.n	800721c <_malloc_r+0x34>
 80072be:	463c      	mov	r4, r7
 80072c0:	687f      	ldr	r7, [r7, #4]
 80072c2:	e7b6      	b.n	8007232 <_malloc_r+0x4a>
 80072c4:	461a      	mov	r2, r3
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	d1fb      	bne.n	80072c4 <_malloc_r+0xdc>
 80072cc:	2300      	movs	r3, #0
 80072ce:	6053      	str	r3, [r2, #4]
 80072d0:	e7de      	b.n	8007290 <_malloc_r+0xa8>
 80072d2:	230c      	movs	r3, #12
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	4630      	mov	r0, r6
 80072d8:	f000 f80c 	bl	80072f4 <__malloc_unlock>
 80072dc:	e794      	b.n	8007208 <_malloc_r+0x20>
 80072de:	6005      	str	r5, [r0, #0]
 80072e0:	e7d6      	b.n	8007290 <_malloc_r+0xa8>
 80072e2:	bf00      	nop
 80072e4:	200005c0 	.word	0x200005c0

080072e8 <__malloc_lock>:
 80072e8:	4801      	ldr	r0, [pc, #4]	@ (80072f0 <__malloc_lock+0x8>)
 80072ea:	f7ff b8b4 	b.w	8006456 <__retarget_lock_acquire_recursive>
 80072ee:	bf00      	nop
 80072f0:	200005b8 	.word	0x200005b8

080072f4 <__malloc_unlock>:
 80072f4:	4801      	ldr	r0, [pc, #4]	@ (80072fc <__malloc_unlock+0x8>)
 80072f6:	f7ff b8af 	b.w	8006458 <__retarget_lock_release_recursive>
 80072fa:	bf00      	nop
 80072fc:	200005b8 	.word	0x200005b8

08007300 <_Balloc>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	69c6      	ldr	r6, [r0, #28]
 8007304:	4604      	mov	r4, r0
 8007306:	460d      	mov	r5, r1
 8007308:	b976      	cbnz	r6, 8007328 <_Balloc+0x28>
 800730a:	2010      	movs	r0, #16
 800730c:	f7ff ff42 	bl	8007194 <malloc>
 8007310:	4602      	mov	r2, r0
 8007312:	61e0      	str	r0, [r4, #28]
 8007314:	b920      	cbnz	r0, 8007320 <_Balloc+0x20>
 8007316:	4b18      	ldr	r3, [pc, #96]	@ (8007378 <_Balloc+0x78>)
 8007318:	4818      	ldr	r0, [pc, #96]	@ (800737c <_Balloc+0x7c>)
 800731a:	216b      	movs	r1, #107	@ 0x6b
 800731c:	f001 fd7c 	bl	8008e18 <__assert_func>
 8007320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007324:	6006      	str	r6, [r0, #0]
 8007326:	60c6      	str	r6, [r0, #12]
 8007328:	69e6      	ldr	r6, [r4, #28]
 800732a:	68f3      	ldr	r3, [r6, #12]
 800732c:	b183      	cbz	r3, 8007350 <_Balloc+0x50>
 800732e:	69e3      	ldr	r3, [r4, #28]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007336:	b9b8      	cbnz	r0, 8007368 <_Balloc+0x68>
 8007338:	2101      	movs	r1, #1
 800733a:	fa01 f605 	lsl.w	r6, r1, r5
 800733e:	1d72      	adds	r2, r6, #5
 8007340:	0092      	lsls	r2, r2, #2
 8007342:	4620      	mov	r0, r4
 8007344:	f001 fd86 	bl	8008e54 <_calloc_r>
 8007348:	b160      	cbz	r0, 8007364 <_Balloc+0x64>
 800734a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800734e:	e00e      	b.n	800736e <_Balloc+0x6e>
 8007350:	2221      	movs	r2, #33	@ 0x21
 8007352:	2104      	movs	r1, #4
 8007354:	4620      	mov	r0, r4
 8007356:	f001 fd7d 	bl	8008e54 <_calloc_r>
 800735a:	69e3      	ldr	r3, [r4, #28]
 800735c:	60f0      	str	r0, [r6, #12]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e4      	bne.n	800732e <_Balloc+0x2e>
 8007364:	2000      	movs	r0, #0
 8007366:	bd70      	pop	{r4, r5, r6, pc}
 8007368:	6802      	ldr	r2, [r0, #0]
 800736a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800736e:	2300      	movs	r3, #0
 8007370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007374:	e7f7      	b.n	8007366 <_Balloc+0x66>
 8007376:	bf00      	nop
 8007378:	08009bfe 	.word	0x08009bfe
 800737c:	08009c7e 	.word	0x08009c7e

08007380 <_Bfree>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	69c6      	ldr	r6, [r0, #28]
 8007384:	4605      	mov	r5, r0
 8007386:	460c      	mov	r4, r1
 8007388:	b976      	cbnz	r6, 80073a8 <_Bfree+0x28>
 800738a:	2010      	movs	r0, #16
 800738c:	f7ff ff02 	bl	8007194 <malloc>
 8007390:	4602      	mov	r2, r0
 8007392:	61e8      	str	r0, [r5, #28]
 8007394:	b920      	cbnz	r0, 80073a0 <_Bfree+0x20>
 8007396:	4b09      	ldr	r3, [pc, #36]	@ (80073bc <_Bfree+0x3c>)
 8007398:	4809      	ldr	r0, [pc, #36]	@ (80073c0 <_Bfree+0x40>)
 800739a:	218f      	movs	r1, #143	@ 0x8f
 800739c:	f001 fd3c 	bl	8008e18 <__assert_func>
 80073a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073a4:	6006      	str	r6, [r0, #0]
 80073a6:	60c6      	str	r6, [r0, #12]
 80073a8:	b13c      	cbz	r4, 80073ba <_Bfree+0x3a>
 80073aa:	69eb      	ldr	r3, [r5, #28]
 80073ac:	6862      	ldr	r2, [r4, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073b4:	6021      	str	r1, [r4, #0]
 80073b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	08009bfe 	.word	0x08009bfe
 80073c0:	08009c7e 	.word	0x08009c7e

080073c4 <__multadd>:
 80073c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c8:	690d      	ldr	r5, [r1, #16]
 80073ca:	4607      	mov	r7, r0
 80073cc:	460c      	mov	r4, r1
 80073ce:	461e      	mov	r6, r3
 80073d0:	f101 0c14 	add.w	ip, r1, #20
 80073d4:	2000      	movs	r0, #0
 80073d6:	f8dc 3000 	ldr.w	r3, [ip]
 80073da:	b299      	uxth	r1, r3
 80073dc:	fb02 6101 	mla	r1, r2, r1, r6
 80073e0:	0c1e      	lsrs	r6, r3, #16
 80073e2:	0c0b      	lsrs	r3, r1, #16
 80073e4:	fb02 3306 	mla	r3, r2, r6, r3
 80073e8:	b289      	uxth	r1, r1
 80073ea:	3001      	adds	r0, #1
 80073ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073f0:	4285      	cmp	r5, r0
 80073f2:	f84c 1b04 	str.w	r1, [ip], #4
 80073f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073fa:	dcec      	bgt.n	80073d6 <__multadd+0x12>
 80073fc:	b30e      	cbz	r6, 8007442 <__multadd+0x7e>
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	42ab      	cmp	r3, r5
 8007402:	dc19      	bgt.n	8007438 <__multadd+0x74>
 8007404:	6861      	ldr	r1, [r4, #4]
 8007406:	4638      	mov	r0, r7
 8007408:	3101      	adds	r1, #1
 800740a:	f7ff ff79 	bl	8007300 <_Balloc>
 800740e:	4680      	mov	r8, r0
 8007410:	b928      	cbnz	r0, 800741e <__multadd+0x5a>
 8007412:	4602      	mov	r2, r0
 8007414:	4b0c      	ldr	r3, [pc, #48]	@ (8007448 <__multadd+0x84>)
 8007416:	480d      	ldr	r0, [pc, #52]	@ (800744c <__multadd+0x88>)
 8007418:	21ba      	movs	r1, #186	@ 0xba
 800741a:	f001 fcfd 	bl	8008e18 <__assert_func>
 800741e:	6922      	ldr	r2, [r4, #16]
 8007420:	3202      	adds	r2, #2
 8007422:	f104 010c 	add.w	r1, r4, #12
 8007426:	0092      	lsls	r2, r2, #2
 8007428:	300c      	adds	r0, #12
 800742a:	f001 fcdf 	bl	8008dec <memcpy>
 800742e:	4621      	mov	r1, r4
 8007430:	4638      	mov	r0, r7
 8007432:	f7ff ffa5 	bl	8007380 <_Bfree>
 8007436:	4644      	mov	r4, r8
 8007438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800743c:	3501      	adds	r5, #1
 800743e:	615e      	str	r6, [r3, #20]
 8007440:	6125      	str	r5, [r4, #16]
 8007442:	4620      	mov	r0, r4
 8007444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007448:	08009c6d 	.word	0x08009c6d
 800744c:	08009c7e 	.word	0x08009c7e

08007450 <__s2b>:
 8007450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007454:	460c      	mov	r4, r1
 8007456:	4615      	mov	r5, r2
 8007458:	461f      	mov	r7, r3
 800745a:	2209      	movs	r2, #9
 800745c:	3308      	adds	r3, #8
 800745e:	4606      	mov	r6, r0
 8007460:	fb93 f3f2 	sdiv	r3, r3, r2
 8007464:	2100      	movs	r1, #0
 8007466:	2201      	movs	r2, #1
 8007468:	429a      	cmp	r2, r3
 800746a:	db09      	blt.n	8007480 <__s2b+0x30>
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff ff47 	bl	8007300 <_Balloc>
 8007472:	b940      	cbnz	r0, 8007486 <__s2b+0x36>
 8007474:	4602      	mov	r2, r0
 8007476:	4b19      	ldr	r3, [pc, #100]	@ (80074dc <__s2b+0x8c>)
 8007478:	4819      	ldr	r0, [pc, #100]	@ (80074e0 <__s2b+0x90>)
 800747a:	21d3      	movs	r1, #211	@ 0xd3
 800747c:	f001 fccc 	bl	8008e18 <__assert_func>
 8007480:	0052      	lsls	r2, r2, #1
 8007482:	3101      	adds	r1, #1
 8007484:	e7f0      	b.n	8007468 <__s2b+0x18>
 8007486:	9b08      	ldr	r3, [sp, #32]
 8007488:	6143      	str	r3, [r0, #20]
 800748a:	2d09      	cmp	r5, #9
 800748c:	f04f 0301 	mov.w	r3, #1
 8007490:	6103      	str	r3, [r0, #16]
 8007492:	dd16      	ble.n	80074c2 <__s2b+0x72>
 8007494:	f104 0909 	add.w	r9, r4, #9
 8007498:	46c8      	mov	r8, r9
 800749a:	442c      	add	r4, r5
 800749c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074a0:	4601      	mov	r1, r0
 80074a2:	3b30      	subs	r3, #48	@ 0x30
 80074a4:	220a      	movs	r2, #10
 80074a6:	4630      	mov	r0, r6
 80074a8:	f7ff ff8c 	bl	80073c4 <__multadd>
 80074ac:	45a0      	cmp	r8, r4
 80074ae:	d1f5      	bne.n	800749c <__s2b+0x4c>
 80074b0:	f1a5 0408 	sub.w	r4, r5, #8
 80074b4:	444c      	add	r4, r9
 80074b6:	1b2d      	subs	r5, r5, r4
 80074b8:	1963      	adds	r3, r4, r5
 80074ba:	42bb      	cmp	r3, r7
 80074bc:	db04      	blt.n	80074c8 <__s2b+0x78>
 80074be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c2:	340a      	adds	r4, #10
 80074c4:	2509      	movs	r5, #9
 80074c6:	e7f6      	b.n	80074b6 <__s2b+0x66>
 80074c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074cc:	4601      	mov	r1, r0
 80074ce:	3b30      	subs	r3, #48	@ 0x30
 80074d0:	220a      	movs	r2, #10
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ff76 	bl	80073c4 <__multadd>
 80074d8:	e7ee      	b.n	80074b8 <__s2b+0x68>
 80074da:	bf00      	nop
 80074dc:	08009c6d 	.word	0x08009c6d
 80074e0:	08009c7e 	.word	0x08009c7e

080074e4 <__hi0bits>:
 80074e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80074e8:	4603      	mov	r3, r0
 80074ea:	bf36      	itet	cc
 80074ec:	0403      	lslcc	r3, r0, #16
 80074ee:	2000      	movcs	r0, #0
 80074f0:	2010      	movcc	r0, #16
 80074f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074f6:	bf3c      	itt	cc
 80074f8:	021b      	lslcc	r3, r3, #8
 80074fa:	3008      	addcc	r0, #8
 80074fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007500:	bf3c      	itt	cc
 8007502:	011b      	lslcc	r3, r3, #4
 8007504:	3004      	addcc	r0, #4
 8007506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800750a:	bf3c      	itt	cc
 800750c:	009b      	lslcc	r3, r3, #2
 800750e:	3002      	addcc	r0, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	db05      	blt.n	8007520 <__hi0bits+0x3c>
 8007514:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007518:	f100 0001 	add.w	r0, r0, #1
 800751c:	bf08      	it	eq
 800751e:	2020      	moveq	r0, #32
 8007520:	4770      	bx	lr

08007522 <__lo0bits>:
 8007522:	6803      	ldr	r3, [r0, #0]
 8007524:	4602      	mov	r2, r0
 8007526:	f013 0007 	ands.w	r0, r3, #7
 800752a:	d00b      	beq.n	8007544 <__lo0bits+0x22>
 800752c:	07d9      	lsls	r1, r3, #31
 800752e:	d421      	bmi.n	8007574 <__lo0bits+0x52>
 8007530:	0798      	lsls	r0, r3, #30
 8007532:	bf49      	itett	mi
 8007534:	085b      	lsrmi	r3, r3, #1
 8007536:	089b      	lsrpl	r3, r3, #2
 8007538:	2001      	movmi	r0, #1
 800753a:	6013      	strmi	r3, [r2, #0]
 800753c:	bf5c      	itt	pl
 800753e:	6013      	strpl	r3, [r2, #0]
 8007540:	2002      	movpl	r0, #2
 8007542:	4770      	bx	lr
 8007544:	b299      	uxth	r1, r3
 8007546:	b909      	cbnz	r1, 800754c <__lo0bits+0x2a>
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	2010      	movs	r0, #16
 800754c:	b2d9      	uxtb	r1, r3
 800754e:	b909      	cbnz	r1, 8007554 <__lo0bits+0x32>
 8007550:	3008      	adds	r0, #8
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	0719      	lsls	r1, r3, #28
 8007556:	bf04      	itt	eq
 8007558:	091b      	lsreq	r3, r3, #4
 800755a:	3004      	addeq	r0, #4
 800755c:	0799      	lsls	r1, r3, #30
 800755e:	bf04      	itt	eq
 8007560:	089b      	lsreq	r3, r3, #2
 8007562:	3002      	addeq	r0, #2
 8007564:	07d9      	lsls	r1, r3, #31
 8007566:	d403      	bmi.n	8007570 <__lo0bits+0x4e>
 8007568:	085b      	lsrs	r3, r3, #1
 800756a:	f100 0001 	add.w	r0, r0, #1
 800756e:	d003      	beq.n	8007578 <__lo0bits+0x56>
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	4770      	bx	lr
 8007574:	2000      	movs	r0, #0
 8007576:	4770      	bx	lr
 8007578:	2020      	movs	r0, #32
 800757a:	4770      	bx	lr

0800757c <__i2b>:
 800757c:	b510      	push	{r4, lr}
 800757e:	460c      	mov	r4, r1
 8007580:	2101      	movs	r1, #1
 8007582:	f7ff febd 	bl	8007300 <_Balloc>
 8007586:	4602      	mov	r2, r0
 8007588:	b928      	cbnz	r0, 8007596 <__i2b+0x1a>
 800758a:	4b05      	ldr	r3, [pc, #20]	@ (80075a0 <__i2b+0x24>)
 800758c:	4805      	ldr	r0, [pc, #20]	@ (80075a4 <__i2b+0x28>)
 800758e:	f240 1145 	movw	r1, #325	@ 0x145
 8007592:	f001 fc41 	bl	8008e18 <__assert_func>
 8007596:	2301      	movs	r3, #1
 8007598:	6144      	str	r4, [r0, #20]
 800759a:	6103      	str	r3, [r0, #16]
 800759c:	bd10      	pop	{r4, pc}
 800759e:	bf00      	nop
 80075a0:	08009c6d 	.word	0x08009c6d
 80075a4:	08009c7e 	.word	0x08009c7e

080075a8 <__multiply>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	4614      	mov	r4, r2
 80075ae:	690a      	ldr	r2, [r1, #16]
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	bfa8      	it	ge
 80075b6:	4623      	movge	r3, r4
 80075b8:	460f      	mov	r7, r1
 80075ba:	bfa4      	itt	ge
 80075bc:	460c      	movge	r4, r1
 80075be:	461f      	movge	r7, r3
 80075c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80075c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80075c8:	68a3      	ldr	r3, [r4, #8]
 80075ca:	6861      	ldr	r1, [r4, #4]
 80075cc:	eb0a 0609 	add.w	r6, sl, r9
 80075d0:	42b3      	cmp	r3, r6
 80075d2:	b085      	sub	sp, #20
 80075d4:	bfb8      	it	lt
 80075d6:	3101      	addlt	r1, #1
 80075d8:	f7ff fe92 	bl	8007300 <_Balloc>
 80075dc:	b930      	cbnz	r0, 80075ec <__multiply+0x44>
 80075de:	4602      	mov	r2, r0
 80075e0:	4b44      	ldr	r3, [pc, #272]	@ (80076f4 <__multiply+0x14c>)
 80075e2:	4845      	ldr	r0, [pc, #276]	@ (80076f8 <__multiply+0x150>)
 80075e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80075e8:	f001 fc16 	bl	8008e18 <__assert_func>
 80075ec:	f100 0514 	add.w	r5, r0, #20
 80075f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075f4:	462b      	mov	r3, r5
 80075f6:	2200      	movs	r2, #0
 80075f8:	4543      	cmp	r3, r8
 80075fa:	d321      	bcc.n	8007640 <__multiply+0x98>
 80075fc:	f107 0114 	add.w	r1, r7, #20
 8007600:	f104 0214 	add.w	r2, r4, #20
 8007604:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007608:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800760c:	9302      	str	r3, [sp, #8]
 800760e:	1b13      	subs	r3, r2, r4
 8007610:	3b15      	subs	r3, #21
 8007612:	f023 0303 	bic.w	r3, r3, #3
 8007616:	3304      	adds	r3, #4
 8007618:	f104 0715 	add.w	r7, r4, #21
 800761c:	42ba      	cmp	r2, r7
 800761e:	bf38      	it	cc
 8007620:	2304      	movcc	r3, #4
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	9b02      	ldr	r3, [sp, #8]
 8007626:	9103      	str	r1, [sp, #12]
 8007628:	428b      	cmp	r3, r1
 800762a:	d80c      	bhi.n	8007646 <__multiply+0x9e>
 800762c:	2e00      	cmp	r6, #0
 800762e:	dd03      	ble.n	8007638 <__multiply+0x90>
 8007630:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007634:	2b00      	cmp	r3, #0
 8007636:	d05b      	beq.n	80076f0 <__multiply+0x148>
 8007638:	6106      	str	r6, [r0, #16]
 800763a:	b005      	add	sp, #20
 800763c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007640:	f843 2b04 	str.w	r2, [r3], #4
 8007644:	e7d8      	b.n	80075f8 <__multiply+0x50>
 8007646:	f8b1 a000 	ldrh.w	sl, [r1]
 800764a:	f1ba 0f00 	cmp.w	sl, #0
 800764e:	d024      	beq.n	800769a <__multiply+0xf2>
 8007650:	f104 0e14 	add.w	lr, r4, #20
 8007654:	46a9      	mov	r9, r5
 8007656:	f04f 0c00 	mov.w	ip, #0
 800765a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800765e:	f8d9 3000 	ldr.w	r3, [r9]
 8007662:	fa1f fb87 	uxth.w	fp, r7
 8007666:	b29b      	uxth	r3, r3
 8007668:	fb0a 330b 	mla	r3, sl, fp, r3
 800766c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007670:	f8d9 7000 	ldr.w	r7, [r9]
 8007674:	4463      	add	r3, ip
 8007676:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800767a:	fb0a c70b 	mla	r7, sl, fp, ip
 800767e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007682:	b29b      	uxth	r3, r3
 8007684:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007688:	4572      	cmp	r2, lr
 800768a:	f849 3b04 	str.w	r3, [r9], #4
 800768e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007692:	d8e2      	bhi.n	800765a <__multiply+0xb2>
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	f845 c003 	str.w	ip, [r5, r3]
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076a0:	3104      	adds	r1, #4
 80076a2:	f1b9 0f00 	cmp.w	r9, #0
 80076a6:	d021      	beq.n	80076ec <__multiply+0x144>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	f104 0c14 	add.w	ip, r4, #20
 80076ae:	46ae      	mov	lr, r5
 80076b0:	f04f 0a00 	mov.w	sl, #0
 80076b4:	f8bc b000 	ldrh.w	fp, [ip]
 80076b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80076bc:	fb09 770b 	mla	r7, r9, fp, r7
 80076c0:	4457      	add	r7, sl
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076c8:	f84e 3b04 	str.w	r3, [lr], #4
 80076cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076d4:	f8be 3000 	ldrh.w	r3, [lr]
 80076d8:	fb09 330a 	mla	r3, r9, sl, r3
 80076dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80076e0:	4562      	cmp	r2, ip
 80076e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076e6:	d8e5      	bhi.n	80076b4 <__multiply+0x10c>
 80076e8:	9f01      	ldr	r7, [sp, #4]
 80076ea:	51eb      	str	r3, [r5, r7]
 80076ec:	3504      	adds	r5, #4
 80076ee:	e799      	b.n	8007624 <__multiply+0x7c>
 80076f0:	3e01      	subs	r6, #1
 80076f2:	e79b      	b.n	800762c <__multiply+0x84>
 80076f4:	08009c6d 	.word	0x08009c6d
 80076f8:	08009c7e 	.word	0x08009c7e

080076fc <__pow5mult>:
 80076fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007700:	4615      	mov	r5, r2
 8007702:	f012 0203 	ands.w	r2, r2, #3
 8007706:	4607      	mov	r7, r0
 8007708:	460e      	mov	r6, r1
 800770a:	d007      	beq.n	800771c <__pow5mult+0x20>
 800770c:	4c25      	ldr	r4, [pc, #148]	@ (80077a4 <__pow5mult+0xa8>)
 800770e:	3a01      	subs	r2, #1
 8007710:	2300      	movs	r3, #0
 8007712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007716:	f7ff fe55 	bl	80073c4 <__multadd>
 800771a:	4606      	mov	r6, r0
 800771c:	10ad      	asrs	r5, r5, #2
 800771e:	d03d      	beq.n	800779c <__pow5mult+0xa0>
 8007720:	69fc      	ldr	r4, [r7, #28]
 8007722:	b97c      	cbnz	r4, 8007744 <__pow5mult+0x48>
 8007724:	2010      	movs	r0, #16
 8007726:	f7ff fd35 	bl	8007194 <malloc>
 800772a:	4602      	mov	r2, r0
 800772c:	61f8      	str	r0, [r7, #28]
 800772e:	b928      	cbnz	r0, 800773c <__pow5mult+0x40>
 8007730:	4b1d      	ldr	r3, [pc, #116]	@ (80077a8 <__pow5mult+0xac>)
 8007732:	481e      	ldr	r0, [pc, #120]	@ (80077ac <__pow5mult+0xb0>)
 8007734:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007738:	f001 fb6e 	bl	8008e18 <__assert_func>
 800773c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007740:	6004      	str	r4, [r0, #0]
 8007742:	60c4      	str	r4, [r0, #12]
 8007744:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800774c:	b94c      	cbnz	r4, 8007762 <__pow5mult+0x66>
 800774e:	f240 2171 	movw	r1, #625	@ 0x271
 8007752:	4638      	mov	r0, r7
 8007754:	f7ff ff12 	bl	800757c <__i2b>
 8007758:	2300      	movs	r3, #0
 800775a:	f8c8 0008 	str.w	r0, [r8, #8]
 800775e:	4604      	mov	r4, r0
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	f04f 0900 	mov.w	r9, #0
 8007766:	07eb      	lsls	r3, r5, #31
 8007768:	d50a      	bpl.n	8007780 <__pow5mult+0x84>
 800776a:	4631      	mov	r1, r6
 800776c:	4622      	mov	r2, r4
 800776e:	4638      	mov	r0, r7
 8007770:	f7ff ff1a 	bl	80075a8 <__multiply>
 8007774:	4631      	mov	r1, r6
 8007776:	4680      	mov	r8, r0
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff fe01 	bl	8007380 <_Bfree>
 800777e:	4646      	mov	r6, r8
 8007780:	106d      	asrs	r5, r5, #1
 8007782:	d00b      	beq.n	800779c <__pow5mult+0xa0>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	b938      	cbnz	r0, 8007798 <__pow5mult+0x9c>
 8007788:	4622      	mov	r2, r4
 800778a:	4621      	mov	r1, r4
 800778c:	4638      	mov	r0, r7
 800778e:	f7ff ff0b 	bl	80075a8 <__multiply>
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	f8c0 9000 	str.w	r9, [r0]
 8007798:	4604      	mov	r4, r0
 800779a:	e7e4      	b.n	8007766 <__pow5mult+0x6a>
 800779c:	4630      	mov	r0, r6
 800779e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a2:	bf00      	nop
 80077a4:	08009cd8 	.word	0x08009cd8
 80077a8:	08009bfe 	.word	0x08009bfe
 80077ac:	08009c7e 	.word	0x08009c7e

080077b0 <__lshift>:
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	460c      	mov	r4, r1
 80077b6:	6849      	ldr	r1, [r1, #4]
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	4607      	mov	r7, r0
 80077c2:	4691      	mov	r9, r2
 80077c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077c8:	f108 0601 	add.w	r6, r8, #1
 80077cc:	42b3      	cmp	r3, r6
 80077ce:	db0b      	blt.n	80077e8 <__lshift+0x38>
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7ff fd95 	bl	8007300 <_Balloc>
 80077d6:	4605      	mov	r5, r0
 80077d8:	b948      	cbnz	r0, 80077ee <__lshift+0x3e>
 80077da:	4602      	mov	r2, r0
 80077dc:	4b28      	ldr	r3, [pc, #160]	@ (8007880 <__lshift+0xd0>)
 80077de:	4829      	ldr	r0, [pc, #164]	@ (8007884 <__lshift+0xd4>)
 80077e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80077e4:	f001 fb18 	bl	8008e18 <__assert_func>
 80077e8:	3101      	adds	r1, #1
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	e7ee      	b.n	80077cc <__lshift+0x1c>
 80077ee:	2300      	movs	r3, #0
 80077f0:	f100 0114 	add.w	r1, r0, #20
 80077f4:	f100 0210 	add.w	r2, r0, #16
 80077f8:	4618      	mov	r0, r3
 80077fa:	4553      	cmp	r3, sl
 80077fc:	db33      	blt.n	8007866 <__lshift+0xb6>
 80077fe:	6920      	ldr	r0, [r4, #16]
 8007800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007804:	f104 0314 	add.w	r3, r4, #20
 8007808:	f019 091f 	ands.w	r9, r9, #31
 800780c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007814:	d02b      	beq.n	800786e <__lshift+0xbe>
 8007816:	f1c9 0e20 	rsb	lr, r9, #32
 800781a:	468a      	mov	sl, r1
 800781c:	2200      	movs	r2, #0
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	fa00 f009 	lsl.w	r0, r0, r9
 8007824:	4310      	orrs	r0, r2
 8007826:	f84a 0b04 	str.w	r0, [sl], #4
 800782a:	f853 2b04 	ldr.w	r2, [r3], #4
 800782e:	459c      	cmp	ip, r3
 8007830:	fa22 f20e 	lsr.w	r2, r2, lr
 8007834:	d8f3      	bhi.n	800781e <__lshift+0x6e>
 8007836:	ebac 0304 	sub.w	r3, ip, r4
 800783a:	3b15      	subs	r3, #21
 800783c:	f023 0303 	bic.w	r3, r3, #3
 8007840:	3304      	adds	r3, #4
 8007842:	f104 0015 	add.w	r0, r4, #21
 8007846:	4584      	cmp	ip, r0
 8007848:	bf38      	it	cc
 800784a:	2304      	movcc	r3, #4
 800784c:	50ca      	str	r2, [r1, r3]
 800784e:	b10a      	cbz	r2, 8007854 <__lshift+0xa4>
 8007850:	f108 0602 	add.w	r6, r8, #2
 8007854:	3e01      	subs	r6, #1
 8007856:	4638      	mov	r0, r7
 8007858:	612e      	str	r6, [r5, #16]
 800785a:	4621      	mov	r1, r4
 800785c:	f7ff fd90 	bl	8007380 <_Bfree>
 8007860:	4628      	mov	r0, r5
 8007862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007866:	f842 0f04 	str.w	r0, [r2, #4]!
 800786a:	3301      	adds	r3, #1
 800786c:	e7c5      	b.n	80077fa <__lshift+0x4a>
 800786e:	3904      	subs	r1, #4
 8007870:	f853 2b04 	ldr.w	r2, [r3], #4
 8007874:	f841 2f04 	str.w	r2, [r1, #4]!
 8007878:	459c      	cmp	ip, r3
 800787a:	d8f9      	bhi.n	8007870 <__lshift+0xc0>
 800787c:	e7ea      	b.n	8007854 <__lshift+0xa4>
 800787e:	bf00      	nop
 8007880:	08009c6d 	.word	0x08009c6d
 8007884:	08009c7e 	.word	0x08009c7e

08007888 <__mcmp>:
 8007888:	690a      	ldr	r2, [r1, #16]
 800788a:	4603      	mov	r3, r0
 800788c:	6900      	ldr	r0, [r0, #16]
 800788e:	1a80      	subs	r0, r0, r2
 8007890:	b530      	push	{r4, r5, lr}
 8007892:	d10e      	bne.n	80078b2 <__mcmp+0x2a>
 8007894:	3314      	adds	r3, #20
 8007896:	3114      	adds	r1, #20
 8007898:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800789c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078a8:	4295      	cmp	r5, r2
 80078aa:	d003      	beq.n	80078b4 <__mcmp+0x2c>
 80078ac:	d205      	bcs.n	80078ba <__mcmp+0x32>
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	bd30      	pop	{r4, r5, pc}
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d3f3      	bcc.n	80078a0 <__mcmp+0x18>
 80078b8:	e7fb      	b.n	80078b2 <__mcmp+0x2a>
 80078ba:	2001      	movs	r0, #1
 80078bc:	e7f9      	b.n	80078b2 <__mcmp+0x2a>
	...

080078c0 <__mdiff>:
 80078c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	4689      	mov	r9, r1
 80078c6:	4606      	mov	r6, r0
 80078c8:	4611      	mov	r1, r2
 80078ca:	4648      	mov	r0, r9
 80078cc:	4614      	mov	r4, r2
 80078ce:	f7ff ffdb 	bl	8007888 <__mcmp>
 80078d2:	1e05      	subs	r5, r0, #0
 80078d4:	d112      	bne.n	80078fc <__mdiff+0x3c>
 80078d6:	4629      	mov	r1, r5
 80078d8:	4630      	mov	r0, r6
 80078da:	f7ff fd11 	bl	8007300 <_Balloc>
 80078de:	4602      	mov	r2, r0
 80078e0:	b928      	cbnz	r0, 80078ee <__mdiff+0x2e>
 80078e2:	4b3f      	ldr	r3, [pc, #252]	@ (80079e0 <__mdiff+0x120>)
 80078e4:	f240 2137 	movw	r1, #567	@ 0x237
 80078e8:	483e      	ldr	r0, [pc, #248]	@ (80079e4 <__mdiff+0x124>)
 80078ea:	f001 fa95 	bl	8008e18 <__assert_func>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078f4:	4610      	mov	r0, r2
 80078f6:	b003      	add	sp, #12
 80078f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	bfbc      	itt	lt
 80078fe:	464b      	movlt	r3, r9
 8007900:	46a1      	movlt	r9, r4
 8007902:	4630      	mov	r0, r6
 8007904:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007908:	bfba      	itte	lt
 800790a:	461c      	movlt	r4, r3
 800790c:	2501      	movlt	r5, #1
 800790e:	2500      	movge	r5, #0
 8007910:	f7ff fcf6 	bl	8007300 <_Balloc>
 8007914:	4602      	mov	r2, r0
 8007916:	b918      	cbnz	r0, 8007920 <__mdiff+0x60>
 8007918:	4b31      	ldr	r3, [pc, #196]	@ (80079e0 <__mdiff+0x120>)
 800791a:	f240 2145 	movw	r1, #581	@ 0x245
 800791e:	e7e3      	b.n	80078e8 <__mdiff+0x28>
 8007920:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007924:	6926      	ldr	r6, [r4, #16]
 8007926:	60c5      	str	r5, [r0, #12]
 8007928:	f109 0310 	add.w	r3, r9, #16
 800792c:	f109 0514 	add.w	r5, r9, #20
 8007930:	f104 0e14 	add.w	lr, r4, #20
 8007934:	f100 0b14 	add.w	fp, r0, #20
 8007938:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800793c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	46d9      	mov	r9, fp
 8007944:	f04f 0c00 	mov.w	ip, #0
 8007948:	9b01      	ldr	r3, [sp, #4]
 800794a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800794e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	fa1f f38a 	uxth.w	r3, sl
 8007958:	4619      	mov	r1, r3
 800795a:	b283      	uxth	r3, r0
 800795c:	1acb      	subs	r3, r1, r3
 800795e:	0c00      	lsrs	r0, r0, #16
 8007960:	4463      	add	r3, ip
 8007962:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007966:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800796a:	b29b      	uxth	r3, r3
 800796c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007970:	4576      	cmp	r6, lr
 8007972:	f849 3b04 	str.w	r3, [r9], #4
 8007976:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800797a:	d8e5      	bhi.n	8007948 <__mdiff+0x88>
 800797c:	1b33      	subs	r3, r6, r4
 800797e:	3b15      	subs	r3, #21
 8007980:	f023 0303 	bic.w	r3, r3, #3
 8007984:	3415      	adds	r4, #21
 8007986:	3304      	adds	r3, #4
 8007988:	42a6      	cmp	r6, r4
 800798a:	bf38      	it	cc
 800798c:	2304      	movcc	r3, #4
 800798e:	441d      	add	r5, r3
 8007990:	445b      	add	r3, fp
 8007992:	461e      	mov	r6, r3
 8007994:	462c      	mov	r4, r5
 8007996:	4544      	cmp	r4, r8
 8007998:	d30e      	bcc.n	80079b8 <__mdiff+0xf8>
 800799a:	f108 0103 	add.w	r1, r8, #3
 800799e:	1b49      	subs	r1, r1, r5
 80079a0:	f021 0103 	bic.w	r1, r1, #3
 80079a4:	3d03      	subs	r5, #3
 80079a6:	45a8      	cmp	r8, r5
 80079a8:	bf38      	it	cc
 80079aa:	2100      	movcc	r1, #0
 80079ac:	440b      	add	r3, r1
 80079ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079b2:	b191      	cbz	r1, 80079da <__mdiff+0x11a>
 80079b4:	6117      	str	r7, [r2, #16]
 80079b6:	e79d      	b.n	80078f4 <__mdiff+0x34>
 80079b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80079bc:	46e6      	mov	lr, ip
 80079be:	0c08      	lsrs	r0, r1, #16
 80079c0:	fa1c fc81 	uxtah	ip, ip, r1
 80079c4:	4471      	add	r1, lr
 80079c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079ca:	b289      	uxth	r1, r1
 80079cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079d0:	f846 1b04 	str.w	r1, [r6], #4
 80079d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079d8:	e7dd      	b.n	8007996 <__mdiff+0xd6>
 80079da:	3f01      	subs	r7, #1
 80079dc:	e7e7      	b.n	80079ae <__mdiff+0xee>
 80079de:	bf00      	nop
 80079e0:	08009c6d 	.word	0x08009c6d
 80079e4:	08009c7e 	.word	0x08009c7e

080079e8 <__ulp>:
 80079e8:	b082      	sub	sp, #8
 80079ea:	ed8d 0b00 	vstr	d0, [sp]
 80079ee:	9a01      	ldr	r2, [sp, #4]
 80079f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a30 <__ulp+0x48>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	dc08      	bgt.n	8007a0e <__ulp+0x26>
 80079fc:	425b      	negs	r3, r3
 80079fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007a02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a06:	da04      	bge.n	8007a12 <__ulp+0x2a>
 8007a08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007a0c:	4113      	asrs	r3, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	e008      	b.n	8007a24 <__ulp+0x3c>
 8007a12:	f1a2 0314 	sub.w	r3, r2, #20
 8007a16:	2b1e      	cmp	r3, #30
 8007a18:	bfda      	itte	le
 8007a1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007a1e:	40da      	lsrle	r2, r3
 8007a20:	2201      	movgt	r2, #1
 8007a22:	2300      	movs	r3, #0
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	ec41 0b10 	vmov	d0, r0, r1
 8007a2c:	b002      	add	sp, #8
 8007a2e:	4770      	bx	lr
 8007a30:	7ff00000 	.word	0x7ff00000

08007a34 <__b2d>:
 8007a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a38:	6906      	ldr	r6, [r0, #16]
 8007a3a:	f100 0814 	add.w	r8, r0, #20
 8007a3e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007a42:	1f37      	subs	r7, r6, #4
 8007a44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a48:	4610      	mov	r0, r2
 8007a4a:	f7ff fd4b 	bl	80074e4 <__hi0bits>
 8007a4e:	f1c0 0320 	rsb	r3, r0, #32
 8007a52:	280a      	cmp	r0, #10
 8007a54:	600b      	str	r3, [r1, #0]
 8007a56:	491b      	ldr	r1, [pc, #108]	@ (8007ac4 <__b2d+0x90>)
 8007a58:	dc15      	bgt.n	8007a86 <__b2d+0x52>
 8007a5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007a5e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007a62:	45b8      	cmp	r8, r7
 8007a64:	ea43 0501 	orr.w	r5, r3, r1
 8007a68:	bf34      	ite	cc
 8007a6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a6e:	2300      	movcs	r3, #0
 8007a70:	3015      	adds	r0, #21
 8007a72:	fa02 f000 	lsl.w	r0, r2, r0
 8007a76:	fa23 f30c 	lsr.w	r3, r3, ip
 8007a7a:	4303      	orrs	r3, r0
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	ec45 4b10 	vmov	d0, r4, r5
 8007a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a86:	45b8      	cmp	r8, r7
 8007a88:	bf3a      	itte	cc
 8007a8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a8e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007a92:	2300      	movcs	r3, #0
 8007a94:	380b      	subs	r0, #11
 8007a96:	d012      	beq.n	8007abe <__b2d+0x8a>
 8007a98:	f1c0 0120 	rsb	r1, r0, #32
 8007a9c:	fa23 f401 	lsr.w	r4, r3, r1
 8007aa0:	4082      	lsls	r2, r0
 8007aa2:	4322      	orrs	r2, r4
 8007aa4:	4547      	cmp	r7, r8
 8007aa6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007aaa:	bf8c      	ite	hi
 8007aac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007ab0:	2200      	movls	r2, #0
 8007ab2:	4083      	lsls	r3, r0
 8007ab4:	40ca      	lsrs	r2, r1
 8007ab6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007aba:	4313      	orrs	r3, r2
 8007abc:	e7de      	b.n	8007a7c <__b2d+0x48>
 8007abe:	ea42 0501 	orr.w	r5, r2, r1
 8007ac2:	e7db      	b.n	8007a7c <__b2d+0x48>
 8007ac4:	3ff00000 	.word	0x3ff00000

08007ac8 <__d2b>:
 8007ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	460f      	mov	r7, r1
 8007ace:	2101      	movs	r1, #1
 8007ad0:	ec59 8b10 	vmov	r8, r9, d0
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	f7ff fc13 	bl	8007300 <_Balloc>
 8007ada:	4604      	mov	r4, r0
 8007adc:	b930      	cbnz	r0, 8007aec <__d2b+0x24>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4b23      	ldr	r3, [pc, #140]	@ (8007b70 <__d2b+0xa8>)
 8007ae2:	4824      	ldr	r0, [pc, #144]	@ (8007b74 <__d2b+0xac>)
 8007ae4:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ae8:	f001 f996 	bl	8008e18 <__assert_func>
 8007aec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007af4:	b10d      	cbz	r5, 8007afa <__d2b+0x32>
 8007af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	f1b8 0300 	subs.w	r3, r8, #0
 8007b00:	d023      	beq.n	8007b4a <__d2b+0x82>
 8007b02:	4668      	mov	r0, sp
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	f7ff fd0c 	bl	8007522 <__lo0bits>
 8007b0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b0e:	b1d0      	cbz	r0, 8007b46 <__d2b+0x7e>
 8007b10:	f1c0 0320 	rsb	r3, r0, #32
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	40c2      	lsrs	r2, r0
 8007b1c:	6163      	str	r3, [r4, #20]
 8007b1e:	9201      	str	r2, [sp, #4]
 8007b20:	9b01      	ldr	r3, [sp, #4]
 8007b22:	61a3      	str	r3, [r4, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf0c      	ite	eq
 8007b28:	2201      	moveq	r2, #1
 8007b2a:	2202      	movne	r2, #2
 8007b2c:	6122      	str	r2, [r4, #16]
 8007b2e:	b1a5      	cbz	r5, 8007b5a <__d2b+0x92>
 8007b30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b34:	4405      	add	r5, r0
 8007b36:	603d      	str	r5, [r7, #0]
 8007b38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b3c:	6030      	str	r0, [r6, #0]
 8007b3e:	4620      	mov	r0, r4
 8007b40:	b003      	add	sp, #12
 8007b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b46:	6161      	str	r1, [r4, #20]
 8007b48:	e7ea      	b.n	8007b20 <__d2b+0x58>
 8007b4a:	a801      	add	r0, sp, #4
 8007b4c:	f7ff fce9 	bl	8007522 <__lo0bits>
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	6163      	str	r3, [r4, #20]
 8007b54:	3020      	adds	r0, #32
 8007b56:	2201      	movs	r2, #1
 8007b58:	e7e8      	b.n	8007b2c <__d2b+0x64>
 8007b5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b62:	6038      	str	r0, [r7, #0]
 8007b64:	6918      	ldr	r0, [r3, #16]
 8007b66:	f7ff fcbd 	bl	80074e4 <__hi0bits>
 8007b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b6e:	e7e5      	b.n	8007b3c <__d2b+0x74>
 8007b70:	08009c6d 	.word	0x08009c6d
 8007b74:	08009c7e 	.word	0x08009c7e

08007b78 <__ratio>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	e9cd 1000 	strd	r1, r0, [sp]
 8007b82:	a902      	add	r1, sp, #8
 8007b84:	f7ff ff56 	bl	8007a34 <__b2d>
 8007b88:	9800      	ldr	r0, [sp, #0]
 8007b8a:	a903      	add	r1, sp, #12
 8007b8c:	ec55 4b10 	vmov	r4, r5, d0
 8007b90:	f7ff ff50 	bl	8007a34 <__b2d>
 8007b94:	9b01      	ldr	r3, [sp, #4]
 8007b96:	6919      	ldr	r1, [r3, #16]
 8007b98:	9b00      	ldr	r3, [sp, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	1ac9      	subs	r1, r1, r3
 8007b9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	ec5b ab10 	vmov	sl, fp, d0
 8007ba8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bfce      	itee	gt
 8007bb0:	462a      	movgt	r2, r5
 8007bb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007bb6:	465a      	movle	r2, fp
 8007bb8:	462f      	mov	r7, r5
 8007bba:	46d9      	mov	r9, fp
 8007bbc:	bfcc      	ite	gt
 8007bbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007bc2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	4652      	mov	r2, sl
 8007bca:	4620      	mov	r0, r4
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f8 fe3d 	bl	800084c <__aeabi_ddiv>
 8007bd2:	ec41 0b10 	vmov	d0, r0, r1
 8007bd6:	b005      	add	sp, #20
 8007bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bdc <__copybits>:
 8007bdc:	3901      	subs	r1, #1
 8007bde:	b570      	push	{r4, r5, r6, lr}
 8007be0:	1149      	asrs	r1, r1, #5
 8007be2:	6914      	ldr	r4, [r2, #16]
 8007be4:	3101      	adds	r1, #1
 8007be6:	f102 0314 	add.w	r3, r2, #20
 8007bea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007bee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007bf2:	1f05      	subs	r5, r0, #4
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d30c      	bcc.n	8007c12 <__copybits+0x36>
 8007bf8:	1aa3      	subs	r3, r4, r2
 8007bfa:	3b11      	subs	r3, #17
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	3211      	adds	r2, #17
 8007c02:	42a2      	cmp	r2, r4
 8007c04:	bf88      	it	hi
 8007c06:	2300      	movhi	r3, #0
 8007c08:	4418      	add	r0, r3
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4288      	cmp	r0, r1
 8007c0e:	d305      	bcc.n	8007c1c <__copybits+0x40>
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c16:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c1a:	e7eb      	b.n	8007bf4 <__copybits+0x18>
 8007c1c:	f840 3b04 	str.w	r3, [r0], #4
 8007c20:	e7f4      	b.n	8007c0c <__copybits+0x30>

08007c22 <__any_on>:
 8007c22:	f100 0214 	add.w	r2, r0, #20
 8007c26:	6900      	ldr	r0, [r0, #16]
 8007c28:	114b      	asrs	r3, r1, #5
 8007c2a:	4298      	cmp	r0, r3
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	db11      	blt.n	8007c54 <__any_on+0x32>
 8007c30:	dd0a      	ble.n	8007c48 <__any_on+0x26>
 8007c32:	f011 011f 	ands.w	r1, r1, #31
 8007c36:	d007      	beq.n	8007c48 <__any_on+0x26>
 8007c38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c3c:	fa24 f001 	lsr.w	r0, r4, r1
 8007c40:	fa00 f101 	lsl.w	r1, r0, r1
 8007c44:	428c      	cmp	r4, r1
 8007c46:	d10b      	bne.n	8007c60 <__any_on+0x3e>
 8007c48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d803      	bhi.n	8007c58 <__any_on+0x36>
 8007c50:	2000      	movs	r0, #0
 8007c52:	bd10      	pop	{r4, pc}
 8007c54:	4603      	mov	r3, r0
 8007c56:	e7f7      	b.n	8007c48 <__any_on+0x26>
 8007c58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d0f5      	beq.n	8007c4c <__any_on+0x2a>
 8007c60:	2001      	movs	r0, #1
 8007c62:	e7f6      	b.n	8007c52 <__any_on+0x30>

08007c64 <sulp>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4604      	mov	r4, r0
 8007c68:	460d      	mov	r5, r1
 8007c6a:	ec45 4b10 	vmov	d0, r4, r5
 8007c6e:	4616      	mov	r6, r2
 8007c70:	f7ff feba 	bl	80079e8 <__ulp>
 8007c74:	ec51 0b10 	vmov	r0, r1, d0
 8007c78:	b17e      	cbz	r6, 8007c9a <sulp+0x36>
 8007c7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dd09      	ble.n	8007c9a <sulp+0x36>
 8007c86:	051b      	lsls	r3, r3, #20
 8007c88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007c8c:	2400      	movs	r4, #0
 8007c8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007c92:	4622      	mov	r2, r4
 8007c94:	462b      	mov	r3, r5
 8007c96:	f7f8 fcaf 	bl	80005f8 <__aeabi_dmul>
 8007c9a:	ec41 0b10 	vmov	d0, r0, r1
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}

08007ca0 <_strtod_l>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	b09f      	sub	sp, #124	@ 0x7c
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007caa:	2200      	movs	r2, #0
 8007cac:	921a      	str	r2, [sp, #104]	@ 0x68
 8007cae:	9005      	str	r0, [sp, #20]
 8007cb0:	f04f 0a00 	mov.w	sl, #0
 8007cb4:	f04f 0b00 	mov.w	fp, #0
 8007cb8:	460a      	mov	r2, r1
 8007cba:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cbc:	7811      	ldrb	r1, [r2, #0]
 8007cbe:	292b      	cmp	r1, #43	@ 0x2b
 8007cc0:	d04a      	beq.n	8007d58 <_strtod_l+0xb8>
 8007cc2:	d838      	bhi.n	8007d36 <_strtod_l+0x96>
 8007cc4:	290d      	cmp	r1, #13
 8007cc6:	d832      	bhi.n	8007d2e <_strtod_l+0x8e>
 8007cc8:	2908      	cmp	r1, #8
 8007cca:	d832      	bhi.n	8007d32 <_strtod_l+0x92>
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	d03b      	beq.n	8007d48 <_strtod_l+0xa8>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007cd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007cd6:	782a      	ldrb	r2, [r5, #0]
 8007cd8:	2a30      	cmp	r2, #48	@ 0x30
 8007cda:	f040 80b3 	bne.w	8007e44 <_strtod_l+0x1a4>
 8007cde:	786a      	ldrb	r2, [r5, #1]
 8007ce0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ce4:	2a58      	cmp	r2, #88	@ 0x58
 8007ce6:	d16e      	bne.n	8007dc6 <_strtod_l+0x126>
 8007ce8:	9302      	str	r3, [sp, #8]
 8007cea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	ab1a      	add	r3, sp, #104	@ 0x68
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	4a8e      	ldr	r2, [pc, #568]	@ (8007f2c <_strtod_l+0x28c>)
 8007cf4:	9805      	ldr	r0, [sp, #20]
 8007cf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007cf8:	a919      	add	r1, sp, #100	@ 0x64
 8007cfa:	f001 f927 	bl	8008f4c <__gethex>
 8007cfe:	f010 060f 	ands.w	r6, r0, #15
 8007d02:	4604      	mov	r4, r0
 8007d04:	d005      	beq.n	8007d12 <_strtod_l+0x72>
 8007d06:	2e06      	cmp	r6, #6
 8007d08:	d128      	bne.n	8007d5c <_strtod_l+0xbc>
 8007d0a:	3501      	adds	r5, #1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 858e 	bne.w	8008836 <_strtod_l+0xb96>
 8007d1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d1c:	b1cb      	cbz	r3, 8007d52 <_strtod_l+0xb2>
 8007d1e:	4652      	mov	r2, sl
 8007d20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007d24:	ec43 2b10 	vmov	d0, r2, r3
 8007d28:	b01f      	add	sp, #124	@ 0x7c
 8007d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2e:	2920      	cmp	r1, #32
 8007d30:	d1ce      	bne.n	8007cd0 <_strtod_l+0x30>
 8007d32:	3201      	adds	r2, #1
 8007d34:	e7c1      	b.n	8007cba <_strtod_l+0x1a>
 8007d36:	292d      	cmp	r1, #45	@ 0x2d
 8007d38:	d1ca      	bne.n	8007cd0 <_strtod_l+0x30>
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007d3e:	1c51      	adds	r1, r2, #1
 8007d40:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d42:	7852      	ldrb	r2, [r2, #1]
 8007d44:	2a00      	cmp	r2, #0
 8007d46:	d1c5      	bne.n	8007cd4 <_strtod_l+0x34>
 8007d48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f040 8570 	bne.w	8008832 <_strtod_l+0xb92>
 8007d52:	4652      	mov	r2, sl
 8007d54:	465b      	mov	r3, fp
 8007d56:	e7e5      	b.n	8007d24 <_strtod_l+0x84>
 8007d58:	2100      	movs	r1, #0
 8007d5a:	e7ef      	b.n	8007d3c <_strtod_l+0x9c>
 8007d5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d5e:	b13a      	cbz	r2, 8007d70 <_strtod_l+0xd0>
 8007d60:	2135      	movs	r1, #53	@ 0x35
 8007d62:	a81c      	add	r0, sp, #112	@ 0x70
 8007d64:	f7ff ff3a 	bl	8007bdc <__copybits>
 8007d68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d6a:	9805      	ldr	r0, [sp, #20]
 8007d6c:	f7ff fb08 	bl	8007380 <_Bfree>
 8007d70:	3e01      	subs	r6, #1
 8007d72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007d74:	2e04      	cmp	r6, #4
 8007d76:	d806      	bhi.n	8007d86 <_strtod_l+0xe6>
 8007d78:	e8df f006 	tbb	[pc, r6]
 8007d7c:	201d0314 	.word	0x201d0314
 8007d80:	14          	.byte	0x14
 8007d81:	00          	.byte	0x00
 8007d82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007d86:	05e1      	lsls	r1, r4, #23
 8007d88:	bf48      	it	mi
 8007d8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d92:	0d1b      	lsrs	r3, r3, #20
 8007d94:	051b      	lsls	r3, r3, #20
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1bb      	bne.n	8007d12 <_strtod_l+0x72>
 8007d9a:	f7fe fb31 	bl	8006400 <__errno>
 8007d9e:	2322      	movs	r3, #34	@ 0x22
 8007da0:	6003      	str	r3, [r0, #0]
 8007da2:	e7b6      	b.n	8007d12 <_strtod_l+0x72>
 8007da4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007da8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007dac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007db0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007db4:	e7e7      	b.n	8007d86 <_strtod_l+0xe6>
 8007db6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007f34 <_strtod_l+0x294>
 8007dba:	e7e4      	b.n	8007d86 <_strtod_l+0xe6>
 8007dbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007dc0:	f04f 3aff 	mov.w	sl, #4294967295
 8007dc4:	e7df      	b.n	8007d86 <_strtod_l+0xe6>
 8007dc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b30      	cmp	r3, #48	@ 0x30
 8007dd0:	d0f9      	beq.n	8007dc6 <_strtod_l+0x126>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d09d      	beq.n	8007d12 <_strtod_l+0x72>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ddc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007dde:	2300      	movs	r3, #0
 8007de0:	9308      	str	r3, [sp, #32]
 8007de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007de4:	461f      	mov	r7, r3
 8007de6:	220a      	movs	r2, #10
 8007de8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007dea:	7805      	ldrb	r5, [r0, #0]
 8007dec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007df0:	b2d9      	uxtb	r1, r3
 8007df2:	2909      	cmp	r1, #9
 8007df4:	d928      	bls.n	8007e48 <_strtod_l+0x1a8>
 8007df6:	494e      	ldr	r1, [pc, #312]	@ (8007f30 <_strtod_l+0x290>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f000 ffd5 	bl	8008da8 <strncmp>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d032      	beq.n	8007e68 <_strtod_l+0x1c8>
 8007e02:	2000      	movs	r0, #0
 8007e04:	462a      	mov	r2, r5
 8007e06:	4681      	mov	r9, r0
 8007e08:	463d      	mov	r5, r7
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2a65      	cmp	r2, #101	@ 0x65
 8007e0e:	d001      	beq.n	8007e14 <_strtod_l+0x174>
 8007e10:	2a45      	cmp	r2, #69	@ 0x45
 8007e12:	d114      	bne.n	8007e3e <_strtod_l+0x19e>
 8007e14:	b91d      	cbnz	r5, 8007e1e <_strtod_l+0x17e>
 8007e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e18:	4302      	orrs	r2, r0
 8007e1a:	d095      	beq.n	8007d48 <_strtod_l+0xa8>
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007e20:	1c62      	adds	r2, r4, #1
 8007e22:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e24:	7862      	ldrb	r2, [r4, #1]
 8007e26:	2a2b      	cmp	r2, #43	@ 0x2b
 8007e28:	d077      	beq.n	8007f1a <_strtod_l+0x27a>
 8007e2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007e2c:	d07b      	beq.n	8007f26 <_strtod_l+0x286>
 8007e2e:	f04f 0c00 	mov.w	ip, #0
 8007e32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007e36:	2909      	cmp	r1, #9
 8007e38:	f240 8082 	bls.w	8007f40 <_strtod_l+0x2a0>
 8007e3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8007e3e:	f04f 0800 	mov.w	r8, #0
 8007e42:	e0a2      	b.n	8007f8a <_strtod_l+0x2ea>
 8007e44:	2300      	movs	r3, #0
 8007e46:	e7c7      	b.n	8007dd8 <_strtod_l+0x138>
 8007e48:	2f08      	cmp	r7, #8
 8007e4a:	bfd5      	itete	le
 8007e4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007e4e:	9908      	ldrgt	r1, [sp, #32]
 8007e50:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007e58:	f100 0001 	add.w	r0, r0, #1
 8007e5c:	bfd4      	ite	le
 8007e5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007e60:	9308      	strgt	r3, [sp, #32]
 8007e62:	3701      	adds	r7, #1
 8007e64:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e66:	e7bf      	b.n	8007de8 <_strtod_l+0x148>
 8007e68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e6e:	785a      	ldrb	r2, [r3, #1]
 8007e70:	b37f      	cbz	r7, 8007ed2 <_strtod_l+0x232>
 8007e72:	4681      	mov	r9, r0
 8007e74:	463d      	mov	r5, r7
 8007e76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d912      	bls.n	8007ea4 <_strtod_l+0x204>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e7c4      	b.n	8007e0c <_strtod_l+0x16c>
 8007e82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e88:	785a      	ldrb	r2, [r3, #1]
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	2a30      	cmp	r2, #48	@ 0x30
 8007e8e:	d0f8      	beq.n	8007e82 <_strtod_l+0x1e2>
 8007e90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	f200 84d3 	bhi.w	8008840 <_strtod_l+0xba0>
 8007e9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e9e:	4681      	mov	r9, r0
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	3a30      	subs	r2, #48	@ 0x30
 8007ea6:	f100 0301 	add.w	r3, r0, #1
 8007eaa:	d02a      	beq.n	8007f02 <_strtod_l+0x262>
 8007eac:	4499      	add	r9, r3
 8007eae:	eb00 0c05 	add.w	ip, r0, r5
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	210a      	movs	r1, #10
 8007eb6:	4563      	cmp	r3, ip
 8007eb8:	d10d      	bne.n	8007ed6 <_strtod_l+0x236>
 8007eba:	1c69      	adds	r1, r5, #1
 8007ebc:	4401      	add	r1, r0
 8007ebe:	4428      	add	r0, r5
 8007ec0:	2808      	cmp	r0, #8
 8007ec2:	dc16      	bgt.n	8007ef2 <_strtod_l+0x252>
 8007ec4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ec6:	230a      	movs	r3, #10
 8007ec8:	fb03 2300 	mla	r3, r3, r0, r2
 8007ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e018      	b.n	8007f04 <_strtod_l+0x264>
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	e7da      	b.n	8007e8c <_strtod_l+0x1ec>
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	f103 0301 	add.w	r3, r3, #1
 8007edc:	dc03      	bgt.n	8007ee6 <_strtod_l+0x246>
 8007ede:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007ee0:	434e      	muls	r6, r1
 8007ee2:	960a      	str	r6, [sp, #40]	@ 0x28
 8007ee4:	e7e7      	b.n	8007eb6 <_strtod_l+0x216>
 8007ee6:	2b10      	cmp	r3, #16
 8007ee8:	bfde      	ittt	le
 8007eea:	9e08      	ldrle	r6, [sp, #32]
 8007eec:	434e      	mulle	r6, r1
 8007eee:	9608      	strle	r6, [sp, #32]
 8007ef0:	e7e1      	b.n	8007eb6 <_strtod_l+0x216>
 8007ef2:	280f      	cmp	r0, #15
 8007ef4:	dceb      	bgt.n	8007ece <_strtod_l+0x22e>
 8007ef6:	9808      	ldr	r0, [sp, #32]
 8007ef8:	230a      	movs	r3, #10
 8007efa:	fb03 2300 	mla	r3, r3, r0, r2
 8007efe:	9308      	str	r3, [sp, #32]
 8007f00:	e7e5      	b.n	8007ece <_strtod_l+0x22e>
 8007f02:	4629      	mov	r1, r5
 8007f04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f06:	1c50      	adds	r0, r2, #1
 8007f08:	9019      	str	r0, [sp, #100]	@ 0x64
 8007f0a:	7852      	ldrb	r2, [r2, #1]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	460d      	mov	r5, r1
 8007f10:	e7b1      	b.n	8007e76 <_strtod_l+0x1d6>
 8007f12:	f04f 0900 	mov.w	r9, #0
 8007f16:	2301      	movs	r3, #1
 8007f18:	e77d      	b.n	8007e16 <_strtod_l+0x176>
 8007f1a:	f04f 0c00 	mov.w	ip, #0
 8007f1e:	1ca2      	adds	r2, r4, #2
 8007f20:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f22:	78a2      	ldrb	r2, [r4, #2]
 8007f24:	e785      	b.n	8007e32 <_strtod_l+0x192>
 8007f26:	f04f 0c01 	mov.w	ip, #1
 8007f2a:	e7f8      	b.n	8007f1e <_strtod_l+0x27e>
 8007f2c:	08009df0 	.word	0x08009df0
 8007f30:	08009dd8 	.word	0x08009dd8
 8007f34:	7ff00000 	.word	0x7ff00000
 8007f38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f3a:	1c51      	adds	r1, r2, #1
 8007f3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f3e:	7852      	ldrb	r2, [r2, #1]
 8007f40:	2a30      	cmp	r2, #48	@ 0x30
 8007f42:	d0f9      	beq.n	8007f38 <_strtod_l+0x298>
 8007f44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007f48:	2908      	cmp	r1, #8
 8007f4a:	f63f af78 	bhi.w	8007e3e <_strtod_l+0x19e>
 8007f4e:	3a30      	subs	r2, #48	@ 0x30
 8007f50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007f56:	f04f 080a 	mov.w	r8, #10
 8007f5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f5c:	1c56      	adds	r6, r2, #1
 8007f5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007f60:	7852      	ldrb	r2, [r2, #1]
 8007f62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007f66:	f1be 0f09 	cmp.w	lr, #9
 8007f6a:	d939      	bls.n	8007fe0 <_strtod_l+0x340>
 8007f6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007f6e:	1a76      	subs	r6, r6, r1
 8007f70:	2e08      	cmp	r6, #8
 8007f72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007f76:	dc03      	bgt.n	8007f80 <_strtod_l+0x2e0>
 8007f78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007f7a:	4588      	cmp	r8, r1
 8007f7c:	bfa8      	it	ge
 8007f7e:	4688      	movge	r8, r1
 8007f80:	f1bc 0f00 	cmp.w	ip, #0
 8007f84:	d001      	beq.n	8007f8a <_strtod_l+0x2ea>
 8007f86:	f1c8 0800 	rsb	r8, r8, #0
 8007f8a:	2d00      	cmp	r5, #0
 8007f8c:	d14e      	bne.n	800802c <_strtod_l+0x38c>
 8007f8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f90:	4308      	orrs	r0, r1
 8007f92:	f47f aebe 	bne.w	8007d12 <_strtod_l+0x72>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f47f aed6 	bne.w	8007d48 <_strtod_l+0xa8>
 8007f9c:	2a69      	cmp	r2, #105	@ 0x69
 8007f9e:	d028      	beq.n	8007ff2 <_strtod_l+0x352>
 8007fa0:	dc25      	bgt.n	8007fee <_strtod_l+0x34e>
 8007fa2:	2a49      	cmp	r2, #73	@ 0x49
 8007fa4:	d025      	beq.n	8007ff2 <_strtod_l+0x352>
 8007fa6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007fa8:	f47f aece 	bne.w	8007d48 <_strtod_l+0xa8>
 8007fac:	499b      	ldr	r1, [pc, #620]	@ (800821c <_strtod_l+0x57c>)
 8007fae:	a819      	add	r0, sp, #100	@ 0x64
 8007fb0:	f001 f9ee 	bl	8009390 <__match>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	f43f aec7 	beq.w	8007d48 <_strtod_l+0xa8>
 8007fba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b28      	cmp	r3, #40	@ 0x28
 8007fc0:	d12e      	bne.n	8008020 <_strtod_l+0x380>
 8007fc2:	4997      	ldr	r1, [pc, #604]	@ (8008220 <_strtod_l+0x580>)
 8007fc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8007fc6:	a819      	add	r0, sp, #100	@ 0x64
 8007fc8:	f001 f9f6 	bl	80093b8 <__hexnan>
 8007fcc:	2805      	cmp	r0, #5
 8007fce:	d127      	bne.n	8008020 <_strtod_l+0x380>
 8007fd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007fd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007fd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007fda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007fde:	e698      	b.n	8007d12 <_strtod_l+0x72>
 8007fe0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007fe2:	fb08 2101 	mla	r1, r8, r1, r2
 8007fe6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007fea:	920e      	str	r2, [sp, #56]	@ 0x38
 8007fec:	e7b5      	b.n	8007f5a <_strtod_l+0x2ba>
 8007fee:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ff0:	e7da      	b.n	8007fa8 <_strtod_l+0x308>
 8007ff2:	498c      	ldr	r1, [pc, #560]	@ (8008224 <_strtod_l+0x584>)
 8007ff4:	a819      	add	r0, sp, #100	@ 0x64
 8007ff6:	f001 f9cb 	bl	8009390 <__match>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f43f aea4 	beq.w	8007d48 <_strtod_l+0xa8>
 8008000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008002:	4989      	ldr	r1, [pc, #548]	@ (8008228 <_strtod_l+0x588>)
 8008004:	3b01      	subs	r3, #1
 8008006:	a819      	add	r0, sp, #100	@ 0x64
 8008008:	9319      	str	r3, [sp, #100]	@ 0x64
 800800a:	f001 f9c1 	bl	8009390 <__match>
 800800e:	b910      	cbnz	r0, 8008016 <_strtod_l+0x376>
 8008010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008012:	3301      	adds	r3, #1
 8008014:	9319      	str	r3, [sp, #100]	@ 0x64
 8008016:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008238 <_strtod_l+0x598>
 800801a:	f04f 0a00 	mov.w	sl, #0
 800801e:	e678      	b.n	8007d12 <_strtod_l+0x72>
 8008020:	4882      	ldr	r0, [pc, #520]	@ (800822c <_strtod_l+0x58c>)
 8008022:	f000 fef1 	bl	8008e08 <nan>
 8008026:	ec5b ab10 	vmov	sl, fp, d0
 800802a:	e672      	b.n	8007d12 <_strtod_l+0x72>
 800802c:	eba8 0309 	sub.w	r3, r8, r9
 8008030:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008032:	9309      	str	r3, [sp, #36]	@ 0x24
 8008034:	2f00      	cmp	r7, #0
 8008036:	bf08      	it	eq
 8008038:	462f      	moveq	r7, r5
 800803a:	2d10      	cmp	r5, #16
 800803c:	462c      	mov	r4, r5
 800803e:	bfa8      	it	ge
 8008040:	2410      	movge	r4, #16
 8008042:	f7f8 fa5f 	bl	8000504 <__aeabi_ui2d>
 8008046:	2d09      	cmp	r5, #9
 8008048:	4682      	mov	sl, r0
 800804a:	468b      	mov	fp, r1
 800804c:	dc13      	bgt.n	8008076 <_strtod_l+0x3d6>
 800804e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008050:	2b00      	cmp	r3, #0
 8008052:	f43f ae5e 	beq.w	8007d12 <_strtod_l+0x72>
 8008056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008058:	dd78      	ble.n	800814c <_strtod_l+0x4ac>
 800805a:	2b16      	cmp	r3, #22
 800805c:	dc5f      	bgt.n	800811e <_strtod_l+0x47e>
 800805e:	4974      	ldr	r1, [pc, #464]	@ (8008230 <_strtod_l+0x590>)
 8008060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008068:	4652      	mov	r2, sl
 800806a:	465b      	mov	r3, fp
 800806c:	f7f8 fac4 	bl	80005f8 <__aeabi_dmul>
 8008070:	4682      	mov	sl, r0
 8008072:	468b      	mov	fp, r1
 8008074:	e64d      	b.n	8007d12 <_strtod_l+0x72>
 8008076:	4b6e      	ldr	r3, [pc, #440]	@ (8008230 <_strtod_l+0x590>)
 8008078:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800807c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008080:	f7f8 faba 	bl	80005f8 <__aeabi_dmul>
 8008084:	4682      	mov	sl, r0
 8008086:	9808      	ldr	r0, [sp, #32]
 8008088:	468b      	mov	fp, r1
 800808a:	f7f8 fa3b 	bl	8000504 <__aeabi_ui2d>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4650      	mov	r0, sl
 8008094:	4659      	mov	r1, fp
 8008096:	f7f8 f8f9 	bl	800028c <__adddf3>
 800809a:	2d0f      	cmp	r5, #15
 800809c:	4682      	mov	sl, r0
 800809e:	468b      	mov	fp, r1
 80080a0:	ddd5      	ble.n	800804e <_strtod_l+0x3ae>
 80080a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a4:	1b2c      	subs	r4, r5, r4
 80080a6:	441c      	add	r4, r3
 80080a8:	2c00      	cmp	r4, #0
 80080aa:	f340 8096 	ble.w	80081da <_strtod_l+0x53a>
 80080ae:	f014 030f 	ands.w	r3, r4, #15
 80080b2:	d00a      	beq.n	80080ca <_strtod_l+0x42a>
 80080b4:	495e      	ldr	r1, [pc, #376]	@ (8008230 <_strtod_l+0x590>)
 80080b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080ba:	4652      	mov	r2, sl
 80080bc:	465b      	mov	r3, fp
 80080be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c2:	f7f8 fa99 	bl	80005f8 <__aeabi_dmul>
 80080c6:	4682      	mov	sl, r0
 80080c8:	468b      	mov	fp, r1
 80080ca:	f034 040f 	bics.w	r4, r4, #15
 80080ce:	d073      	beq.n	80081b8 <_strtod_l+0x518>
 80080d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80080d4:	dd48      	ble.n	8008168 <_strtod_l+0x4c8>
 80080d6:	2400      	movs	r4, #0
 80080d8:	46a0      	mov	r8, r4
 80080da:	940a      	str	r4, [sp, #40]	@ 0x28
 80080dc:	46a1      	mov	r9, r4
 80080de:	9a05      	ldr	r2, [sp, #20]
 80080e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008238 <_strtod_l+0x598>
 80080e4:	2322      	movs	r3, #34	@ 0x22
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	f04f 0a00 	mov.w	sl, #0
 80080ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f43f ae0f 	beq.w	8007d12 <_strtod_l+0x72>
 80080f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080f6:	9805      	ldr	r0, [sp, #20]
 80080f8:	f7ff f942 	bl	8007380 <_Bfree>
 80080fc:	9805      	ldr	r0, [sp, #20]
 80080fe:	4649      	mov	r1, r9
 8008100:	f7ff f93e 	bl	8007380 <_Bfree>
 8008104:	9805      	ldr	r0, [sp, #20]
 8008106:	4641      	mov	r1, r8
 8008108:	f7ff f93a 	bl	8007380 <_Bfree>
 800810c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800810e:	9805      	ldr	r0, [sp, #20]
 8008110:	f7ff f936 	bl	8007380 <_Bfree>
 8008114:	9805      	ldr	r0, [sp, #20]
 8008116:	4621      	mov	r1, r4
 8008118:	f7ff f932 	bl	8007380 <_Bfree>
 800811c:	e5f9      	b.n	8007d12 <_strtod_l+0x72>
 800811e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008120:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008124:	4293      	cmp	r3, r2
 8008126:	dbbc      	blt.n	80080a2 <_strtod_l+0x402>
 8008128:	4c41      	ldr	r4, [pc, #260]	@ (8008230 <_strtod_l+0x590>)
 800812a:	f1c5 050f 	rsb	r5, r5, #15
 800812e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008132:	4652      	mov	r2, sl
 8008134:	465b      	mov	r3, fp
 8008136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813a:	f7f8 fa5d 	bl	80005f8 <__aeabi_dmul>
 800813e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008140:	1b5d      	subs	r5, r3, r5
 8008142:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008146:	e9d4 2300 	ldrd	r2, r3, [r4]
 800814a:	e78f      	b.n	800806c <_strtod_l+0x3cc>
 800814c:	3316      	adds	r3, #22
 800814e:	dba8      	blt.n	80080a2 <_strtod_l+0x402>
 8008150:	4b37      	ldr	r3, [pc, #220]	@ (8008230 <_strtod_l+0x590>)
 8008152:	eba9 0808 	sub.w	r8, r9, r8
 8008156:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800815a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800815e:	4650      	mov	r0, sl
 8008160:	4659      	mov	r1, fp
 8008162:	f7f8 fb73 	bl	800084c <__aeabi_ddiv>
 8008166:	e783      	b.n	8008070 <_strtod_l+0x3d0>
 8008168:	4b32      	ldr	r3, [pc, #200]	@ (8008234 <_strtod_l+0x594>)
 800816a:	9308      	str	r3, [sp, #32]
 800816c:	2300      	movs	r3, #0
 800816e:	1124      	asrs	r4, r4, #4
 8008170:	4650      	mov	r0, sl
 8008172:	4659      	mov	r1, fp
 8008174:	461e      	mov	r6, r3
 8008176:	2c01      	cmp	r4, #1
 8008178:	dc21      	bgt.n	80081be <_strtod_l+0x51e>
 800817a:	b10b      	cbz	r3, 8008180 <_strtod_l+0x4e0>
 800817c:	4682      	mov	sl, r0
 800817e:	468b      	mov	fp, r1
 8008180:	492c      	ldr	r1, [pc, #176]	@ (8008234 <_strtod_l+0x594>)
 8008182:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008186:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800818a:	4652      	mov	r2, sl
 800818c:	465b      	mov	r3, fp
 800818e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008192:	f7f8 fa31 	bl	80005f8 <__aeabi_dmul>
 8008196:	4b28      	ldr	r3, [pc, #160]	@ (8008238 <_strtod_l+0x598>)
 8008198:	460a      	mov	r2, r1
 800819a:	400b      	ands	r3, r1
 800819c:	4927      	ldr	r1, [pc, #156]	@ (800823c <_strtod_l+0x59c>)
 800819e:	428b      	cmp	r3, r1
 80081a0:	4682      	mov	sl, r0
 80081a2:	d898      	bhi.n	80080d6 <_strtod_l+0x436>
 80081a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80081a8:	428b      	cmp	r3, r1
 80081aa:	bf86      	itte	hi
 80081ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008240 <_strtod_l+0x5a0>
 80081b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80081b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80081b8:	2300      	movs	r3, #0
 80081ba:	9308      	str	r3, [sp, #32]
 80081bc:	e07a      	b.n	80082b4 <_strtod_l+0x614>
 80081be:	07e2      	lsls	r2, r4, #31
 80081c0:	d505      	bpl.n	80081ce <_strtod_l+0x52e>
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f7f8 fa16 	bl	80005f8 <__aeabi_dmul>
 80081cc:	2301      	movs	r3, #1
 80081ce:	9a08      	ldr	r2, [sp, #32]
 80081d0:	3208      	adds	r2, #8
 80081d2:	3601      	adds	r6, #1
 80081d4:	1064      	asrs	r4, r4, #1
 80081d6:	9208      	str	r2, [sp, #32]
 80081d8:	e7cd      	b.n	8008176 <_strtod_l+0x4d6>
 80081da:	d0ed      	beq.n	80081b8 <_strtod_l+0x518>
 80081dc:	4264      	negs	r4, r4
 80081de:	f014 020f 	ands.w	r2, r4, #15
 80081e2:	d00a      	beq.n	80081fa <_strtod_l+0x55a>
 80081e4:	4b12      	ldr	r3, [pc, #72]	@ (8008230 <_strtod_l+0x590>)
 80081e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ea:	4650      	mov	r0, sl
 80081ec:	4659      	mov	r1, fp
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 fb2b 	bl	800084c <__aeabi_ddiv>
 80081f6:	4682      	mov	sl, r0
 80081f8:	468b      	mov	fp, r1
 80081fa:	1124      	asrs	r4, r4, #4
 80081fc:	d0dc      	beq.n	80081b8 <_strtod_l+0x518>
 80081fe:	2c1f      	cmp	r4, #31
 8008200:	dd20      	ble.n	8008244 <_strtod_l+0x5a4>
 8008202:	2400      	movs	r4, #0
 8008204:	46a0      	mov	r8, r4
 8008206:	940a      	str	r4, [sp, #40]	@ 0x28
 8008208:	46a1      	mov	r9, r4
 800820a:	9a05      	ldr	r2, [sp, #20]
 800820c:	2322      	movs	r3, #34	@ 0x22
 800820e:	f04f 0a00 	mov.w	sl, #0
 8008212:	f04f 0b00 	mov.w	fp, #0
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	e768      	b.n	80080ec <_strtod_l+0x44c>
 800821a:	bf00      	nop
 800821c:	08009bc5 	.word	0x08009bc5
 8008220:	08009ddc 	.word	0x08009ddc
 8008224:	08009bbd 	.word	0x08009bbd
 8008228:	08009bf4 	.word	0x08009bf4
 800822c:	08009f85 	.word	0x08009f85
 8008230:	08009d10 	.word	0x08009d10
 8008234:	08009ce8 	.word	0x08009ce8
 8008238:	7ff00000 	.word	0x7ff00000
 800823c:	7ca00000 	.word	0x7ca00000
 8008240:	7fefffff 	.word	0x7fefffff
 8008244:	f014 0310 	ands.w	r3, r4, #16
 8008248:	bf18      	it	ne
 800824a:	236a      	movne	r3, #106	@ 0x6a
 800824c:	4ea9      	ldr	r6, [pc, #676]	@ (80084f4 <_strtod_l+0x854>)
 800824e:	9308      	str	r3, [sp, #32]
 8008250:	4650      	mov	r0, sl
 8008252:	4659      	mov	r1, fp
 8008254:	2300      	movs	r3, #0
 8008256:	07e2      	lsls	r2, r4, #31
 8008258:	d504      	bpl.n	8008264 <_strtod_l+0x5c4>
 800825a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800825e:	f7f8 f9cb 	bl	80005f8 <__aeabi_dmul>
 8008262:	2301      	movs	r3, #1
 8008264:	1064      	asrs	r4, r4, #1
 8008266:	f106 0608 	add.w	r6, r6, #8
 800826a:	d1f4      	bne.n	8008256 <_strtod_l+0x5b6>
 800826c:	b10b      	cbz	r3, 8008272 <_strtod_l+0x5d2>
 800826e:	4682      	mov	sl, r0
 8008270:	468b      	mov	fp, r1
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	b1b3      	cbz	r3, 80082a4 <_strtod_l+0x604>
 8008276:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800827a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800827e:	2b00      	cmp	r3, #0
 8008280:	4659      	mov	r1, fp
 8008282:	dd0f      	ble.n	80082a4 <_strtod_l+0x604>
 8008284:	2b1f      	cmp	r3, #31
 8008286:	dd55      	ble.n	8008334 <_strtod_l+0x694>
 8008288:	2b34      	cmp	r3, #52	@ 0x34
 800828a:	bfde      	ittt	le
 800828c:	f04f 33ff 	movle.w	r3, #4294967295
 8008290:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008294:	4093      	lslle	r3, r2
 8008296:	f04f 0a00 	mov.w	sl, #0
 800829a:	bfcc      	ite	gt
 800829c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80082a0:	ea03 0b01 	andle.w	fp, r3, r1
 80082a4:	2200      	movs	r2, #0
 80082a6:	2300      	movs	r3, #0
 80082a8:	4650      	mov	r0, sl
 80082aa:	4659      	mov	r1, fp
 80082ac:	f7f8 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d1a6      	bne.n	8008202 <_strtod_l+0x562>
 80082b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80082ba:	9805      	ldr	r0, [sp, #20]
 80082bc:	462b      	mov	r3, r5
 80082be:	463a      	mov	r2, r7
 80082c0:	f7ff f8c6 	bl	8007450 <__s2b>
 80082c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f43f af05 	beq.w	80080d6 <_strtod_l+0x436>
 80082cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082ce:	2a00      	cmp	r2, #0
 80082d0:	eba9 0308 	sub.w	r3, r9, r8
 80082d4:	bfa8      	it	ge
 80082d6:	2300      	movge	r3, #0
 80082d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80082da:	2400      	movs	r4, #0
 80082dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80082e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80082e2:	46a0      	mov	r8, r4
 80082e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082e6:	9805      	ldr	r0, [sp, #20]
 80082e8:	6859      	ldr	r1, [r3, #4]
 80082ea:	f7ff f809 	bl	8007300 <_Balloc>
 80082ee:	4681      	mov	r9, r0
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f43f aef4 	beq.w	80080de <_strtod_l+0x43e>
 80082f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f8:	691a      	ldr	r2, [r3, #16]
 80082fa:	3202      	adds	r2, #2
 80082fc:	f103 010c 	add.w	r1, r3, #12
 8008300:	0092      	lsls	r2, r2, #2
 8008302:	300c      	adds	r0, #12
 8008304:	f000 fd72 	bl	8008dec <memcpy>
 8008308:	ec4b ab10 	vmov	d0, sl, fp
 800830c:	9805      	ldr	r0, [sp, #20]
 800830e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008310:	a91b      	add	r1, sp, #108	@ 0x6c
 8008312:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008316:	f7ff fbd7 	bl	8007ac8 <__d2b>
 800831a:	901a      	str	r0, [sp, #104]	@ 0x68
 800831c:	2800      	cmp	r0, #0
 800831e:	f43f aede 	beq.w	80080de <_strtod_l+0x43e>
 8008322:	9805      	ldr	r0, [sp, #20]
 8008324:	2101      	movs	r1, #1
 8008326:	f7ff f929 	bl	800757c <__i2b>
 800832a:	4680      	mov	r8, r0
 800832c:	b948      	cbnz	r0, 8008342 <_strtod_l+0x6a2>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	e6d4      	b.n	80080de <_strtod_l+0x43e>
 8008334:	f04f 32ff 	mov.w	r2, #4294967295
 8008338:	fa02 f303 	lsl.w	r3, r2, r3
 800833c:	ea03 0a0a 	and.w	sl, r3, sl
 8008340:	e7b0      	b.n	80082a4 <_strtod_l+0x604>
 8008342:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008344:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008346:	2d00      	cmp	r5, #0
 8008348:	bfab      	itete	ge
 800834a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800834c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800834e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008350:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008352:	bfac      	ite	ge
 8008354:	18ef      	addge	r7, r5, r3
 8008356:	1b5e      	sublt	r6, r3, r5
 8008358:	9b08      	ldr	r3, [sp, #32]
 800835a:	1aed      	subs	r5, r5, r3
 800835c:	4415      	add	r5, r2
 800835e:	4b66      	ldr	r3, [pc, #408]	@ (80084f8 <_strtod_l+0x858>)
 8008360:	3d01      	subs	r5, #1
 8008362:	429d      	cmp	r5, r3
 8008364:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008368:	da50      	bge.n	800840c <_strtod_l+0x76c>
 800836a:	1b5b      	subs	r3, r3, r5
 800836c:	2b1f      	cmp	r3, #31
 800836e:	eba2 0203 	sub.w	r2, r2, r3
 8008372:	f04f 0101 	mov.w	r1, #1
 8008376:	dc3d      	bgt.n	80083f4 <_strtod_l+0x754>
 8008378:	fa01 f303 	lsl.w	r3, r1, r3
 800837c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800837e:	2300      	movs	r3, #0
 8008380:	9310      	str	r3, [sp, #64]	@ 0x40
 8008382:	18bd      	adds	r5, r7, r2
 8008384:	9b08      	ldr	r3, [sp, #32]
 8008386:	42af      	cmp	r7, r5
 8008388:	4416      	add	r6, r2
 800838a:	441e      	add	r6, r3
 800838c:	463b      	mov	r3, r7
 800838e:	bfa8      	it	ge
 8008390:	462b      	movge	r3, r5
 8008392:	42b3      	cmp	r3, r6
 8008394:	bfa8      	it	ge
 8008396:	4633      	movge	r3, r6
 8008398:	2b00      	cmp	r3, #0
 800839a:	bfc2      	ittt	gt
 800839c:	1aed      	subgt	r5, r5, r3
 800839e:	1af6      	subgt	r6, r6, r3
 80083a0:	1aff      	subgt	r7, r7, r3
 80083a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dd16      	ble.n	80083d6 <_strtod_l+0x736>
 80083a8:	4641      	mov	r1, r8
 80083aa:	9805      	ldr	r0, [sp, #20]
 80083ac:	461a      	mov	r2, r3
 80083ae:	f7ff f9a5 	bl	80076fc <__pow5mult>
 80083b2:	4680      	mov	r8, r0
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d0ba      	beq.n	800832e <_strtod_l+0x68e>
 80083b8:	4601      	mov	r1, r0
 80083ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80083bc:	9805      	ldr	r0, [sp, #20]
 80083be:	f7ff f8f3 	bl	80075a8 <__multiply>
 80083c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f43f ae8a 	beq.w	80080de <_strtod_l+0x43e>
 80083ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083cc:	9805      	ldr	r0, [sp, #20]
 80083ce:	f7fe ffd7 	bl	8007380 <_Bfree>
 80083d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80083d6:	2d00      	cmp	r5, #0
 80083d8:	dc1d      	bgt.n	8008416 <_strtod_l+0x776>
 80083da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd23      	ble.n	8008428 <_strtod_l+0x788>
 80083e0:	4649      	mov	r1, r9
 80083e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80083e4:	9805      	ldr	r0, [sp, #20]
 80083e6:	f7ff f989 	bl	80076fc <__pow5mult>
 80083ea:	4681      	mov	r9, r0
 80083ec:	b9e0      	cbnz	r0, 8008428 <_strtod_l+0x788>
 80083ee:	f04f 0900 	mov.w	r9, #0
 80083f2:	e674      	b.n	80080de <_strtod_l+0x43e>
 80083f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80083f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80083fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008400:	35e2      	adds	r5, #226	@ 0xe2
 8008402:	fa01 f305 	lsl.w	r3, r1, r5
 8008406:	9310      	str	r3, [sp, #64]	@ 0x40
 8008408:	9113      	str	r1, [sp, #76]	@ 0x4c
 800840a:	e7ba      	b.n	8008382 <_strtod_l+0x6e2>
 800840c:	2300      	movs	r3, #0
 800840e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008410:	2301      	movs	r3, #1
 8008412:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008414:	e7b5      	b.n	8008382 <_strtod_l+0x6e2>
 8008416:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008418:	9805      	ldr	r0, [sp, #20]
 800841a:	462a      	mov	r2, r5
 800841c:	f7ff f9c8 	bl	80077b0 <__lshift>
 8008420:	901a      	str	r0, [sp, #104]	@ 0x68
 8008422:	2800      	cmp	r0, #0
 8008424:	d1d9      	bne.n	80083da <_strtod_l+0x73a>
 8008426:	e65a      	b.n	80080de <_strtod_l+0x43e>
 8008428:	2e00      	cmp	r6, #0
 800842a:	dd07      	ble.n	800843c <_strtod_l+0x79c>
 800842c:	4649      	mov	r1, r9
 800842e:	9805      	ldr	r0, [sp, #20]
 8008430:	4632      	mov	r2, r6
 8008432:	f7ff f9bd 	bl	80077b0 <__lshift>
 8008436:	4681      	mov	r9, r0
 8008438:	2800      	cmp	r0, #0
 800843a:	d0d8      	beq.n	80083ee <_strtod_l+0x74e>
 800843c:	2f00      	cmp	r7, #0
 800843e:	dd08      	ble.n	8008452 <_strtod_l+0x7b2>
 8008440:	4641      	mov	r1, r8
 8008442:	9805      	ldr	r0, [sp, #20]
 8008444:	463a      	mov	r2, r7
 8008446:	f7ff f9b3 	bl	80077b0 <__lshift>
 800844a:	4680      	mov	r8, r0
 800844c:	2800      	cmp	r0, #0
 800844e:	f43f ae46 	beq.w	80080de <_strtod_l+0x43e>
 8008452:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008454:	9805      	ldr	r0, [sp, #20]
 8008456:	464a      	mov	r2, r9
 8008458:	f7ff fa32 	bl	80078c0 <__mdiff>
 800845c:	4604      	mov	r4, r0
 800845e:	2800      	cmp	r0, #0
 8008460:	f43f ae3d 	beq.w	80080de <_strtod_l+0x43e>
 8008464:	68c3      	ldr	r3, [r0, #12]
 8008466:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008468:	2300      	movs	r3, #0
 800846a:	60c3      	str	r3, [r0, #12]
 800846c:	4641      	mov	r1, r8
 800846e:	f7ff fa0b 	bl	8007888 <__mcmp>
 8008472:	2800      	cmp	r0, #0
 8008474:	da46      	bge.n	8008504 <_strtod_l+0x864>
 8008476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008478:	ea53 030a 	orrs.w	r3, r3, sl
 800847c:	d16c      	bne.n	8008558 <_strtod_l+0x8b8>
 800847e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008482:	2b00      	cmp	r3, #0
 8008484:	d168      	bne.n	8008558 <_strtod_l+0x8b8>
 8008486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800848a:	0d1b      	lsrs	r3, r3, #20
 800848c:	051b      	lsls	r3, r3, #20
 800848e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008492:	d961      	bls.n	8008558 <_strtod_l+0x8b8>
 8008494:	6963      	ldr	r3, [r4, #20]
 8008496:	b913      	cbnz	r3, 800849e <_strtod_l+0x7fe>
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	2b01      	cmp	r3, #1
 800849c:	dd5c      	ble.n	8008558 <_strtod_l+0x8b8>
 800849e:	4621      	mov	r1, r4
 80084a0:	2201      	movs	r2, #1
 80084a2:	9805      	ldr	r0, [sp, #20]
 80084a4:	f7ff f984 	bl	80077b0 <__lshift>
 80084a8:	4641      	mov	r1, r8
 80084aa:	4604      	mov	r4, r0
 80084ac:	f7ff f9ec 	bl	8007888 <__mcmp>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	dd51      	ble.n	8008558 <_strtod_l+0x8b8>
 80084b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084b8:	9a08      	ldr	r2, [sp, #32]
 80084ba:	0d1b      	lsrs	r3, r3, #20
 80084bc:	051b      	lsls	r3, r3, #20
 80084be:	2a00      	cmp	r2, #0
 80084c0:	d06b      	beq.n	800859a <_strtod_l+0x8fa>
 80084c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80084c6:	d868      	bhi.n	800859a <_strtod_l+0x8fa>
 80084c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80084cc:	f67f ae9d 	bls.w	800820a <_strtod_l+0x56a>
 80084d0:	4b0a      	ldr	r3, [pc, #40]	@ (80084fc <_strtod_l+0x85c>)
 80084d2:	4650      	mov	r0, sl
 80084d4:	4659      	mov	r1, fp
 80084d6:	2200      	movs	r2, #0
 80084d8:	f7f8 f88e 	bl	80005f8 <__aeabi_dmul>
 80084dc:	4b08      	ldr	r3, [pc, #32]	@ (8008500 <_strtod_l+0x860>)
 80084de:	400b      	ands	r3, r1
 80084e0:	4682      	mov	sl, r0
 80084e2:	468b      	mov	fp, r1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f47f ae05 	bne.w	80080f4 <_strtod_l+0x454>
 80084ea:	9a05      	ldr	r2, [sp, #20]
 80084ec:	2322      	movs	r3, #34	@ 0x22
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	e600      	b.n	80080f4 <_strtod_l+0x454>
 80084f2:	bf00      	nop
 80084f4:	08009e08 	.word	0x08009e08
 80084f8:	fffffc02 	.word	0xfffffc02
 80084fc:	39500000 	.word	0x39500000
 8008500:	7ff00000 	.word	0x7ff00000
 8008504:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008508:	d165      	bne.n	80085d6 <_strtod_l+0x936>
 800850a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800850c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008510:	b35a      	cbz	r2, 800856a <_strtod_l+0x8ca>
 8008512:	4a9f      	ldr	r2, [pc, #636]	@ (8008790 <_strtod_l+0xaf0>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d12b      	bne.n	8008570 <_strtod_l+0x8d0>
 8008518:	9b08      	ldr	r3, [sp, #32]
 800851a:	4651      	mov	r1, sl
 800851c:	b303      	cbz	r3, 8008560 <_strtod_l+0x8c0>
 800851e:	4b9d      	ldr	r3, [pc, #628]	@ (8008794 <_strtod_l+0xaf4>)
 8008520:	465a      	mov	r2, fp
 8008522:	4013      	ands	r3, r2
 8008524:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008528:	f04f 32ff 	mov.w	r2, #4294967295
 800852c:	d81b      	bhi.n	8008566 <_strtod_l+0x8c6>
 800852e:	0d1b      	lsrs	r3, r3, #20
 8008530:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	4299      	cmp	r1, r3
 800853a:	d119      	bne.n	8008570 <_strtod_l+0x8d0>
 800853c:	4b96      	ldr	r3, [pc, #600]	@ (8008798 <_strtod_l+0xaf8>)
 800853e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008540:	429a      	cmp	r2, r3
 8008542:	d102      	bne.n	800854a <_strtod_l+0x8aa>
 8008544:	3101      	adds	r1, #1
 8008546:	f43f adca 	beq.w	80080de <_strtod_l+0x43e>
 800854a:	4b92      	ldr	r3, [pc, #584]	@ (8008794 <_strtod_l+0xaf4>)
 800854c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800854e:	401a      	ands	r2, r3
 8008550:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008554:	f04f 0a00 	mov.w	sl, #0
 8008558:	9b08      	ldr	r3, [sp, #32]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1b8      	bne.n	80084d0 <_strtod_l+0x830>
 800855e:	e5c9      	b.n	80080f4 <_strtod_l+0x454>
 8008560:	f04f 33ff 	mov.w	r3, #4294967295
 8008564:	e7e8      	b.n	8008538 <_strtod_l+0x898>
 8008566:	4613      	mov	r3, r2
 8008568:	e7e6      	b.n	8008538 <_strtod_l+0x898>
 800856a:	ea53 030a 	orrs.w	r3, r3, sl
 800856e:	d0a1      	beq.n	80084b4 <_strtod_l+0x814>
 8008570:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008572:	b1db      	cbz	r3, 80085ac <_strtod_l+0x90c>
 8008574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008576:	4213      	tst	r3, r2
 8008578:	d0ee      	beq.n	8008558 <_strtod_l+0x8b8>
 800857a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800857c:	9a08      	ldr	r2, [sp, #32]
 800857e:	4650      	mov	r0, sl
 8008580:	4659      	mov	r1, fp
 8008582:	b1bb      	cbz	r3, 80085b4 <_strtod_l+0x914>
 8008584:	f7ff fb6e 	bl	8007c64 <sulp>
 8008588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800858c:	ec53 2b10 	vmov	r2, r3, d0
 8008590:	f7f7 fe7c 	bl	800028c <__adddf3>
 8008594:	4682      	mov	sl, r0
 8008596:	468b      	mov	fp, r1
 8008598:	e7de      	b.n	8008558 <_strtod_l+0x8b8>
 800859a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800859e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085a6:	f04f 3aff 	mov.w	sl, #4294967295
 80085aa:	e7d5      	b.n	8008558 <_strtod_l+0x8b8>
 80085ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085ae:	ea13 0f0a 	tst.w	r3, sl
 80085b2:	e7e1      	b.n	8008578 <_strtod_l+0x8d8>
 80085b4:	f7ff fb56 	bl	8007c64 <sulp>
 80085b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085bc:	ec53 2b10 	vmov	r2, r3, d0
 80085c0:	f7f7 fe62 	bl	8000288 <__aeabi_dsub>
 80085c4:	2200      	movs	r2, #0
 80085c6:	2300      	movs	r3, #0
 80085c8:	4682      	mov	sl, r0
 80085ca:	468b      	mov	fp, r1
 80085cc:	f7f8 fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d0c1      	beq.n	8008558 <_strtod_l+0x8b8>
 80085d4:	e619      	b.n	800820a <_strtod_l+0x56a>
 80085d6:	4641      	mov	r1, r8
 80085d8:	4620      	mov	r0, r4
 80085da:	f7ff facd 	bl	8007b78 <__ratio>
 80085de:	ec57 6b10 	vmov	r6, r7, d0
 80085e2:	2200      	movs	r2, #0
 80085e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80085e8:	4630      	mov	r0, r6
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f8 fa80 	bl	8000af0 <__aeabi_dcmple>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d06f      	beq.n	80086d4 <_strtod_l+0xa34>
 80085f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d17a      	bne.n	80086f0 <_strtod_l+0xa50>
 80085fa:	f1ba 0f00 	cmp.w	sl, #0
 80085fe:	d158      	bne.n	80086b2 <_strtod_l+0xa12>
 8008600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008606:	2b00      	cmp	r3, #0
 8008608:	d15a      	bne.n	80086c0 <_strtod_l+0xa20>
 800860a:	4b64      	ldr	r3, [pc, #400]	@ (800879c <_strtod_l+0xafc>)
 800860c:	2200      	movs	r2, #0
 800860e:	4630      	mov	r0, r6
 8008610:	4639      	mov	r1, r7
 8008612:	f7f8 fa63 	bl	8000adc <__aeabi_dcmplt>
 8008616:	2800      	cmp	r0, #0
 8008618:	d159      	bne.n	80086ce <_strtod_l+0xa2e>
 800861a:	4630      	mov	r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	4b60      	ldr	r3, [pc, #384]	@ (80087a0 <_strtod_l+0xb00>)
 8008620:	2200      	movs	r2, #0
 8008622:	f7f7 ffe9 	bl	80005f8 <__aeabi_dmul>
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800862e:	9606      	str	r6, [sp, #24]
 8008630:	9307      	str	r3, [sp, #28]
 8008632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008636:	4d57      	ldr	r5, [pc, #348]	@ (8008794 <_strtod_l+0xaf4>)
 8008638:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800863c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800863e:	401d      	ands	r5, r3
 8008640:	4b58      	ldr	r3, [pc, #352]	@ (80087a4 <_strtod_l+0xb04>)
 8008642:	429d      	cmp	r5, r3
 8008644:	f040 80b2 	bne.w	80087ac <_strtod_l+0xb0c>
 8008648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800864a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800864e:	ec4b ab10 	vmov	d0, sl, fp
 8008652:	f7ff f9c9 	bl	80079e8 <__ulp>
 8008656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800865a:	ec51 0b10 	vmov	r0, r1, d0
 800865e:	f7f7 ffcb 	bl	80005f8 <__aeabi_dmul>
 8008662:	4652      	mov	r2, sl
 8008664:	465b      	mov	r3, fp
 8008666:	f7f7 fe11 	bl	800028c <__adddf3>
 800866a:	460b      	mov	r3, r1
 800866c:	4949      	ldr	r1, [pc, #292]	@ (8008794 <_strtod_l+0xaf4>)
 800866e:	4a4e      	ldr	r2, [pc, #312]	@ (80087a8 <_strtod_l+0xb08>)
 8008670:	4019      	ands	r1, r3
 8008672:	4291      	cmp	r1, r2
 8008674:	4682      	mov	sl, r0
 8008676:	d942      	bls.n	80086fe <_strtod_l+0xa5e>
 8008678:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800867a:	4b47      	ldr	r3, [pc, #284]	@ (8008798 <_strtod_l+0xaf8>)
 800867c:	429a      	cmp	r2, r3
 800867e:	d103      	bne.n	8008688 <_strtod_l+0x9e8>
 8008680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008682:	3301      	adds	r3, #1
 8008684:	f43f ad2b 	beq.w	80080de <_strtod_l+0x43e>
 8008688:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008798 <_strtod_l+0xaf8>
 800868c:	f04f 3aff 	mov.w	sl, #4294967295
 8008690:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008692:	9805      	ldr	r0, [sp, #20]
 8008694:	f7fe fe74 	bl	8007380 <_Bfree>
 8008698:	9805      	ldr	r0, [sp, #20]
 800869a:	4649      	mov	r1, r9
 800869c:	f7fe fe70 	bl	8007380 <_Bfree>
 80086a0:	9805      	ldr	r0, [sp, #20]
 80086a2:	4641      	mov	r1, r8
 80086a4:	f7fe fe6c 	bl	8007380 <_Bfree>
 80086a8:	9805      	ldr	r0, [sp, #20]
 80086aa:	4621      	mov	r1, r4
 80086ac:	f7fe fe68 	bl	8007380 <_Bfree>
 80086b0:	e618      	b.n	80082e4 <_strtod_l+0x644>
 80086b2:	f1ba 0f01 	cmp.w	sl, #1
 80086b6:	d103      	bne.n	80086c0 <_strtod_l+0xa20>
 80086b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f43f ada5 	beq.w	800820a <_strtod_l+0x56a>
 80086c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008770 <_strtod_l+0xad0>
 80086c4:	4f35      	ldr	r7, [pc, #212]	@ (800879c <_strtod_l+0xafc>)
 80086c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086ca:	2600      	movs	r6, #0
 80086cc:	e7b1      	b.n	8008632 <_strtod_l+0x992>
 80086ce:	4f34      	ldr	r7, [pc, #208]	@ (80087a0 <_strtod_l+0xb00>)
 80086d0:	2600      	movs	r6, #0
 80086d2:	e7aa      	b.n	800862a <_strtod_l+0x98a>
 80086d4:	4b32      	ldr	r3, [pc, #200]	@ (80087a0 <_strtod_l+0xb00>)
 80086d6:	4630      	mov	r0, r6
 80086d8:	4639      	mov	r1, r7
 80086da:	2200      	movs	r2, #0
 80086dc:	f7f7 ff8c 	bl	80005f8 <__aeabi_dmul>
 80086e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086e2:	4606      	mov	r6, r0
 80086e4:	460f      	mov	r7, r1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d09f      	beq.n	800862a <_strtod_l+0x98a>
 80086ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80086ee:	e7a0      	b.n	8008632 <_strtod_l+0x992>
 80086f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008778 <_strtod_l+0xad8>
 80086f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086f8:	ec57 6b17 	vmov	r6, r7, d7
 80086fc:	e799      	b.n	8008632 <_strtod_l+0x992>
 80086fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008702:	9b08      	ldr	r3, [sp, #32]
 8008704:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1c1      	bne.n	8008690 <_strtod_l+0x9f0>
 800870c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008710:	0d1b      	lsrs	r3, r3, #20
 8008712:	051b      	lsls	r3, r3, #20
 8008714:	429d      	cmp	r5, r3
 8008716:	d1bb      	bne.n	8008690 <_strtod_l+0x9f0>
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f8 facc 	bl	8000cb8 <__aeabi_d2lz>
 8008720:	f7f7 ff3c 	bl	800059c <__aeabi_l2d>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fdac 	bl	8000288 <__aeabi_dsub>
 8008730:	460b      	mov	r3, r1
 8008732:	4602      	mov	r2, r0
 8008734:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008738:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800873c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800873e:	ea46 060a 	orr.w	r6, r6, sl
 8008742:	431e      	orrs	r6, r3
 8008744:	d06f      	beq.n	8008826 <_strtod_l+0xb86>
 8008746:	a30e      	add	r3, pc, #56	@ (adr r3, 8008780 <_strtod_l+0xae0>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f7f8 f9c6 	bl	8000adc <__aeabi_dcmplt>
 8008750:	2800      	cmp	r0, #0
 8008752:	f47f accf 	bne.w	80080f4 <_strtod_l+0x454>
 8008756:	a30c      	add	r3, pc, #48	@ (adr r3, 8008788 <_strtod_l+0xae8>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008760:	f7f8 f9da 	bl	8000b18 <__aeabi_dcmpgt>
 8008764:	2800      	cmp	r0, #0
 8008766:	d093      	beq.n	8008690 <_strtod_l+0x9f0>
 8008768:	e4c4      	b.n	80080f4 <_strtod_l+0x454>
 800876a:	bf00      	nop
 800876c:	f3af 8000 	nop.w
 8008770:	00000000 	.word	0x00000000
 8008774:	bff00000 	.word	0xbff00000
 8008778:	00000000 	.word	0x00000000
 800877c:	3ff00000 	.word	0x3ff00000
 8008780:	94a03595 	.word	0x94a03595
 8008784:	3fdfffff 	.word	0x3fdfffff
 8008788:	35afe535 	.word	0x35afe535
 800878c:	3fe00000 	.word	0x3fe00000
 8008790:	000fffff 	.word	0x000fffff
 8008794:	7ff00000 	.word	0x7ff00000
 8008798:	7fefffff 	.word	0x7fefffff
 800879c:	3ff00000 	.word	0x3ff00000
 80087a0:	3fe00000 	.word	0x3fe00000
 80087a4:	7fe00000 	.word	0x7fe00000
 80087a8:	7c9fffff 	.word	0x7c9fffff
 80087ac:	9b08      	ldr	r3, [sp, #32]
 80087ae:	b323      	cbz	r3, 80087fa <_strtod_l+0xb5a>
 80087b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80087b4:	d821      	bhi.n	80087fa <_strtod_l+0xb5a>
 80087b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008858 <_strtod_l+0xbb8>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f8 f996 	bl	8000af0 <__aeabi_dcmple>
 80087c4:	b1a0      	cbz	r0, 80087f0 <_strtod_l+0xb50>
 80087c6:	4639      	mov	r1, r7
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7f8 f9ed 	bl	8000ba8 <__aeabi_d2uiz>
 80087ce:	2801      	cmp	r0, #1
 80087d0:	bf38      	it	cc
 80087d2:	2001      	movcc	r0, #1
 80087d4:	f7f7 fe96 	bl	8000504 <__aeabi_ui2d>
 80087d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	b9fb      	cbnz	r3, 8008820 <_strtod_l+0xb80>
 80087e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80087e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80087e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80087ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80087f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80087f6:	1b5b      	subs	r3, r3, r5
 80087f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80087fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80087fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008802:	f7ff f8f1 	bl	80079e8 <__ulp>
 8008806:	4650      	mov	r0, sl
 8008808:	ec53 2b10 	vmov	r2, r3, d0
 800880c:	4659      	mov	r1, fp
 800880e:	f7f7 fef3 	bl	80005f8 <__aeabi_dmul>
 8008812:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008816:	f7f7 fd39 	bl	800028c <__adddf3>
 800881a:	4682      	mov	sl, r0
 800881c:	468b      	mov	fp, r1
 800881e:	e770      	b.n	8008702 <_strtod_l+0xa62>
 8008820:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008824:	e7e0      	b.n	80087e8 <_strtod_l+0xb48>
 8008826:	a30e      	add	r3, pc, #56	@ (adr r3, 8008860 <_strtod_l+0xbc0>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f7f8 f956 	bl	8000adc <__aeabi_dcmplt>
 8008830:	e798      	b.n	8008764 <_strtod_l+0xac4>
 8008832:	2300      	movs	r3, #0
 8008834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008836:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	f7ff ba6d 	b.w	8007d1a <_strtod_l+0x7a>
 8008840:	2a65      	cmp	r2, #101	@ 0x65
 8008842:	f43f ab66 	beq.w	8007f12 <_strtod_l+0x272>
 8008846:	2a45      	cmp	r2, #69	@ 0x45
 8008848:	f43f ab63 	beq.w	8007f12 <_strtod_l+0x272>
 800884c:	2301      	movs	r3, #1
 800884e:	f7ff bb9e 	b.w	8007f8e <_strtod_l+0x2ee>
 8008852:	bf00      	nop
 8008854:	f3af 8000 	nop.w
 8008858:	ffc00000 	.word	0xffc00000
 800885c:	41dfffff 	.word	0x41dfffff
 8008860:	94a03595 	.word	0x94a03595
 8008864:	3fcfffff 	.word	0x3fcfffff

08008868 <_strtod_r>:
 8008868:	4b01      	ldr	r3, [pc, #4]	@ (8008870 <_strtod_r+0x8>)
 800886a:	f7ff ba19 	b.w	8007ca0 <_strtod_l>
 800886e:	bf00      	nop
 8008870:	20000068 	.word	0x20000068

08008874 <_strtol_l.constprop.0>:
 8008874:	2b24      	cmp	r3, #36	@ 0x24
 8008876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800887a:	4686      	mov	lr, r0
 800887c:	4690      	mov	r8, r2
 800887e:	d801      	bhi.n	8008884 <_strtol_l.constprop.0+0x10>
 8008880:	2b01      	cmp	r3, #1
 8008882:	d106      	bne.n	8008892 <_strtol_l.constprop.0+0x1e>
 8008884:	f7fd fdbc 	bl	8006400 <__errno>
 8008888:	2316      	movs	r3, #22
 800888a:	6003      	str	r3, [r0, #0]
 800888c:	2000      	movs	r0, #0
 800888e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008892:	4834      	ldr	r0, [pc, #208]	@ (8008964 <_strtol_l.constprop.0+0xf0>)
 8008894:	460d      	mov	r5, r1
 8008896:	462a      	mov	r2, r5
 8008898:	f815 4b01 	ldrb.w	r4, [r5], #1
 800889c:	5d06      	ldrb	r6, [r0, r4]
 800889e:	f016 0608 	ands.w	r6, r6, #8
 80088a2:	d1f8      	bne.n	8008896 <_strtol_l.constprop.0+0x22>
 80088a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80088a6:	d12d      	bne.n	8008904 <_strtol_l.constprop.0+0x90>
 80088a8:	782c      	ldrb	r4, [r5, #0]
 80088aa:	2601      	movs	r6, #1
 80088ac:	1c95      	adds	r5, r2, #2
 80088ae:	f033 0210 	bics.w	r2, r3, #16
 80088b2:	d109      	bne.n	80088c8 <_strtol_l.constprop.0+0x54>
 80088b4:	2c30      	cmp	r4, #48	@ 0x30
 80088b6:	d12a      	bne.n	800890e <_strtol_l.constprop.0+0x9a>
 80088b8:	782a      	ldrb	r2, [r5, #0]
 80088ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088be:	2a58      	cmp	r2, #88	@ 0x58
 80088c0:	d125      	bne.n	800890e <_strtol_l.constprop.0+0x9a>
 80088c2:	786c      	ldrb	r4, [r5, #1]
 80088c4:	2310      	movs	r3, #16
 80088c6:	3502      	adds	r5, #2
 80088c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80088cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088d0:	2200      	movs	r2, #0
 80088d2:	fbbc f9f3 	udiv	r9, ip, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80088dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80088e0:	2f09      	cmp	r7, #9
 80088e2:	d81b      	bhi.n	800891c <_strtol_l.constprop.0+0xa8>
 80088e4:	463c      	mov	r4, r7
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	dd27      	ble.n	800893a <_strtol_l.constprop.0+0xc6>
 80088ea:	1c57      	adds	r7, r2, #1
 80088ec:	d007      	beq.n	80088fe <_strtol_l.constprop.0+0x8a>
 80088ee:	4581      	cmp	r9, r0
 80088f0:	d320      	bcc.n	8008934 <_strtol_l.constprop.0+0xc0>
 80088f2:	d101      	bne.n	80088f8 <_strtol_l.constprop.0+0x84>
 80088f4:	45a2      	cmp	sl, r4
 80088f6:	db1d      	blt.n	8008934 <_strtol_l.constprop.0+0xc0>
 80088f8:	fb00 4003 	mla	r0, r0, r3, r4
 80088fc:	2201      	movs	r2, #1
 80088fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008902:	e7eb      	b.n	80088dc <_strtol_l.constprop.0+0x68>
 8008904:	2c2b      	cmp	r4, #43	@ 0x2b
 8008906:	bf04      	itt	eq
 8008908:	782c      	ldrbeq	r4, [r5, #0]
 800890a:	1c95      	addeq	r5, r2, #2
 800890c:	e7cf      	b.n	80088ae <_strtol_l.constprop.0+0x3a>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1da      	bne.n	80088c8 <_strtol_l.constprop.0+0x54>
 8008912:	2c30      	cmp	r4, #48	@ 0x30
 8008914:	bf0c      	ite	eq
 8008916:	2308      	moveq	r3, #8
 8008918:	230a      	movne	r3, #10
 800891a:	e7d5      	b.n	80088c8 <_strtol_l.constprop.0+0x54>
 800891c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008920:	2f19      	cmp	r7, #25
 8008922:	d801      	bhi.n	8008928 <_strtol_l.constprop.0+0xb4>
 8008924:	3c37      	subs	r4, #55	@ 0x37
 8008926:	e7de      	b.n	80088e6 <_strtol_l.constprop.0+0x72>
 8008928:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800892c:	2f19      	cmp	r7, #25
 800892e:	d804      	bhi.n	800893a <_strtol_l.constprop.0+0xc6>
 8008930:	3c57      	subs	r4, #87	@ 0x57
 8008932:	e7d8      	b.n	80088e6 <_strtol_l.constprop.0+0x72>
 8008934:	f04f 32ff 	mov.w	r2, #4294967295
 8008938:	e7e1      	b.n	80088fe <_strtol_l.constprop.0+0x8a>
 800893a:	1c53      	adds	r3, r2, #1
 800893c:	d108      	bne.n	8008950 <_strtol_l.constprop.0+0xdc>
 800893e:	2322      	movs	r3, #34	@ 0x22
 8008940:	f8ce 3000 	str.w	r3, [lr]
 8008944:	4660      	mov	r0, ip
 8008946:	f1b8 0f00 	cmp.w	r8, #0
 800894a:	d0a0      	beq.n	800888e <_strtol_l.constprop.0+0x1a>
 800894c:	1e69      	subs	r1, r5, #1
 800894e:	e006      	b.n	800895e <_strtol_l.constprop.0+0xea>
 8008950:	b106      	cbz	r6, 8008954 <_strtol_l.constprop.0+0xe0>
 8008952:	4240      	negs	r0, r0
 8008954:	f1b8 0f00 	cmp.w	r8, #0
 8008958:	d099      	beq.n	800888e <_strtol_l.constprop.0+0x1a>
 800895a:	2a00      	cmp	r2, #0
 800895c:	d1f6      	bne.n	800894c <_strtol_l.constprop.0+0xd8>
 800895e:	f8c8 1000 	str.w	r1, [r8]
 8008962:	e794      	b.n	800888e <_strtol_l.constprop.0+0x1a>
 8008964:	08009e31 	.word	0x08009e31

08008968 <_strtol_r>:
 8008968:	f7ff bf84 	b.w	8008874 <_strtol_l.constprop.0>

0800896c <__ssputs_r>:
 800896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	688e      	ldr	r6, [r1, #8]
 8008972:	461f      	mov	r7, r3
 8008974:	42be      	cmp	r6, r7
 8008976:	680b      	ldr	r3, [r1, #0]
 8008978:	4682      	mov	sl, r0
 800897a:	460c      	mov	r4, r1
 800897c:	4690      	mov	r8, r2
 800897e:	d82d      	bhi.n	80089dc <__ssputs_r+0x70>
 8008980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008984:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008988:	d026      	beq.n	80089d8 <__ssputs_r+0x6c>
 800898a:	6965      	ldr	r5, [r4, #20]
 800898c:	6909      	ldr	r1, [r1, #16]
 800898e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008992:	eba3 0901 	sub.w	r9, r3, r1
 8008996:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800899a:	1c7b      	adds	r3, r7, #1
 800899c:	444b      	add	r3, r9
 800899e:	106d      	asrs	r5, r5, #1
 80089a0:	429d      	cmp	r5, r3
 80089a2:	bf38      	it	cc
 80089a4:	461d      	movcc	r5, r3
 80089a6:	0553      	lsls	r3, r2, #21
 80089a8:	d527      	bpl.n	80089fa <__ssputs_r+0x8e>
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7fe fc1c 	bl	80071e8 <_malloc_r>
 80089b0:	4606      	mov	r6, r0
 80089b2:	b360      	cbz	r0, 8008a0e <__ssputs_r+0xa2>
 80089b4:	6921      	ldr	r1, [r4, #16]
 80089b6:	464a      	mov	r2, r9
 80089b8:	f000 fa18 	bl	8008dec <memcpy>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	6126      	str	r6, [r4, #16]
 80089ca:	6165      	str	r5, [r4, #20]
 80089cc:	444e      	add	r6, r9
 80089ce:	eba5 0509 	sub.w	r5, r5, r9
 80089d2:	6026      	str	r6, [r4, #0]
 80089d4:	60a5      	str	r5, [r4, #8]
 80089d6:	463e      	mov	r6, r7
 80089d8:	42be      	cmp	r6, r7
 80089da:	d900      	bls.n	80089de <__ssputs_r+0x72>
 80089dc:	463e      	mov	r6, r7
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	4632      	mov	r2, r6
 80089e2:	4641      	mov	r1, r8
 80089e4:	f000 f9c6 	bl	8008d74 <memmove>
 80089e8:	68a3      	ldr	r3, [r4, #8]
 80089ea:	1b9b      	subs	r3, r3, r6
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	4433      	add	r3, r6
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	2000      	movs	r0, #0
 80089f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fa:	462a      	mov	r2, r5
 80089fc:	f000 fd89 	bl	8009512 <_realloc_r>
 8008a00:	4606      	mov	r6, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1e0      	bne.n	80089c8 <__ssputs_r+0x5c>
 8008a06:	6921      	ldr	r1, [r4, #16]
 8008a08:	4650      	mov	r0, sl
 8008a0a:	f7fe fb79 	bl	8007100 <_free_r>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	f8ca 3000 	str.w	r3, [sl]
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	e7e9      	b.n	80089f6 <__ssputs_r+0x8a>
	...

08008a24 <_svfiprintf_r>:
 8008a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	4698      	mov	r8, r3
 8008a2a:	898b      	ldrh	r3, [r1, #12]
 8008a2c:	061b      	lsls	r3, r3, #24
 8008a2e:	b09d      	sub	sp, #116	@ 0x74
 8008a30:	4607      	mov	r7, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	d510      	bpl.n	8008a5a <_svfiprintf_r+0x36>
 8008a38:	690b      	ldr	r3, [r1, #16]
 8008a3a:	b973      	cbnz	r3, 8008a5a <_svfiprintf_r+0x36>
 8008a3c:	2140      	movs	r1, #64	@ 0x40
 8008a3e:	f7fe fbd3 	bl	80071e8 <_malloc_r>
 8008a42:	6028      	str	r0, [r5, #0]
 8008a44:	6128      	str	r0, [r5, #16]
 8008a46:	b930      	cbnz	r0, 8008a56 <_svfiprintf_r+0x32>
 8008a48:	230c      	movs	r3, #12
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	b01d      	add	sp, #116	@ 0x74
 8008a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a56:	2340      	movs	r3, #64	@ 0x40
 8008a58:	616b      	str	r3, [r5, #20]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5e:	2320      	movs	r3, #32
 8008a60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a68:	2330      	movs	r3, #48	@ 0x30
 8008a6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c08 <_svfiprintf_r+0x1e4>
 8008a6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a72:	f04f 0901 	mov.w	r9, #1
 8008a76:	4623      	mov	r3, r4
 8008a78:	469a      	mov	sl, r3
 8008a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a7e:	b10a      	cbz	r2, 8008a84 <_svfiprintf_r+0x60>
 8008a80:	2a25      	cmp	r2, #37	@ 0x25
 8008a82:	d1f9      	bne.n	8008a78 <_svfiprintf_r+0x54>
 8008a84:	ebba 0b04 	subs.w	fp, sl, r4
 8008a88:	d00b      	beq.n	8008aa2 <_svfiprintf_r+0x7e>
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff ff6b 	bl	800896c <__ssputs_r>
 8008a96:	3001      	adds	r0, #1
 8008a98:	f000 80a7 	beq.w	8008bea <_svfiprintf_r+0x1c6>
 8008a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a9e:	445a      	add	r2, fp
 8008aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 809f 	beq.w	8008bea <_svfiprintf_r+0x1c6>
 8008aac:	2300      	movs	r3, #0
 8008aae:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab6:	f10a 0a01 	add.w	sl, sl, #1
 8008aba:	9304      	str	r3, [sp, #16]
 8008abc:	9307      	str	r3, [sp, #28]
 8008abe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ac4:	4654      	mov	r4, sl
 8008ac6:	2205      	movs	r2, #5
 8008ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008acc:	484e      	ldr	r0, [pc, #312]	@ (8008c08 <_svfiprintf_r+0x1e4>)
 8008ace:	f7f7 fb7f 	bl	80001d0 <memchr>
 8008ad2:	9a04      	ldr	r2, [sp, #16]
 8008ad4:	b9d8      	cbnz	r0, 8008b0e <_svfiprintf_r+0xea>
 8008ad6:	06d0      	lsls	r0, r2, #27
 8008ad8:	bf44      	itt	mi
 8008ada:	2320      	movmi	r3, #32
 8008adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae0:	0711      	lsls	r1, r2, #28
 8008ae2:	bf44      	itt	mi
 8008ae4:	232b      	movmi	r3, #43	@ 0x2b
 8008ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aea:	f89a 3000 	ldrb.w	r3, [sl]
 8008aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af0:	d015      	beq.n	8008b1e <_svfiprintf_r+0xfa>
 8008af2:	9a07      	ldr	r2, [sp, #28]
 8008af4:	4654      	mov	r4, sl
 8008af6:	2000      	movs	r0, #0
 8008af8:	f04f 0c0a 	mov.w	ip, #10
 8008afc:	4621      	mov	r1, r4
 8008afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b02:	3b30      	subs	r3, #48	@ 0x30
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	d94b      	bls.n	8008ba0 <_svfiprintf_r+0x17c>
 8008b08:	b1b0      	cbz	r0, 8008b38 <_svfiprintf_r+0x114>
 8008b0a:	9207      	str	r2, [sp, #28]
 8008b0c:	e014      	b.n	8008b38 <_svfiprintf_r+0x114>
 8008b0e:	eba0 0308 	sub.w	r3, r0, r8
 8008b12:	fa09 f303 	lsl.w	r3, r9, r3
 8008b16:	4313      	orrs	r3, r2
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	46a2      	mov	sl, r4
 8008b1c:	e7d2      	b.n	8008ac4 <_svfiprintf_r+0xa0>
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	1d19      	adds	r1, r3, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	9103      	str	r1, [sp, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfbb      	ittet	lt
 8008b2a:	425b      	neglt	r3, r3
 8008b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b30:	9307      	strge	r3, [sp, #28]
 8008b32:	9307      	strlt	r3, [sp, #28]
 8008b34:	bfb8      	it	lt
 8008b36:	9204      	strlt	r2, [sp, #16]
 8008b38:	7823      	ldrb	r3, [r4, #0]
 8008b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b3c:	d10a      	bne.n	8008b54 <_svfiprintf_r+0x130>
 8008b3e:	7863      	ldrb	r3, [r4, #1]
 8008b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b42:	d132      	bne.n	8008baa <_svfiprintf_r+0x186>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	1d1a      	adds	r2, r3, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	9203      	str	r2, [sp, #12]
 8008b4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b50:	3402      	adds	r4, #2
 8008b52:	9305      	str	r3, [sp, #20]
 8008b54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c18 <_svfiprintf_r+0x1f4>
 8008b58:	7821      	ldrb	r1, [r4, #0]
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	f7f7 fb37 	bl	80001d0 <memchr>
 8008b62:	b138      	cbz	r0, 8008b74 <_svfiprintf_r+0x150>
 8008b64:	9b04      	ldr	r3, [sp, #16]
 8008b66:	eba0 000a 	sub.w	r0, r0, sl
 8008b6a:	2240      	movs	r2, #64	@ 0x40
 8008b6c:	4082      	lsls	r2, r0
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	3401      	adds	r4, #1
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b78:	4824      	ldr	r0, [pc, #144]	@ (8008c0c <_svfiprintf_r+0x1e8>)
 8008b7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b7e:	2206      	movs	r2, #6
 8008b80:	f7f7 fb26 	bl	80001d0 <memchr>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d036      	beq.n	8008bf6 <_svfiprintf_r+0x1d2>
 8008b88:	4b21      	ldr	r3, [pc, #132]	@ (8008c10 <_svfiprintf_r+0x1ec>)
 8008b8a:	bb1b      	cbnz	r3, 8008bd4 <_svfiprintf_r+0x1b0>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	3307      	adds	r3, #7
 8008b90:	f023 0307 	bic.w	r3, r3, #7
 8008b94:	3308      	adds	r3, #8
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9a:	4433      	add	r3, r6
 8008b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b9e:	e76a      	b.n	8008a76 <_svfiprintf_r+0x52>
 8008ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	e7a8      	b.n	8008afc <_svfiprintf_r+0xd8>
 8008baa:	2300      	movs	r3, #0
 8008bac:	3401      	adds	r4, #1
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	f04f 0c0a 	mov.w	ip, #10
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bbc:	3a30      	subs	r2, #48	@ 0x30
 8008bbe:	2a09      	cmp	r2, #9
 8008bc0:	d903      	bls.n	8008bca <_svfiprintf_r+0x1a6>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0c6      	beq.n	8008b54 <_svfiprintf_r+0x130>
 8008bc6:	9105      	str	r1, [sp, #20]
 8008bc8:	e7c4      	b.n	8008b54 <_svfiprintf_r+0x130>
 8008bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bce:	4604      	mov	r4, r0
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e7f0      	b.n	8008bb6 <_svfiprintf_r+0x192>
 8008bd4:	ab03      	add	r3, sp, #12
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	462a      	mov	r2, r5
 8008bda:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <_svfiprintf_r+0x1f0>)
 8008bdc:	a904      	add	r1, sp, #16
 8008bde:	4638      	mov	r0, r7
 8008be0:	f7fc fc96 	bl	8005510 <_printf_float>
 8008be4:	1c42      	adds	r2, r0, #1
 8008be6:	4606      	mov	r6, r0
 8008be8:	d1d6      	bne.n	8008b98 <_svfiprintf_r+0x174>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	065b      	lsls	r3, r3, #25
 8008bee:	f53f af2d 	bmi.w	8008a4c <_svfiprintf_r+0x28>
 8008bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bf4:	e72c      	b.n	8008a50 <_svfiprintf_r+0x2c>
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	4b05      	ldr	r3, [pc, #20]	@ (8008c14 <_svfiprintf_r+0x1f0>)
 8008bfe:	a904      	add	r1, sp, #16
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7fc ff1d 	bl	8005a40 <_printf_i>
 8008c06:	e7ed      	b.n	8008be4 <_svfiprintf_r+0x1c0>
 8008c08:	08009f31 	.word	0x08009f31
 8008c0c:	08009f3b 	.word	0x08009f3b
 8008c10:	08005511 	.word	0x08005511
 8008c14:	0800896d 	.word	0x0800896d
 8008c18:	08009f37 	.word	0x08009f37

08008c1c <__sflush_r>:
 8008c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	0716      	lsls	r6, r2, #28
 8008c26:	4605      	mov	r5, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d454      	bmi.n	8008cd6 <__sflush_r+0xba>
 8008c2c:	684b      	ldr	r3, [r1, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dc02      	bgt.n	8008c38 <__sflush_r+0x1c>
 8008c32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd48      	ble.n	8008cca <__sflush_r+0xae>
 8008c38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c3a:	2e00      	cmp	r6, #0
 8008c3c:	d045      	beq.n	8008cca <__sflush_r+0xae>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c44:	682f      	ldr	r7, [r5, #0]
 8008c46:	6a21      	ldr	r1, [r4, #32]
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	d030      	beq.n	8008cae <__sflush_r+0x92>
 8008c4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	0759      	lsls	r1, r3, #29
 8008c52:	d505      	bpl.n	8008c60 <__sflush_r+0x44>
 8008c54:	6863      	ldr	r3, [r4, #4]
 8008c56:	1ad2      	subs	r2, r2, r3
 8008c58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c5a:	b10b      	cbz	r3, 8008c60 <__sflush_r+0x44>
 8008c5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	2300      	movs	r3, #0
 8008c62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c64:	6a21      	ldr	r1, [r4, #32]
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b0      	blx	r6
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	d106      	bne.n	8008c7e <__sflush_r+0x62>
 8008c70:	6829      	ldr	r1, [r5, #0]
 8008c72:	291d      	cmp	r1, #29
 8008c74:	d82b      	bhi.n	8008cce <__sflush_r+0xb2>
 8008c76:	4a2a      	ldr	r2, [pc, #168]	@ (8008d20 <__sflush_r+0x104>)
 8008c78:	410a      	asrs	r2, r1
 8008c7a:	07d6      	lsls	r6, r2, #31
 8008c7c:	d427      	bmi.n	8008cce <__sflush_r+0xb2>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	6062      	str	r2, [r4, #4]
 8008c82:	04d9      	lsls	r1, r3, #19
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	d504      	bpl.n	8008c94 <__sflush_r+0x78>
 8008c8a:	1c42      	adds	r2, r0, #1
 8008c8c:	d101      	bne.n	8008c92 <__sflush_r+0x76>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	b903      	cbnz	r3, 8008c94 <__sflush_r+0x78>
 8008c92:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c96:	602f      	str	r7, [r5, #0]
 8008c98:	b1b9      	cbz	r1, 8008cca <__sflush_r+0xae>
 8008c9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	d002      	beq.n	8008ca8 <__sflush_r+0x8c>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f7fe fa2c 	bl	8007100 <_free_r>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cac:	e00d      	b.n	8008cca <__sflush_r+0xae>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b0      	blx	r6
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	1c50      	adds	r0, r2, #1
 8008cb8:	d1c9      	bne.n	8008c4e <__sflush_r+0x32>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0c6      	beq.n	8008c4e <__sflush_r+0x32>
 8008cc0:	2b1d      	cmp	r3, #29
 8008cc2:	d001      	beq.n	8008cc8 <__sflush_r+0xac>
 8008cc4:	2b16      	cmp	r3, #22
 8008cc6:	d11e      	bne.n	8008d06 <__sflush_r+0xea>
 8008cc8:	602f      	str	r7, [r5, #0]
 8008cca:	2000      	movs	r0, #0
 8008ccc:	e022      	b.n	8008d14 <__sflush_r+0xf8>
 8008cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd2:	b21b      	sxth	r3, r3
 8008cd4:	e01b      	b.n	8008d0e <__sflush_r+0xf2>
 8008cd6:	690f      	ldr	r7, [r1, #16]
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	d0f6      	beq.n	8008cca <__sflush_r+0xae>
 8008cdc:	0793      	lsls	r3, r2, #30
 8008cde:	680e      	ldr	r6, [r1, #0]
 8008ce0:	bf08      	it	eq
 8008ce2:	694b      	ldreq	r3, [r1, #20]
 8008ce4:	600f      	str	r7, [r1, #0]
 8008ce6:	bf18      	it	ne
 8008ce8:	2300      	movne	r3, #0
 8008cea:	eba6 0807 	sub.w	r8, r6, r7
 8008cee:	608b      	str	r3, [r1, #8]
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	dde9      	ble.n	8008cca <__sflush_r+0xae>
 8008cf6:	6a21      	ldr	r1, [r4, #32]
 8008cf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cfa:	4643      	mov	r3, r8
 8008cfc:	463a      	mov	r2, r7
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b0      	blx	r6
 8008d02:	2800      	cmp	r0, #0
 8008d04:	dc08      	bgt.n	8008d18 <__sflush_r+0xfc>
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d18:	4407      	add	r7, r0
 8008d1a:	eba8 0800 	sub.w	r8, r8, r0
 8008d1e:	e7e7      	b.n	8008cf0 <__sflush_r+0xd4>
 8008d20:	dfbffffe 	.word	0xdfbffffe

08008d24 <_fflush_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	690b      	ldr	r3, [r1, #16]
 8008d28:	4605      	mov	r5, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	b913      	cbnz	r3, 8008d34 <_fflush_r+0x10>
 8008d2e:	2500      	movs	r5, #0
 8008d30:	4628      	mov	r0, r5
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	b118      	cbz	r0, 8008d3e <_fflush_r+0x1a>
 8008d36:	6a03      	ldr	r3, [r0, #32]
 8008d38:	b90b      	cbnz	r3, 8008d3e <_fflush_r+0x1a>
 8008d3a:	f7fd fa41 	bl	80061c0 <__sinit>
 8008d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f3      	beq.n	8008d2e <_fflush_r+0xa>
 8008d46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d48:	07d0      	lsls	r0, r2, #31
 8008d4a:	d404      	bmi.n	8008d56 <_fflush_r+0x32>
 8008d4c:	0599      	lsls	r1, r3, #22
 8008d4e:	d402      	bmi.n	8008d56 <_fflush_r+0x32>
 8008d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d52:	f7fd fb80 	bl	8006456 <__retarget_lock_acquire_recursive>
 8008d56:	4628      	mov	r0, r5
 8008d58:	4621      	mov	r1, r4
 8008d5a:	f7ff ff5f 	bl	8008c1c <__sflush_r>
 8008d5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d60:	07da      	lsls	r2, r3, #31
 8008d62:	4605      	mov	r5, r0
 8008d64:	d4e4      	bmi.n	8008d30 <_fflush_r+0xc>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	059b      	lsls	r3, r3, #22
 8008d6a:	d4e1      	bmi.n	8008d30 <_fflush_r+0xc>
 8008d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6e:	f7fd fb73 	bl	8006458 <__retarget_lock_release_recursive>
 8008d72:	e7dd      	b.n	8008d30 <_fflush_r+0xc>

08008d74 <memmove>:
 8008d74:	4288      	cmp	r0, r1
 8008d76:	b510      	push	{r4, lr}
 8008d78:	eb01 0402 	add.w	r4, r1, r2
 8008d7c:	d902      	bls.n	8008d84 <memmove+0x10>
 8008d7e:	4284      	cmp	r4, r0
 8008d80:	4623      	mov	r3, r4
 8008d82:	d807      	bhi.n	8008d94 <memmove+0x20>
 8008d84:	1e43      	subs	r3, r0, #1
 8008d86:	42a1      	cmp	r1, r4
 8008d88:	d008      	beq.n	8008d9c <memmove+0x28>
 8008d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d92:	e7f8      	b.n	8008d86 <memmove+0x12>
 8008d94:	4402      	add	r2, r0
 8008d96:	4601      	mov	r1, r0
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	d100      	bne.n	8008d9e <memmove+0x2a>
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da6:	e7f7      	b.n	8008d98 <memmove+0x24>

08008da8 <strncmp>:
 8008da8:	b510      	push	{r4, lr}
 8008daa:	b16a      	cbz	r2, 8008dc8 <strncmp+0x20>
 8008dac:	3901      	subs	r1, #1
 8008dae:	1884      	adds	r4, r0, r2
 8008db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d103      	bne.n	8008dc4 <strncmp+0x1c>
 8008dbc:	42a0      	cmp	r0, r4
 8008dbe:	d001      	beq.n	8008dc4 <strncmp+0x1c>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	d1f5      	bne.n	8008db0 <strncmp+0x8>
 8008dc4:	1ad0      	subs	r0, r2, r3
 8008dc6:	bd10      	pop	{r4, pc}
 8008dc8:	4610      	mov	r0, r2
 8008dca:	e7fc      	b.n	8008dc6 <strncmp+0x1e>

08008dcc <_sbrk_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d06      	ldr	r5, [pc, #24]	@ (8008de8 <_sbrk_r+0x1c>)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	f7f8 fcb8 	bl	800174c <_sbrk>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_sbrk_r+0x1a>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_sbrk_r+0x1a>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	200005b4 	.word	0x200005b4

08008dec <memcpy>:
 8008dec:	440a      	add	r2, r1
 8008dee:	4291      	cmp	r1, r2
 8008df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008df4:	d100      	bne.n	8008df8 <memcpy+0xc>
 8008df6:	4770      	bx	lr
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e02:	4291      	cmp	r1, r2
 8008e04:	d1f9      	bne.n	8008dfa <memcpy+0xe>
 8008e06:	bd10      	pop	{r4, pc}

08008e08 <nan>:
 8008e08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e10 <nan+0x8>
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	00000000 	.word	0x00000000
 8008e14:	7ff80000 	.word	0x7ff80000

08008e18 <__assert_func>:
 8008e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e1a:	4614      	mov	r4, r2
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4b09      	ldr	r3, [pc, #36]	@ (8008e44 <__assert_func+0x2c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4605      	mov	r5, r0
 8008e24:	68d8      	ldr	r0, [r3, #12]
 8008e26:	b954      	cbnz	r4, 8008e3e <__assert_func+0x26>
 8008e28:	4b07      	ldr	r3, [pc, #28]	@ (8008e48 <__assert_func+0x30>)
 8008e2a:	461c      	mov	r4, r3
 8008e2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e30:	9100      	str	r1, [sp, #0]
 8008e32:	462b      	mov	r3, r5
 8008e34:	4905      	ldr	r1, [pc, #20]	@ (8008e4c <__assert_func+0x34>)
 8008e36:	f000 fba7 	bl	8009588 <fiprintf>
 8008e3a:	f000 fbb7 	bl	80095ac <abort>
 8008e3e:	4b04      	ldr	r3, [pc, #16]	@ (8008e50 <__assert_func+0x38>)
 8008e40:	e7f4      	b.n	8008e2c <__assert_func+0x14>
 8008e42:	bf00      	nop
 8008e44:	20000018 	.word	0x20000018
 8008e48:	08009f85 	.word	0x08009f85
 8008e4c:	08009f57 	.word	0x08009f57
 8008e50:	08009f4a 	.word	0x08009f4a

08008e54 <_calloc_r>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	fba1 5402 	umull	r5, r4, r1, r2
 8008e5a:	b93c      	cbnz	r4, 8008e6c <_calloc_r+0x18>
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f7fe f9c3 	bl	80071e8 <_malloc_r>
 8008e62:	4606      	mov	r6, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <_calloc_r+0x1e>
 8008e66:	2600      	movs	r6, #0
 8008e68:	4630      	mov	r0, r6
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	220c      	movs	r2, #12
 8008e6e:	6002      	str	r2, [r0, #0]
 8008e70:	e7f9      	b.n	8008e66 <_calloc_r+0x12>
 8008e72:	462a      	mov	r2, r5
 8008e74:	4621      	mov	r1, r4
 8008e76:	f7fd fa70 	bl	800635a <memset>
 8008e7a:	e7f5      	b.n	8008e68 <_calloc_r+0x14>

08008e7c <rshift>:
 8008e7c:	6903      	ldr	r3, [r0, #16]
 8008e7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e8a:	f100 0414 	add.w	r4, r0, #20
 8008e8e:	dd45      	ble.n	8008f1c <rshift+0xa0>
 8008e90:	f011 011f 	ands.w	r1, r1, #31
 8008e94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e9c:	d10c      	bne.n	8008eb8 <rshift+0x3c>
 8008e9e:	f100 0710 	add.w	r7, r0, #16
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	42b1      	cmp	r1, r6
 8008ea6:	d334      	bcc.n	8008f12 <rshift+0x96>
 8008ea8:	1a9b      	subs	r3, r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	1eea      	subs	r2, r5, #3
 8008eae:	4296      	cmp	r6, r2
 8008eb0:	bf38      	it	cc
 8008eb2:	2300      	movcc	r3, #0
 8008eb4:	4423      	add	r3, r4
 8008eb6:	e015      	b.n	8008ee4 <rshift+0x68>
 8008eb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ebc:	f1c1 0820 	rsb	r8, r1, #32
 8008ec0:	40cf      	lsrs	r7, r1
 8008ec2:	f105 0e04 	add.w	lr, r5, #4
 8008ec6:	46a1      	mov	r9, r4
 8008ec8:	4576      	cmp	r6, lr
 8008eca:	46f4      	mov	ip, lr
 8008ecc:	d815      	bhi.n	8008efa <rshift+0x7e>
 8008ece:	1a9a      	subs	r2, r3, r2
 8008ed0:	0092      	lsls	r2, r2, #2
 8008ed2:	3a04      	subs	r2, #4
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	42ae      	cmp	r6, r5
 8008ed8:	bf38      	it	cc
 8008eda:	2200      	movcc	r2, #0
 8008edc:	18a3      	adds	r3, r4, r2
 8008ede:	50a7      	str	r7, [r4, r2]
 8008ee0:	b107      	cbz	r7, 8008ee4 <rshift+0x68>
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	1b1a      	subs	r2, r3, r4
 8008ee6:	42a3      	cmp	r3, r4
 8008ee8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008eec:	bf08      	it	eq
 8008eee:	2300      	moveq	r3, #0
 8008ef0:	6102      	str	r2, [r0, #16]
 8008ef2:	bf08      	it	eq
 8008ef4:	6143      	streq	r3, [r0, #20]
 8008ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008efa:	f8dc c000 	ldr.w	ip, [ip]
 8008efe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f02:	ea4c 0707 	orr.w	r7, ip, r7
 8008f06:	f849 7b04 	str.w	r7, [r9], #4
 8008f0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f0e:	40cf      	lsrs	r7, r1
 8008f10:	e7da      	b.n	8008ec8 <rshift+0x4c>
 8008f12:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f16:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f1a:	e7c3      	b.n	8008ea4 <rshift+0x28>
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	e7e1      	b.n	8008ee4 <rshift+0x68>

08008f20 <__hexdig_fun>:
 8008f20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008f24:	2b09      	cmp	r3, #9
 8008f26:	d802      	bhi.n	8008f2e <__hexdig_fun+0xe>
 8008f28:	3820      	subs	r0, #32
 8008f2a:	b2c0      	uxtb	r0, r0
 8008f2c:	4770      	bx	lr
 8008f2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008f32:	2b05      	cmp	r3, #5
 8008f34:	d801      	bhi.n	8008f3a <__hexdig_fun+0x1a>
 8008f36:	3847      	subs	r0, #71	@ 0x47
 8008f38:	e7f7      	b.n	8008f2a <__hexdig_fun+0xa>
 8008f3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008f3e:	2b05      	cmp	r3, #5
 8008f40:	d801      	bhi.n	8008f46 <__hexdig_fun+0x26>
 8008f42:	3827      	subs	r0, #39	@ 0x27
 8008f44:	e7f1      	b.n	8008f2a <__hexdig_fun+0xa>
 8008f46:	2000      	movs	r0, #0
 8008f48:	4770      	bx	lr
	...

08008f4c <__gethex>:
 8008f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	b085      	sub	sp, #20
 8008f52:	468a      	mov	sl, r1
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	680b      	ldr	r3, [r1, #0]
 8008f58:	9001      	str	r0, [sp, #4]
 8008f5a:	4690      	mov	r8, r2
 8008f5c:	1c9c      	adds	r4, r3, #2
 8008f5e:	46a1      	mov	r9, r4
 8008f60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008f64:	2830      	cmp	r0, #48	@ 0x30
 8008f66:	d0fa      	beq.n	8008f5e <__gethex+0x12>
 8008f68:	eba9 0303 	sub.w	r3, r9, r3
 8008f6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008f70:	f7ff ffd6 	bl	8008f20 <__hexdig_fun>
 8008f74:	4605      	mov	r5, r0
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d168      	bne.n	800904c <__gethex+0x100>
 8008f7a:	49a0      	ldr	r1, [pc, #640]	@ (80091fc <__gethex+0x2b0>)
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	4648      	mov	r0, r9
 8008f80:	f7ff ff12 	bl	8008da8 <strncmp>
 8008f84:	4607      	mov	r7, r0
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d167      	bne.n	800905a <__gethex+0x10e>
 8008f8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008f8e:	4626      	mov	r6, r4
 8008f90:	f7ff ffc6 	bl	8008f20 <__hexdig_fun>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d062      	beq.n	800905e <__gethex+0x112>
 8008f98:	4623      	mov	r3, r4
 8008f9a:	7818      	ldrb	r0, [r3, #0]
 8008f9c:	2830      	cmp	r0, #48	@ 0x30
 8008f9e:	4699      	mov	r9, r3
 8008fa0:	f103 0301 	add.w	r3, r3, #1
 8008fa4:	d0f9      	beq.n	8008f9a <__gethex+0x4e>
 8008fa6:	f7ff ffbb 	bl	8008f20 <__hexdig_fun>
 8008faa:	fab0 f580 	clz	r5, r0
 8008fae:	096d      	lsrs	r5, r5, #5
 8008fb0:	f04f 0b01 	mov.w	fp, #1
 8008fb4:	464a      	mov	r2, r9
 8008fb6:	4616      	mov	r6, r2
 8008fb8:	3201      	adds	r2, #1
 8008fba:	7830      	ldrb	r0, [r6, #0]
 8008fbc:	f7ff ffb0 	bl	8008f20 <__hexdig_fun>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d1f8      	bne.n	8008fb6 <__gethex+0x6a>
 8008fc4:	498d      	ldr	r1, [pc, #564]	@ (80091fc <__gethex+0x2b0>)
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff feed 	bl	8008da8 <strncmp>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d13f      	bne.n	8009052 <__gethex+0x106>
 8008fd2:	b944      	cbnz	r4, 8008fe6 <__gethex+0x9a>
 8008fd4:	1c74      	adds	r4, r6, #1
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	4616      	mov	r6, r2
 8008fda:	3201      	adds	r2, #1
 8008fdc:	7830      	ldrb	r0, [r6, #0]
 8008fde:	f7ff ff9f 	bl	8008f20 <__hexdig_fun>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d1f8      	bne.n	8008fd8 <__gethex+0x8c>
 8008fe6:	1ba4      	subs	r4, r4, r6
 8008fe8:	00a7      	lsls	r7, r4, #2
 8008fea:	7833      	ldrb	r3, [r6, #0]
 8008fec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ff0:	2b50      	cmp	r3, #80	@ 0x50
 8008ff2:	d13e      	bne.n	8009072 <__gethex+0x126>
 8008ff4:	7873      	ldrb	r3, [r6, #1]
 8008ff6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ff8:	d033      	beq.n	8009062 <__gethex+0x116>
 8008ffa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ffc:	d034      	beq.n	8009068 <__gethex+0x11c>
 8008ffe:	1c71      	adds	r1, r6, #1
 8009000:	2400      	movs	r4, #0
 8009002:	7808      	ldrb	r0, [r1, #0]
 8009004:	f7ff ff8c 	bl	8008f20 <__hexdig_fun>
 8009008:	1e43      	subs	r3, r0, #1
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b18      	cmp	r3, #24
 800900e:	d830      	bhi.n	8009072 <__gethex+0x126>
 8009010:	f1a0 0210 	sub.w	r2, r0, #16
 8009014:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009018:	f7ff ff82 	bl	8008f20 <__hexdig_fun>
 800901c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009020:	fa5f fc8c 	uxtb.w	ip, ip
 8009024:	f1bc 0f18 	cmp.w	ip, #24
 8009028:	f04f 030a 	mov.w	r3, #10
 800902c:	d91e      	bls.n	800906c <__gethex+0x120>
 800902e:	b104      	cbz	r4, 8009032 <__gethex+0xe6>
 8009030:	4252      	negs	r2, r2
 8009032:	4417      	add	r7, r2
 8009034:	f8ca 1000 	str.w	r1, [sl]
 8009038:	b1ed      	cbz	r5, 8009076 <__gethex+0x12a>
 800903a:	f1bb 0f00 	cmp.w	fp, #0
 800903e:	bf0c      	ite	eq
 8009040:	2506      	moveq	r5, #6
 8009042:	2500      	movne	r5, #0
 8009044:	4628      	mov	r0, r5
 8009046:	b005      	add	sp, #20
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	2500      	movs	r5, #0
 800904e:	462c      	mov	r4, r5
 8009050:	e7b0      	b.n	8008fb4 <__gethex+0x68>
 8009052:	2c00      	cmp	r4, #0
 8009054:	d1c7      	bne.n	8008fe6 <__gethex+0x9a>
 8009056:	4627      	mov	r7, r4
 8009058:	e7c7      	b.n	8008fea <__gethex+0x9e>
 800905a:	464e      	mov	r6, r9
 800905c:	462f      	mov	r7, r5
 800905e:	2501      	movs	r5, #1
 8009060:	e7c3      	b.n	8008fea <__gethex+0x9e>
 8009062:	2400      	movs	r4, #0
 8009064:	1cb1      	adds	r1, r6, #2
 8009066:	e7cc      	b.n	8009002 <__gethex+0xb6>
 8009068:	2401      	movs	r4, #1
 800906a:	e7fb      	b.n	8009064 <__gethex+0x118>
 800906c:	fb03 0002 	mla	r0, r3, r2, r0
 8009070:	e7ce      	b.n	8009010 <__gethex+0xc4>
 8009072:	4631      	mov	r1, r6
 8009074:	e7de      	b.n	8009034 <__gethex+0xe8>
 8009076:	eba6 0309 	sub.w	r3, r6, r9
 800907a:	3b01      	subs	r3, #1
 800907c:	4629      	mov	r1, r5
 800907e:	2b07      	cmp	r3, #7
 8009080:	dc0a      	bgt.n	8009098 <__gethex+0x14c>
 8009082:	9801      	ldr	r0, [sp, #4]
 8009084:	f7fe f93c 	bl	8007300 <_Balloc>
 8009088:	4604      	mov	r4, r0
 800908a:	b940      	cbnz	r0, 800909e <__gethex+0x152>
 800908c:	4b5c      	ldr	r3, [pc, #368]	@ (8009200 <__gethex+0x2b4>)
 800908e:	4602      	mov	r2, r0
 8009090:	21e4      	movs	r1, #228	@ 0xe4
 8009092:	485c      	ldr	r0, [pc, #368]	@ (8009204 <__gethex+0x2b8>)
 8009094:	f7ff fec0 	bl	8008e18 <__assert_func>
 8009098:	3101      	adds	r1, #1
 800909a:	105b      	asrs	r3, r3, #1
 800909c:	e7ef      	b.n	800907e <__gethex+0x132>
 800909e:	f100 0a14 	add.w	sl, r0, #20
 80090a2:	2300      	movs	r3, #0
 80090a4:	4655      	mov	r5, sl
 80090a6:	469b      	mov	fp, r3
 80090a8:	45b1      	cmp	r9, r6
 80090aa:	d337      	bcc.n	800911c <__gethex+0x1d0>
 80090ac:	f845 bb04 	str.w	fp, [r5], #4
 80090b0:	eba5 050a 	sub.w	r5, r5, sl
 80090b4:	10ad      	asrs	r5, r5, #2
 80090b6:	6125      	str	r5, [r4, #16]
 80090b8:	4658      	mov	r0, fp
 80090ba:	f7fe fa13 	bl	80074e4 <__hi0bits>
 80090be:	016d      	lsls	r5, r5, #5
 80090c0:	f8d8 6000 	ldr.w	r6, [r8]
 80090c4:	1a2d      	subs	r5, r5, r0
 80090c6:	42b5      	cmp	r5, r6
 80090c8:	dd54      	ble.n	8009174 <__gethex+0x228>
 80090ca:	1bad      	subs	r5, r5, r6
 80090cc:	4629      	mov	r1, r5
 80090ce:	4620      	mov	r0, r4
 80090d0:	f7fe fda7 	bl	8007c22 <__any_on>
 80090d4:	4681      	mov	r9, r0
 80090d6:	b178      	cbz	r0, 80090f8 <__gethex+0x1ac>
 80090d8:	1e6b      	subs	r3, r5, #1
 80090da:	1159      	asrs	r1, r3, #5
 80090dc:	f003 021f 	and.w	r2, r3, #31
 80090e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80090e4:	f04f 0901 	mov.w	r9, #1
 80090e8:	fa09 f202 	lsl.w	r2, r9, r2
 80090ec:	420a      	tst	r2, r1
 80090ee:	d003      	beq.n	80090f8 <__gethex+0x1ac>
 80090f0:	454b      	cmp	r3, r9
 80090f2:	dc36      	bgt.n	8009162 <__gethex+0x216>
 80090f4:	f04f 0902 	mov.w	r9, #2
 80090f8:	4629      	mov	r1, r5
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7ff febe 	bl	8008e7c <rshift>
 8009100:	442f      	add	r7, r5
 8009102:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009106:	42bb      	cmp	r3, r7
 8009108:	da42      	bge.n	8009190 <__gethex+0x244>
 800910a:	9801      	ldr	r0, [sp, #4]
 800910c:	4621      	mov	r1, r4
 800910e:	f7fe f937 	bl	8007380 <_Bfree>
 8009112:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009114:	2300      	movs	r3, #0
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	25a3      	movs	r5, #163	@ 0xa3
 800911a:	e793      	b.n	8009044 <__gethex+0xf8>
 800911c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009120:	2a2e      	cmp	r2, #46	@ 0x2e
 8009122:	d012      	beq.n	800914a <__gethex+0x1fe>
 8009124:	2b20      	cmp	r3, #32
 8009126:	d104      	bne.n	8009132 <__gethex+0x1e6>
 8009128:	f845 bb04 	str.w	fp, [r5], #4
 800912c:	f04f 0b00 	mov.w	fp, #0
 8009130:	465b      	mov	r3, fp
 8009132:	7830      	ldrb	r0, [r6, #0]
 8009134:	9303      	str	r3, [sp, #12]
 8009136:	f7ff fef3 	bl	8008f20 <__hexdig_fun>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	f000 000f 	and.w	r0, r0, #15
 8009140:	4098      	lsls	r0, r3
 8009142:	ea4b 0b00 	orr.w	fp, fp, r0
 8009146:	3304      	adds	r3, #4
 8009148:	e7ae      	b.n	80090a8 <__gethex+0x15c>
 800914a:	45b1      	cmp	r9, r6
 800914c:	d8ea      	bhi.n	8009124 <__gethex+0x1d8>
 800914e:	492b      	ldr	r1, [pc, #172]	@ (80091fc <__gethex+0x2b0>)
 8009150:	9303      	str	r3, [sp, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff fe27 	bl	8008da8 <strncmp>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	2800      	cmp	r0, #0
 800915e:	d1e1      	bne.n	8009124 <__gethex+0x1d8>
 8009160:	e7a2      	b.n	80090a8 <__gethex+0x15c>
 8009162:	1ea9      	subs	r1, r5, #2
 8009164:	4620      	mov	r0, r4
 8009166:	f7fe fd5c 	bl	8007c22 <__any_on>
 800916a:	2800      	cmp	r0, #0
 800916c:	d0c2      	beq.n	80090f4 <__gethex+0x1a8>
 800916e:	f04f 0903 	mov.w	r9, #3
 8009172:	e7c1      	b.n	80090f8 <__gethex+0x1ac>
 8009174:	da09      	bge.n	800918a <__gethex+0x23e>
 8009176:	1b75      	subs	r5, r6, r5
 8009178:	4621      	mov	r1, r4
 800917a:	9801      	ldr	r0, [sp, #4]
 800917c:	462a      	mov	r2, r5
 800917e:	f7fe fb17 	bl	80077b0 <__lshift>
 8009182:	1b7f      	subs	r7, r7, r5
 8009184:	4604      	mov	r4, r0
 8009186:	f100 0a14 	add.w	sl, r0, #20
 800918a:	f04f 0900 	mov.w	r9, #0
 800918e:	e7b8      	b.n	8009102 <__gethex+0x1b6>
 8009190:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009194:	42bd      	cmp	r5, r7
 8009196:	dd6f      	ble.n	8009278 <__gethex+0x32c>
 8009198:	1bed      	subs	r5, r5, r7
 800919a:	42ae      	cmp	r6, r5
 800919c:	dc34      	bgt.n	8009208 <__gethex+0x2bc>
 800919e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d022      	beq.n	80091ec <__gethex+0x2a0>
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d024      	beq.n	80091f4 <__gethex+0x2a8>
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d115      	bne.n	80091da <__gethex+0x28e>
 80091ae:	42ae      	cmp	r6, r5
 80091b0:	d113      	bne.n	80091da <__gethex+0x28e>
 80091b2:	2e01      	cmp	r6, #1
 80091b4:	d10b      	bne.n	80091ce <__gethex+0x282>
 80091b6:	9a02      	ldr	r2, [sp, #8]
 80091b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	2301      	movs	r3, #1
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	f8ca 3000 	str.w	r3, [sl]
 80091c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c8:	2562      	movs	r5, #98	@ 0x62
 80091ca:	601c      	str	r4, [r3, #0]
 80091cc:	e73a      	b.n	8009044 <__gethex+0xf8>
 80091ce:	1e71      	subs	r1, r6, #1
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7fe fd26 	bl	8007c22 <__any_on>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d1ed      	bne.n	80091b6 <__gethex+0x26a>
 80091da:	9801      	ldr	r0, [sp, #4]
 80091dc:	4621      	mov	r1, r4
 80091de:	f7fe f8cf 	bl	8007380 <_Bfree>
 80091e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091e4:	2300      	movs	r3, #0
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	2550      	movs	r5, #80	@ 0x50
 80091ea:	e72b      	b.n	8009044 <__gethex+0xf8>
 80091ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f3      	bne.n	80091da <__gethex+0x28e>
 80091f2:	e7e0      	b.n	80091b6 <__gethex+0x26a>
 80091f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1dd      	bne.n	80091b6 <__gethex+0x26a>
 80091fa:	e7ee      	b.n	80091da <__gethex+0x28e>
 80091fc:	08009dd8 	.word	0x08009dd8
 8009200:	08009c6d 	.word	0x08009c6d
 8009204:	08009f86 	.word	0x08009f86
 8009208:	1e6f      	subs	r7, r5, #1
 800920a:	f1b9 0f00 	cmp.w	r9, #0
 800920e:	d130      	bne.n	8009272 <__gethex+0x326>
 8009210:	b127      	cbz	r7, 800921c <__gethex+0x2d0>
 8009212:	4639      	mov	r1, r7
 8009214:	4620      	mov	r0, r4
 8009216:	f7fe fd04 	bl	8007c22 <__any_on>
 800921a:	4681      	mov	r9, r0
 800921c:	117a      	asrs	r2, r7, #5
 800921e:	2301      	movs	r3, #1
 8009220:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009224:	f007 071f 	and.w	r7, r7, #31
 8009228:	40bb      	lsls	r3, r7
 800922a:	4213      	tst	r3, r2
 800922c:	4629      	mov	r1, r5
 800922e:	4620      	mov	r0, r4
 8009230:	bf18      	it	ne
 8009232:	f049 0902 	orrne.w	r9, r9, #2
 8009236:	f7ff fe21 	bl	8008e7c <rshift>
 800923a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800923e:	1b76      	subs	r6, r6, r5
 8009240:	2502      	movs	r5, #2
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	d047      	beq.n	80092d8 <__gethex+0x38c>
 8009248:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d015      	beq.n	800927c <__gethex+0x330>
 8009250:	2b03      	cmp	r3, #3
 8009252:	d017      	beq.n	8009284 <__gethex+0x338>
 8009254:	2b01      	cmp	r3, #1
 8009256:	d109      	bne.n	800926c <__gethex+0x320>
 8009258:	f019 0f02 	tst.w	r9, #2
 800925c:	d006      	beq.n	800926c <__gethex+0x320>
 800925e:	f8da 3000 	ldr.w	r3, [sl]
 8009262:	ea49 0903 	orr.w	r9, r9, r3
 8009266:	f019 0f01 	tst.w	r9, #1
 800926a:	d10e      	bne.n	800928a <__gethex+0x33e>
 800926c:	f045 0510 	orr.w	r5, r5, #16
 8009270:	e032      	b.n	80092d8 <__gethex+0x38c>
 8009272:	f04f 0901 	mov.w	r9, #1
 8009276:	e7d1      	b.n	800921c <__gethex+0x2d0>
 8009278:	2501      	movs	r5, #1
 800927a:	e7e2      	b.n	8009242 <__gethex+0x2f6>
 800927c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800927e:	f1c3 0301 	rsb	r3, r3, #1
 8009282:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0f0      	beq.n	800926c <__gethex+0x320>
 800928a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800928e:	f104 0314 	add.w	r3, r4, #20
 8009292:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009296:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800929a:	f04f 0c00 	mov.w	ip, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092a8:	d01b      	beq.n	80092e2 <__gethex+0x396>
 80092aa:	3201      	adds	r2, #1
 80092ac:	6002      	str	r2, [r0, #0]
 80092ae:	2d02      	cmp	r5, #2
 80092b0:	f104 0314 	add.w	r3, r4, #20
 80092b4:	d13c      	bne.n	8009330 <__gethex+0x3e4>
 80092b6:	f8d8 2000 	ldr.w	r2, [r8]
 80092ba:	3a01      	subs	r2, #1
 80092bc:	42b2      	cmp	r2, r6
 80092be:	d109      	bne.n	80092d4 <__gethex+0x388>
 80092c0:	1171      	asrs	r1, r6, #5
 80092c2:	2201      	movs	r2, #1
 80092c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092c8:	f006 061f 	and.w	r6, r6, #31
 80092cc:	fa02 f606 	lsl.w	r6, r2, r6
 80092d0:	421e      	tst	r6, r3
 80092d2:	d13a      	bne.n	800934a <__gethex+0x3fe>
 80092d4:	f045 0520 	orr.w	r5, r5, #32
 80092d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092da:	601c      	str	r4, [r3, #0]
 80092dc:	9b02      	ldr	r3, [sp, #8]
 80092de:	601f      	str	r7, [r3, #0]
 80092e0:	e6b0      	b.n	8009044 <__gethex+0xf8>
 80092e2:	4299      	cmp	r1, r3
 80092e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80092e8:	d8d9      	bhi.n	800929e <__gethex+0x352>
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	459b      	cmp	fp, r3
 80092ee:	db17      	blt.n	8009320 <__gethex+0x3d4>
 80092f0:	6861      	ldr	r1, [r4, #4]
 80092f2:	9801      	ldr	r0, [sp, #4]
 80092f4:	3101      	adds	r1, #1
 80092f6:	f7fe f803 	bl	8007300 <_Balloc>
 80092fa:	4681      	mov	r9, r0
 80092fc:	b918      	cbnz	r0, 8009306 <__gethex+0x3ba>
 80092fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009368 <__gethex+0x41c>)
 8009300:	4602      	mov	r2, r0
 8009302:	2184      	movs	r1, #132	@ 0x84
 8009304:	e6c5      	b.n	8009092 <__gethex+0x146>
 8009306:	6922      	ldr	r2, [r4, #16]
 8009308:	3202      	adds	r2, #2
 800930a:	f104 010c 	add.w	r1, r4, #12
 800930e:	0092      	lsls	r2, r2, #2
 8009310:	300c      	adds	r0, #12
 8009312:	f7ff fd6b 	bl	8008dec <memcpy>
 8009316:	4621      	mov	r1, r4
 8009318:	9801      	ldr	r0, [sp, #4]
 800931a:	f7fe f831 	bl	8007380 <_Bfree>
 800931e:	464c      	mov	r4, r9
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009328:	6122      	str	r2, [r4, #16]
 800932a:	2201      	movs	r2, #1
 800932c:	615a      	str	r2, [r3, #20]
 800932e:	e7be      	b.n	80092ae <__gethex+0x362>
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	455a      	cmp	r2, fp
 8009334:	dd0b      	ble.n	800934e <__gethex+0x402>
 8009336:	2101      	movs	r1, #1
 8009338:	4620      	mov	r0, r4
 800933a:	f7ff fd9f 	bl	8008e7c <rshift>
 800933e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009342:	3701      	adds	r7, #1
 8009344:	42bb      	cmp	r3, r7
 8009346:	f6ff aee0 	blt.w	800910a <__gethex+0x1be>
 800934a:	2501      	movs	r5, #1
 800934c:	e7c2      	b.n	80092d4 <__gethex+0x388>
 800934e:	f016 061f 	ands.w	r6, r6, #31
 8009352:	d0fa      	beq.n	800934a <__gethex+0x3fe>
 8009354:	4453      	add	r3, sl
 8009356:	f1c6 0620 	rsb	r6, r6, #32
 800935a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800935e:	f7fe f8c1 	bl	80074e4 <__hi0bits>
 8009362:	42b0      	cmp	r0, r6
 8009364:	dbe7      	blt.n	8009336 <__gethex+0x3ea>
 8009366:	e7f0      	b.n	800934a <__gethex+0x3fe>
 8009368:	08009c6d 	.word	0x08009c6d

0800936c <L_shift>:
 800936c:	f1c2 0208 	rsb	r2, r2, #8
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	b570      	push	{r4, r5, r6, lr}
 8009374:	f1c2 0620 	rsb	r6, r2, #32
 8009378:	6843      	ldr	r3, [r0, #4]
 800937a:	6804      	ldr	r4, [r0, #0]
 800937c:	fa03 f506 	lsl.w	r5, r3, r6
 8009380:	432c      	orrs	r4, r5
 8009382:	40d3      	lsrs	r3, r2
 8009384:	6004      	str	r4, [r0, #0]
 8009386:	f840 3f04 	str.w	r3, [r0, #4]!
 800938a:	4288      	cmp	r0, r1
 800938c:	d3f4      	bcc.n	8009378 <L_shift+0xc>
 800938e:	bd70      	pop	{r4, r5, r6, pc}

08009390 <__match>:
 8009390:	b530      	push	{r4, r5, lr}
 8009392:	6803      	ldr	r3, [r0, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939a:	b914      	cbnz	r4, 80093a2 <__match+0x12>
 800939c:	6003      	str	r3, [r0, #0]
 800939e:	2001      	movs	r0, #1
 80093a0:	bd30      	pop	{r4, r5, pc}
 80093a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80093aa:	2d19      	cmp	r5, #25
 80093ac:	bf98      	it	ls
 80093ae:	3220      	addls	r2, #32
 80093b0:	42a2      	cmp	r2, r4
 80093b2:	d0f0      	beq.n	8009396 <__match+0x6>
 80093b4:	2000      	movs	r0, #0
 80093b6:	e7f3      	b.n	80093a0 <__match+0x10>

080093b8 <__hexnan>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	680b      	ldr	r3, [r1, #0]
 80093be:	6801      	ldr	r1, [r0, #0]
 80093c0:	115e      	asrs	r6, r3, #5
 80093c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093c6:	f013 031f 	ands.w	r3, r3, #31
 80093ca:	b087      	sub	sp, #28
 80093cc:	bf18      	it	ne
 80093ce:	3604      	addne	r6, #4
 80093d0:	2500      	movs	r5, #0
 80093d2:	1f37      	subs	r7, r6, #4
 80093d4:	4682      	mov	sl, r0
 80093d6:	4690      	mov	r8, r2
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	f846 5c04 	str.w	r5, [r6, #-4]
 80093de:	46b9      	mov	r9, r7
 80093e0:	463c      	mov	r4, r7
 80093e2:	9502      	str	r5, [sp, #8]
 80093e4:	46ab      	mov	fp, r5
 80093e6:	784a      	ldrb	r2, [r1, #1]
 80093e8:	1c4b      	adds	r3, r1, #1
 80093ea:	9303      	str	r3, [sp, #12]
 80093ec:	b342      	cbz	r2, 8009440 <__hexnan+0x88>
 80093ee:	4610      	mov	r0, r2
 80093f0:	9105      	str	r1, [sp, #20]
 80093f2:	9204      	str	r2, [sp, #16]
 80093f4:	f7ff fd94 	bl	8008f20 <__hexdig_fun>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d151      	bne.n	80094a0 <__hexnan+0xe8>
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	9905      	ldr	r1, [sp, #20]
 8009400:	2a20      	cmp	r2, #32
 8009402:	d818      	bhi.n	8009436 <__hexnan+0x7e>
 8009404:	9b02      	ldr	r3, [sp, #8]
 8009406:	459b      	cmp	fp, r3
 8009408:	dd13      	ble.n	8009432 <__hexnan+0x7a>
 800940a:	454c      	cmp	r4, r9
 800940c:	d206      	bcs.n	800941c <__hexnan+0x64>
 800940e:	2d07      	cmp	r5, #7
 8009410:	dc04      	bgt.n	800941c <__hexnan+0x64>
 8009412:	462a      	mov	r2, r5
 8009414:	4649      	mov	r1, r9
 8009416:	4620      	mov	r0, r4
 8009418:	f7ff ffa8 	bl	800936c <L_shift>
 800941c:	4544      	cmp	r4, r8
 800941e:	d952      	bls.n	80094c6 <__hexnan+0x10e>
 8009420:	2300      	movs	r3, #0
 8009422:	f1a4 0904 	sub.w	r9, r4, #4
 8009426:	f844 3c04 	str.w	r3, [r4, #-4]
 800942a:	f8cd b008 	str.w	fp, [sp, #8]
 800942e:	464c      	mov	r4, r9
 8009430:	461d      	mov	r5, r3
 8009432:	9903      	ldr	r1, [sp, #12]
 8009434:	e7d7      	b.n	80093e6 <__hexnan+0x2e>
 8009436:	2a29      	cmp	r2, #41	@ 0x29
 8009438:	d157      	bne.n	80094ea <__hexnan+0x132>
 800943a:	3102      	adds	r1, #2
 800943c:	f8ca 1000 	str.w	r1, [sl]
 8009440:	f1bb 0f00 	cmp.w	fp, #0
 8009444:	d051      	beq.n	80094ea <__hexnan+0x132>
 8009446:	454c      	cmp	r4, r9
 8009448:	d206      	bcs.n	8009458 <__hexnan+0xa0>
 800944a:	2d07      	cmp	r5, #7
 800944c:	dc04      	bgt.n	8009458 <__hexnan+0xa0>
 800944e:	462a      	mov	r2, r5
 8009450:	4649      	mov	r1, r9
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff ff8a 	bl	800936c <L_shift>
 8009458:	4544      	cmp	r4, r8
 800945a:	d936      	bls.n	80094ca <__hexnan+0x112>
 800945c:	f1a8 0204 	sub.w	r2, r8, #4
 8009460:	4623      	mov	r3, r4
 8009462:	f853 1b04 	ldr.w	r1, [r3], #4
 8009466:	f842 1f04 	str.w	r1, [r2, #4]!
 800946a:	429f      	cmp	r7, r3
 800946c:	d2f9      	bcs.n	8009462 <__hexnan+0xaa>
 800946e:	1b3b      	subs	r3, r7, r4
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	3304      	adds	r3, #4
 8009476:	3401      	adds	r4, #1
 8009478:	3e03      	subs	r6, #3
 800947a:	42b4      	cmp	r4, r6
 800947c:	bf88      	it	hi
 800947e:	2304      	movhi	r3, #4
 8009480:	4443      	add	r3, r8
 8009482:	2200      	movs	r2, #0
 8009484:	f843 2b04 	str.w	r2, [r3], #4
 8009488:	429f      	cmp	r7, r3
 800948a:	d2fb      	bcs.n	8009484 <__hexnan+0xcc>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	b91b      	cbnz	r3, 8009498 <__hexnan+0xe0>
 8009490:	4547      	cmp	r7, r8
 8009492:	d128      	bne.n	80094e6 <__hexnan+0x12e>
 8009494:	2301      	movs	r3, #1
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	2005      	movs	r0, #5
 800949a:	b007      	add	sp, #28
 800949c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	3501      	adds	r5, #1
 80094a2:	2d08      	cmp	r5, #8
 80094a4:	f10b 0b01 	add.w	fp, fp, #1
 80094a8:	dd06      	ble.n	80094b8 <__hexnan+0x100>
 80094aa:	4544      	cmp	r4, r8
 80094ac:	d9c1      	bls.n	8009432 <__hexnan+0x7a>
 80094ae:	2300      	movs	r3, #0
 80094b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80094b4:	2501      	movs	r5, #1
 80094b6:	3c04      	subs	r4, #4
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	f000 000f 	and.w	r0, r0, #15
 80094be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094c2:	6020      	str	r0, [r4, #0]
 80094c4:	e7b5      	b.n	8009432 <__hexnan+0x7a>
 80094c6:	2508      	movs	r5, #8
 80094c8:	e7b3      	b.n	8009432 <__hexnan+0x7a>
 80094ca:	9b01      	ldr	r3, [sp, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0dd      	beq.n	800948c <__hexnan+0xd4>
 80094d0:	f1c3 0320 	rsb	r3, r3, #32
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	40da      	lsrs	r2, r3
 80094da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094de:	4013      	ands	r3, r2
 80094e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80094e4:	e7d2      	b.n	800948c <__hexnan+0xd4>
 80094e6:	3f04      	subs	r7, #4
 80094e8:	e7d0      	b.n	800948c <__hexnan+0xd4>
 80094ea:	2004      	movs	r0, #4
 80094ec:	e7d5      	b.n	800949a <__hexnan+0xe2>

080094ee <__ascii_mbtowc>:
 80094ee:	b082      	sub	sp, #8
 80094f0:	b901      	cbnz	r1, 80094f4 <__ascii_mbtowc+0x6>
 80094f2:	a901      	add	r1, sp, #4
 80094f4:	b142      	cbz	r2, 8009508 <__ascii_mbtowc+0x1a>
 80094f6:	b14b      	cbz	r3, 800950c <__ascii_mbtowc+0x1e>
 80094f8:	7813      	ldrb	r3, [r2, #0]
 80094fa:	600b      	str	r3, [r1, #0]
 80094fc:	7812      	ldrb	r2, [r2, #0]
 80094fe:	1e10      	subs	r0, r2, #0
 8009500:	bf18      	it	ne
 8009502:	2001      	movne	r0, #1
 8009504:	b002      	add	sp, #8
 8009506:	4770      	bx	lr
 8009508:	4610      	mov	r0, r2
 800950a:	e7fb      	b.n	8009504 <__ascii_mbtowc+0x16>
 800950c:	f06f 0001 	mvn.w	r0, #1
 8009510:	e7f8      	b.n	8009504 <__ascii_mbtowc+0x16>

08009512 <_realloc_r>:
 8009512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	4680      	mov	r8, r0
 8009518:	4615      	mov	r5, r2
 800951a:	460c      	mov	r4, r1
 800951c:	b921      	cbnz	r1, 8009528 <_realloc_r+0x16>
 800951e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009522:	4611      	mov	r1, r2
 8009524:	f7fd be60 	b.w	80071e8 <_malloc_r>
 8009528:	b92a      	cbnz	r2, 8009536 <_realloc_r+0x24>
 800952a:	f7fd fde9 	bl	8007100 <_free_r>
 800952e:	2400      	movs	r4, #0
 8009530:	4620      	mov	r0, r4
 8009532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009536:	f000 f840 	bl	80095ba <_malloc_usable_size_r>
 800953a:	4285      	cmp	r5, r0
 800953c:	4606      	mov	r6, r0
 800953e:	d802      	bhi.n	8009546 <_realloc_r+0x34>
 8009540:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009544:	d8f4      	bhi.n	8009530 <_realloc_r+0x1e>
 8009546:	4629      	mov	r1, r5
 8009548:	4640      	mov	r0, r8
 800954a:	f7fd fe4d 	bl	80071e8 <_malloc_r>
 800954e:	4607      	mov	r7, r0
 8009550:	2800      	cmp	r0, #0
 8009552:	d0ec      	beq.n	800952e <_realloc_r+0x1c>
 8009554:	42b5      	cmp	r5, r6
 8009556:	462a      	mov	r2, r5
 8009558:	4621      	mov	r1, r4
 800955a:	bf28      	it	cs
 800955c:	4632      	movcs	r2, r6
 800955e:	f7ff fc45 	bl	8008dec <memcpy>
 8009562:	4621      	mov	r1, r4
 8009564:	4640      	mov	r0, r8
 8009566:	f7fd fdcb 	bl	8007100 <_free_r>
 800956a:	463c      	mov	r4, r7
 800956c:	e7e0      	b.n	8009530 <_realloc_r+0x1e>

0800956e <__ascii_wctomb>:
 800956e:	4603      	mov	r3, r0
 8009570:	4608      	mov	r0, r1
 8009572:	b141      	cbz	r1, 8009586 <__ascii_wctomb+0x18>
 8009574:	2aff      	cmp	r2, #255	@ 0xff
 8009576:	d904      	bls.n	8009582 <__ascii_wctomb+0x14>
 8009578:	228a      	movs	r2, #138	@ 0x8a
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	4770      	bx	lr
 8009582:	700a      	strb	r2, [r1, #0]
 8009584:	2001      	movs	r0, #1
 8009586:	4770      	bx	lr

08009588 <fiprintf>:
 8009588:	b40e      	push	{r1, r2, r3}
 800958a:	b503      	push	{r0, r1, lr}
 800958c:	4601      	mov	r1, r0
 800958e:	ab03      	add	r3, sp, #12
 8009590:	4805      	ldr	r0, [pc, #20]	@ (80095a8 <fiprintf+0x20>)
 8009592:	f853 2b04 	ldr.w	r2, [r3], #4
 8009596:	6800      	ldr	r0, [r0, #0]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	f000 f83f 	bl	800961c <_vfiprintf_r>
 800959e:	b002      	add	sp, #8
 80095a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a4:	b003      	add	sp, #12
 80095a6:	4770      	bx	lr
 80095a8:	20000018 	.word	0x20000018

080095ac <abort>:
 80095ac:	b508      	push	{r3, lr}
 80095ae:	2006      	movs	r0, #6
 80095b0:	f000 fa08 	bl	80099c4 <raise>
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7f8 f850 	bl	800165a <_exit>

080095ba <_malloc_usable_size_r>:
 80095ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095be:	1f18      	subs	r0, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bfbc      	itt	lt
 80095c4:	580b      	ldrlt	r3, [r1, r0]
 80095c6:	18c0      	addlt	r0, r0, r3
 80095c8:	4770      	bx	lr

080095ca <__sfputc_r>:
 80095ca:	6893      	ldr	r3, [r2, #8]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	b410      	push	{r4}
 80095d2:	6093      	str	r3, [r2, #8]
 80095d4:	da08      	bge.n	80095e8 <__sfputc_r+0x1e>
 80095d6:	6994      	ldr	r4, [r2, #24]
 80095d8:	42a3      	cmp	r3, r4
 80095da:	db01      	blt.n	80095e0 <__sfputc_r+0x16>
 80095dc:	290a      	cmp	r1, #10
 80095de:	d103      	bne.n	80095e8 <__sfputc_r+0x1e>
 80095e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e4:	f000 b932 	b.w	800984c <__swbuf_r>
 80095e8:	6813      	ldr	r3, [r2, #0]
 80095ea:	1c58      	adds	r0, r3, #1
 80095ec:	6010      	str	r0, [r2, #0]
 80095ee:	7019      	strb	r1, [r3, #0]
 80095f0:	4608      	mov	r0, r1
 80095f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <__sfputs_r>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	4606      	mov	r6, r0
 80095fc:	460f      	mov	r7, r1
 80095fe:	4614      	mov	r4, r2
 8009600:	18d5      	adds	r5, r2, r3
 8009602:	42ac      	cmp	r4, r5
 8009604:	d101      	bne.n	800960a <__sfputs_r+0x12>
 8009606:	2000      	movs	r0, #0
 8009608:	e007      	b.n	800961a <__sfputs_r+0x22>
 800960a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960e:	463a      	mov	r2, r7
 8009610:	4630      	mov	r0, r6
 8009612:	f7ff ffda 	bl	80095ca <__sfputc_r>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d1f3      	bne.n	8009602 <__sfputs_r+0xa>
 800961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800961c <_vfiprintf_r>:
 800961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	460d      	mov	r5, r1
 8009622:	b09d      	sub	sp, #116	@ 0x74
 8009624:	4614      	mov	r4, r2
 8009626:	4698      	mov	r8, r3
 8009628:	4606      	mov	r6, r0
 800962a:	b118      	cbz	r0, 8009634 <_vfiprintf_r+0x18>
 800962c:	6a03      	ldr	r3, [r0, #32]
 800962e:	b90b      	cbnz	r3, 8009634 <_vfiprintf_r+0x18>
 8009630:	f7fc fdc6 	bl	80061c0 <__sinit>
 8009634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009636:	07d9      	lsls	r1, r3, #31
 8009638:	d405      	bmi.n	8009646 <_vfiprintf_r+0x2a>
 800963a:	89ab      	ldrh	r3, [r5, #12]
 800963c:	059a      	lsls	r2, r3, #22
 800963e:	d402      	bmi.n	8009646 <_vfiprintf_r+0x2a>
 8009640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009642:	f7fc ff08 	bl	8006456 <__retarget_lock_acquire_recursive>
 8009646:	89ab      	ldrh	r3, [r5, #12]
 8009648:	071b      	lsls	r3, r3, #28
 800964a:	d501      	bpl.n	8009650 <_vfiprintf_r+0x34>
 800964c:	692b      	ldr	r3, [r5, #16]
 800964e:	b99b      	cbnz	r3, 8009678 <_vfiprintf_r+0x5c>
 8009650:	4629      	mov	r1, r5
 8009652:	4630      	mov	r0, r6
 8009654:	f000 f938 	bl	80098c8 <__swsetup_r>
 8009658:	b170      	cbz	r0, 8009678 <_vfiprintf_r+0x5c>
 800965a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800965c:	07dc      	lsls	r4, r3, #31
 800965e:	d504      	bpl.n	800966a <_vfiprintf_r+0x4e>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295
 8009664:	b01d      	add	sp, #116	@ 0x74
 8009666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966a:	89ab      	ldrh	r3, [r5, #12]
 800966c:	0598      	lsls	r0, r3, #22
 800966e:	d4f7      	bmi.n	8009660 <_vfiprintf_r+0x44>
 8009670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009672:	f7fc fef1 	bl	8006458 <__retarget_lock_release_recursive>
 8009676:	e7f3      	b.n	8009660 <_vfiprintf_r+0x44>
 8009678:	2300      	movs	r3, #0
 800967a:	9309      	str	r3, [sp, #36]	@ 0x24
 800967c:	2320      	movs	r3, #32
 800967e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009682:	f8cd 800c 	str.w	r8, [sp, #12]
 8009686:	2330      	movs	r3, #48	@ 0x30
 8009688:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009838 <_vfiprintf_r+0x21c>
 800968c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009690:	f04f 0901 	mov.w	r9, #1
 8009694:	4623      	mov	r3, r4
 8009696:	469a      	mov	sl, r3
 8009698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800969c:	b10a      	cbz	r2, 80096a2 <_vfiprintf_r+0x86>
 800969e:	2a25      	cmp	r2, #37	@ 0x25
 80096a0:	d1f9      	bne.n	8009696 <_vfiprintf_r+0x7a>
 80096a2:	ebba 0b04 	subs.w	fp, sl, r4
 80096a6:	d00b      	beq.n	80096c0 <_vfiprintf_r+0xa4>
 80096a8:	465b      	mov	r3, fp
 80096aa:	4622      	mov	r2, r4
 80096ac:	4629      	mov	r1, r5
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff ffa2 	bl	80095f8 <__sfputs_r>
 80096b4:	3001      	adds	r0, #1
 80096b6:	f000 80a7 	beq.w	8009808 <_vfiprintf_r+0x1ec>
 80096ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096bc:	445a      	add	r2, fp
 80096be:	9209      	str	r2, [sp, #36]	@ 0x24
 80096c0:	f89a 3000 	ldrb.w	r3, [sl]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 809f 	beq.w	8009808 <_vfiprintf_r+0x1ec>
 80096ca:	2300      	movs	r3, #0
 80096cc:	f04f 32ff 	mov.w	r2, #4294967295
 80096d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096d4:	f10a 0a01 	add.w	sl, sl, #1
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	9307      	str	r3, [sp, #28]
 80096dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80096e2:	4654      	mov	r4, sl
 80096e4:	2205      	movs	r2, #5
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	4853      	ldr	r0, [pc, #332]	@ (8009838 <_vfiprintf_r+0x21c>)
 80096ec:	f7f6 fd70 	bl	80001d0 <memchr>
 80096f0:	9a04      	ldr	r2, [sp, #16]
 80096f2:	b9d8      	cbnz	r0, 800972c <_vfiprintf_r+0x110>
 80096f4:	06d1      	lsls	r1, r2, #27
 80096f6:	bf44      	itt	mi
 80096f8:	2320      	movmi	r3, #32
 80096fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096fe:	0713      	lsls	r3, r2, #28
 8009700:	bf44      	itt	mi
 8009702:	232b      	movmi	r3, #43	@ 0x2b
 8009704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009708:	f89a 3000 	ldrb.w	r3, [sl]
 800970c:	2b2a      	cmp	r3, #42	@ 0x2a
 800970e:	d015      	beq.n	800973c <_vfiprintf_r+0x120>
 8009710:	9a07      	ldr	r2, [sp, #28]
 8009712:	4654      	mov	r4, sl
 8009714:	2000      	movs	r0, #0
 8009716:	f04f 0c0a 	mov.w	ip, #10
 800971a:	4621      	mov	r1, r4
 800971c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009720:	3b30      	subs	r3, #48	@ 0x30
 8009722:	2b09      	cmp	r3, #9
 8009724:	d94b      	bls.n	80097be <_vfiprintf_r+0x1a2>
 8009726:	b1b0      	cbz	r0, 8009756 <_vfiprintf_r+0x13a>
 8009728:	9207      	str	r2, [sp, #28]
 800972a:	e014      	b.n	8009756 <_vfiprintf_r+0x13a>
 800972c:	eba0 0308 	sub.w	r3, r0, r8
 8009730:	fa09 f303 	lsl.w	r3, r9, r3
 8009734:	4313      	orrs	r3, r2
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	46a2      	mov	sl, r4
 800973a:	e7d2      	b.n	80096e2 <_vfiprintf_r+0xc6>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	1d19      	adds	r1, r3, #4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	9103      	str	r1, [sp, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	bfbb      	ittet	lt
 8009748:	425b      	neglt	r3, r3
 800974a:	f042 0202 	orrlt.w	r2, r2, #2
 800974e:	9307      	strge	r3, [sp, #28]
 8009750:	9307      	strlt	r3, [sp, #28]
 8009752:	bfb8      	it	lt
 8009754:	9204      	strlt	r2, [sp, #16]
 8009756:	7823      	ldrb	r3, [r4, #0]
 8009758:	2b2e      	cmp	r3, #46	@ 0x2e
 800975a:	d10a      	bne.n	8009772 <_vfiprintf_r+0x156>
 800975c:	7863      	ldrb	r3, [r4, #1]
 800975e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009760:	d132      	bne.n	80097c8 <_vfiprintf_r+0x1ac>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	9203      	str	r2, [sp, #12]
 800976a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800976e:	3402      	adds	r4, #2
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009848 <_vfiprintf_r+0x22c>
 8009776:	7821      	ldrb	r1, [r4, #0]
 8009778:	2203      	movs	r2, #3
 800977a:	4650      	mov	r0, sl
 800977c:	f7f6 fd28 	bl	80001d0 <memchr>
 8009780:	b138      	cbz	r0, 8009792 <_vfiprintf_r+0x176>
 8009782:	9b04      	ldr	r3, [sp, #16]
 8009784:	eba0 000a 	sub.w	r0, r0, sl
 8009788:	2240      	movs	r2, #64	@ 0x40
 800978a:	4082      	lsls	r2, r0
 800978c:	4313      	orrs	r3, r2
 800978e:	3401      	adds	r4, #1
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009796:	4829      	ldr	r0, [pc, #164]	@ (800983c <_vfiprintf_r+0x220>)
 8009798:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800979c:	2206      	movs	r2, #6
 800979e:	f7f6 fd17 	bl	80001d0 <memchr>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d03f      	beq.n	8009826 <_vfiprintf_r+0x20a>
 80097a6:	4b26      	ldr	r3, [pc, #152]	@ (8009840 <_vfiprintf_r+0x224>)
 80097a8:	bb1b      	cbnz	r3, 80097f2 <_vfiprintf_r+0x1d6>
 80097aa:	9b03      	ldr	r3, [sp, #12]
 80097ac:	3307      	adds	r3, #7
 80097ae:	f023 0307 	bic.w	r3, r3, #7
 80097b2:	3308      	adds	r3, #8
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b8:	443b      	add	r3, r7
 80097ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80097bc:	e76a      	b.n	8009694 <_vfiprintf_r+0x78>
 80097be:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c2:	460c      	mov	r4, r1
 80097c4:	2001      	movs	r0, #1
 80097c6:	e7a8      	b.n	800971a <_vfiprintf_r+0xfe>
 80097c8:	2300      	movs	r3, #0
 80097ca:	3401      	adds	r4, #1
 80097cc:	9305      	str	r3, [sp, #20]
 80097ce:	4619      	mov	r1, r3
 80097d0:	f04f 0c0a 	mov.w	ip, #10
 80097d4:	4620      	mov	r0, r4
 80097d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097da:	3a30      	subs	r2, #48	@ 0x30
 80097dc:	2a09      	cmp	r2, #9
 80097de:	d903      	bls.n	80097e8 <_vfiprintf_r+0x1cc>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0c6      	beq.n	8009772 <_vfiprintf_r+0x156>
 80097e4:	9105      	str	r1, [sp, #20]
 80097e6:	e7c4      	b.n	8009772 <_vfiprintf_r+0x156>
 80097e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ec:	4604      	mov	r4, r0
 80097ee:	2301      	movs	r3, #1
 80097f0:	e7f0      	b.n	80097d4 <_vfiprintf_r+0x1b8>
 80097f2:	ab03      	add	r3, sp, #12
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	462a      	mov	r2, r5
 80097f8:	4b12      	ldr	r3, [pc, #72]	@ (8009844 <_vfiprintf_r+0x228>)
 80097fa:	a904      	add	r1, sp, #16
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7fb fe87 	bl	8005510 <_printf_float>
 8009802:	4607      	mov	r7, r0
 8009804:	1c78      	adds	r0, r7, #1
 8009806:	d1d6      	bne.n	80097b6 <_vfiprintf_r+0x19a>
 8009808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800980a:	07d9      	lsls	r1, r3, #31
 800980c:	d405      	bmi.n	800981a <_vfiprintf_r+0x1fe>
 800980e:	89ab      	ldrh	r3, [r5, #12]
 8009810:	059a      	lsls	r2, r3, #22
 8009812:	d402      	bmi.n	800981a <_vfiprintf_r+0x1fe>
 8009814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009816:	f7fc fe1f 	bl	8006458 <__retarget_lock_release_recursive>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	065b      	lsls	r3, r3, #25
 800981e:	f53f af1f 	bmi.w	8009660 <_vfiprintf_r+0x44>
 8009822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009824:	e71e      	b.n	8009664 <_vfiprintf_r+0x48>
 8009826:	ab03      	add	r3, sp, #12
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	462a      	mov	r2, r5
 800982c:	4b05      	ldr	r3, [pc, #20]	@ (8009844 <_vfiprintf_r+0x228>)
 800982e:	a904      	add	r1, sp, #16
 8009830:	4630      	mov	r0, r6
 8009832:	f7fc f905 	bl	8005a40 <_printf_i>
 8009836:	e7e4      	b.n	8009802 <_vfiprintf_r+0x1e6>
 8009838:	08009f31 	.word	0x08009f31
 800983c:	08009f3b 	.word	0x08009f3b
 8009840:	08005511 	.word	0x08005511
 8009844:	080095f9 	.word	0x080095f9
 8009848:	08009f37 	.word	0x08009f37

0800984c <__swbuf_r>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	460e      	mov	r6, r1
 8009850:	4614      	mov	r4, r2
 8009852:	4605      	mov	r5, r0
 8009854:	b118      	cbz	r0, 800985e <__swbuf_r+0x12>
 8009856:	6a03      	ldr	r3, [r0, #32]
 8009858:	b90b      	cbnz	r3, 800985e <__swbuf_r+0x12>
 800985a:	f7fc fcb1 	bl	80061c0 <__sinit>
 800985e:	69a3      	ldr	r3, [r4, #24]
 8009860:	60a3      	str	r3, [r4, #8]
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	071a      	lsls	r2, r3, #28
 8009866:	d501      	bpl.n	800986c <__swbuf_r+0x20>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	b943      	cbnz	r3, 800987e <__swbuf_r+0x32>
 800986c:	4621      	mov	r1, r4
 800986e:	4628      	mov	r0, r5
 8009870:	f000 f82a 	bl	80098c8 <__swsetup_r>
 8009874:	b118      	cbz	r0, 800987e <__swbuf_r+0x32>
 8009876:	f04f 37ff 	mov.w	r7, #4294967295
 800987a:	4638      	mov	r0, r7
 800987c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	6922      	ldr	r2, [r4, #16]
 8009882:	1a98      	subs	r0, r3, r2
 8009884:	6963      	ldr	r3, [r4, #20]
 8009886:	b2f6      	uxtb	r6, r6
 8009888:	4283      	cmp	r3, r0
 800988a:	4637      	mov	r7, r6
 800988c:	dc05      	bgt.n	800989a <__swbuf_r+0x4e>
 800988e:	4621      	mov	r1, r4
 8009890:	4628      	mov	r0, r5
 8009892:	f7ff fa47 	bl	8008d24 <_fflush_r>
 8009896:	2800      	cmp	r0, #0
 8009898:	d1ed      	bne.n	8009876 <__swbuf_r+0x2a>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	3b01      	subs	r3, #1
 800989e:	60a3      	str	r3, [r4, #8]
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	701e      	strb	r6, [r3, #0]
 80098a8:	6962      	ldr	r2, [r4, #20]
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d004      	beq.n	80098ba <__swbuf_r+0x6e>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d5e1      	bpl.n	800987a <__swbuf_r+0x2e>
 80098b6:	2e0a      	cmp	r6, #10
 80098b8:	d1df      	bne.n	800987a <__swbuf_r+0x2e>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f7ff fa31 	bl	8008d24 <_fflush_r>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d0d9      	beq.n	800987a <__swbuf_r+0x2e>
 80098c6:	e7d6      	b.n	8009876 <__swbuf_r+0x2a>

080098c8 <__swsetup_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4b29      	ldr	r3, [pc, #164]	@ (8009970 <__swsetup_r+0xa8>)
 80098cc:	4605      	mov	r5, r0
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	460c      	mov	r4, r1
 80098d2:	b118      	cbz	r0, 80098dc <__swsetup_r+0x14>
 80098d4:	6a03      	ldr	r3, [r0, #32]
 80098d6:	b90b      	cbnz	r3, 80098dc <__swsetup_r+0x14>
 80098d8:	f7fc fc72 	bl	80061c0 <__sinit>
 80098dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e0:	0719      	lsls	r1, r3, #28
 80098e2:	d422      	bmi.n	800992a <__swsetup_r+0x62>
 80098e4:	06da      	lsls	r2, r3, #27
 80098e6:	d407      	bmi.n	80098f8 <__swsetup_r+0x30>
 80098e8:	2209      	movs	r2, #9
 80098ea:	602a      	str	r2, [r5, #0]
 80098ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	f04f 30ff 	mov.w	r0, #4294967295
 80098f6:	e033      	b.n	8009960 <__swsetup_r+0x98>
 80098f8:	0758      	lsls	r0, r3, #29
 80098fa:	d512      	bpl.n	8009922 <__swsetup_r+0x5a>
 80098fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098fe:	b141      	cbz	r1, 8009912 <__swsetup_r+0x4a>
 8009900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009904:	4299      	cmp	r1, r3
 8009906:	d002      	beq.n	800990e <__swsetup_r+0x46>
 8009908:	4628      	mov	r0, r5
 800990a:	f7fd fbf9 	bl	8007100 <_free_r>
 800990e:	2300      	movs	r3, #0
 8009910:	6363      	str	r3, [r4, #52]	@ 0x34
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	2300      	movs	r3, #0
 800991c:	6063      	str	r3, [r4, #4]
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f043 0308 	orr.w	r3, r3, #8
 8009928:	81a3      	strh	r3, [r4, #12]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	b94b      	cbnz	r3, 8009942 <__swsetup_r+0x7a>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009938:	d003      	beq.n	8009942 <__swsetup_r+0x7a>
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f000 f883 	bl	8009a48 <__smakebuf_r>
 8009942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009946:	f013 0201 	ands.w	r2, r3, #1
 800994a:	d00a      	beq.n	8009962 <__swsetup_r+0x9a>
 800994c:	2200      	movs	r2, #0
 800994e:	60a2      	str	r2, [r4, #8]
 8009950:	6962      	ldr	r2, [r4, #20]
 8009952:	4252      	negs	r2, r2
 8009954:	61a2      	str	r2, [r4, #24]
 8009956:	6922      	ldr	r2, [r4, #16]
 8009958:	b942      	cbnz	r2, 800996c <__swsetup_r+0xa4>
 800995a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800995e:	d1c5      	bne.n	80098ec <__swsetup_r+0x24>
 8009960:	bd38      	pop	{r3, r4, r5, pc}
 8009962:	0799      	lsls	r1, r3, #30
 8009964:	bf58      	it	pl
 8009966:	6962      	ldrpl	r2, [r4, #20]
 8009968:	60a2      	str	r2, [r4, #8]
 800996a:	e7f4      	b.n	8009956 <__swsetup_r+0x8e>
 800996c:	2000      	movs	r0, #0
 800996e:	e7f7      	b.n	8009960 <__swsetup_r+0x98>
 8009970:	20000018 	.word	0x20000018

08009974 <_raise_r>:
 8009974:	291f      	cmp	r1, #31
 8009976:	b538      	push	{r3, r4, r5, lr}
 8009978:	4605      	mov	r5, r0
 800997a:	460c      	mov	r4, r1
 800997c:	d904      	bls.n	8009988 <_raise_r+0x14>
 800997e:	2316      	movs	r3, #22
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	f04f 30ff 	mov.w	r0, #4294967295
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800998a:	b112      	cbz	r2, 8009992 <_raise_r+0x1e>
 800998c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009990:	b94b      	cbnz	r3, 80099a6 <_raise_r+0x32>
 8009992:	4628      	mov	r0, r5
 8009994:	f000 f830 	bl	80099f8 <_getpid_r>
 8009998:	4622      	mov	r2, r4
 800999a:	4601      	mov	r1, r0
 800999c:	4628      	mov	r0, r5
 800999e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a2:	f000 b817 	b.w	80099d4 <_kill_r>
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d00a      	beq.n	80099c0 <_raise_r+0x4c>
 80099aa:	1c59      	adds	r1, r3, #1
 80099ac:	d103      	bne.n	80099b6 <_raise_r+0x42>
 80099ae:	2316      	movs	r3, #22
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	2001      	movs	r0, #1
 80099b4:	e7e7      	b.n	8009986 <_raise_r+0x12>
 80099b6:	2100      	movs	r1, #0
 80099b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099bc:	4620      	mov	r0, r4
 80099be:	4798      	blx	r3
 80099c0:	2000      	movs	r0, #0
 80099c2:	e7e0      	b.n	8009986 <_raise_r+0x12>

080099c4 <raise>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	@ (80099d0 <raise+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f7ff bfd3 	b.w	8009974 <_raise_r>
 80099ce:	bf00      	nop
 80099d0:	20000018 	.word	0x20000018

080099d4 <_kill_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	@ (80099f4 <_kill_r+0x20>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	4611      	mov	r1, r2
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	f7f7 fe2a 	bl	800163a <_kill>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	d102      	bne.n	80099f0 <_kill_r+0x1c>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	b103      	cbz	r3, 80099f0 <_kill_r+0x1c>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	bf00      	nop
 80099f4:	200005b4 	.word	0x200005b4

080099f8 <_getpid_r>:
 80099f8:	f7f7 be17 	b.w	800162a <_getpid>

080099fc <__swhatbuf_r>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	460c      	mov	r4, r1
 8009a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a04:	2900      	cmp	r1, #0
 8009a06:	b096      	sub	sp, #88	@ 0x58
 8009a08:	4615      	mov	r5, r2
 8009a0a:	461e      	mov	r6, r3
 8009a0c:	da0d      	bge.n	8009a2a <__swhatbuf_r+0x2e>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a14:	f04f 0100 	mov.w	r1, #0
 8009a18:	bf14      	ite	ne
 8009a1a:	2340      	movne	r3, #64	@ 0x40
 8009a1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a20:	2000      	movs	r0, #0
 8009a22:	6031      	str	r1, [r6, #0]
 8009a24:	602b      	str	r3, [r5, #0]
 8009a26:	b016      	add	sp, #88	@ 0x58
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	466a      	mov	r2, sp
 8009a2c:	f000 f848 	bl	8009ac0 <_fstat_r>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	dbec      	blt.n	8009a0e <__swhatbuf_r+0x12>
 8009a34:	9901      	ldr	r1, [sp, #4]
 8009a36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a3e:	4259      	negs	r1, r3
 8009a40:	4159      	adcs	r1, r3
 8009a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a46:	e7eb      	b.n	8009a20 <__swhatbuf_r+0x24>

08009a48 <__smakebuf_r>:
 8009a48:	898b      	ldrh	r3, [r1, #12]
 8009a4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a4c:	079d      	lsls	r5, r3, #30
 8009a4e:	4606      	mov	r6, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	d507      	bpl.n	8009a64 <__smakebuf_r+0x1c>
 8009a54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	6163      	str	r3, [r4, #20]
 8009a60:	b003      	add	sp, #12
 8009a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a64:	ab01      	add	r3, sp, #4
 8009a66:	466a      	mov	r2, sp
 8009a68:	f7ff ffc8 	bl	80099fc <__swhatbuf_r>
 8009a6c:	9f00      	ldr	r7, [sp, #0]
 8009a6e:	4605      	mov	r5, r0
 8009a70:	4639      	mov	r1, r7
 8009a72:	4630      	mov	r0, r6
 8009a74:	f7fd fbb8 	bl	80071e8 <_malloc_r>
 8009a78:	b948      	cbnz	r0, 8009a8e <__smakebuf_r+0x46>
 8009a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7e:	059a      	lsls	r2, r3, #22
 8009a80:	d4ee      	bmi.n	8009a60 <__smakebuf_r+0x18>
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	f043 0302 	orr.w	r3, r3, #2
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	e7e2      	b.n	8009a54 <__smakebuf_r+0xc>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	6020      	str	r0, [r4, #0]
 8009a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a9e:	b15b      	cbz	r3, 8009ab8 <__smakebuf_r+0x70>
 8009aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 f81d 	bl	8009ae4 <_isatty_r>
 8009aaa:	b128      	cbz	r0, 8009ab8 <__smakebuf_r+0x70>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	f023 0303 	bic.w	r3, r3, #3
 8009ab2:	f043 0301 	orr.w	r3, r3, #1
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	431d      	orrs	r5, r3
 8009abc:	81a5      	strh	r5, [r4, #12]
 8009abe:	e7cf      	b.n	8009a60 <__smakebuf_r+0x18>

08009ac0 <_fstat_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	@ (8009ae0 <_fstat_r+0x20>)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	4611      	mov	r1, r2
 8009acc:	602b      	str	r3, [r5, #0]
 8009ace:	f7f7 fe14 	bl	80016fa <_fstat>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	d102      	bne.n	8009adc <_fstat_r+0x1c>
 8009ad6:	682b      	ldr	r3, [r5, #0]
 8009ad8:	b103      	cbz	r3, 8009adc <_fstat_r+0x1c>
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	bd38      	pop	{r3, r4, r5, pc}
 8009ade:	bf00      	nop
 8009ae0:	200005b4 	.word	0x200005b4

08009ae4 <_isatty_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d06      	ldr	r5, [pc, #24]	@ (8009b00 <_isatty_r+0x1c>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	602b      	str	r3, [r5, #0]
 8009af0:	f7f7 fe13 	bl	800171a <_isatty>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_isatty_r+0x1a>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_isatty_r+0x1a>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	200005b4 	.word	0x200005b4

08009b04 <_init>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	bf00      	nop
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr

08009b10 <_fini>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr
